%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: daisystruct.pdf
%%Creator: (Adobe Acrobat 11.0.6)
%%For: cusgadmin
%%CreationDate: 5/9/14, 3:46 AM
%%BoundingBox: 0 0 446 432
%%HiResBoundingBox: 0 0 446 432
%%CropBox: 0 0 446 432
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 551 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2014-05-09T10:46:07Z"
   xmp:ModifyDate="2014-05-09T10:46:07Z"
   pdf:Producer="Mac OS X 10.9.2 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -432 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
446 432 li
446 0 li
cp
clp
gsave
0 432 mo
446 432 li
446 0 li
0 0 li
0 432 li
clp
446 432 mo
0 432 li
0 0 li
446 0 li
446 432 li
.600015 .376489 mo
.468378 .376489 .339532 .429858 .246415 .522975 cv
.153297 .616093 .10004 .744827 .10004 .876464 cv
.10004 431 li
.10004 431.132 .153297 431.26 .246415 431.353 cv
.339532 431.447 .468266 431.5 .600015 431.5 cv
426.537 431.5 li
426.669 431.5 426.798 431.447 426.891 431.353 cv
426.984 431.26 427.037 431.132 427.037 431 cv
427.037 426.76 li
438.156 426.76 li
441.364 426.76 443.966 424.159 443.966 420.95 cv
443.966 380.819 li
443.966 377.611 441.364 375.01 438.156 375.01 cv
427.037 375.01 li
427.037 367.506 li
438.156 367.506 li
441.364 367.506 443.966 364.905 443.966 361.697 cv
443.966 315.624 li
443.966 312.416 441.364 309.815 438.156 309.815 cv
427.037 309.815 li
427.037 302.288 li
438.156 302.288 li
441.364 302.288 443.966 299.687 443.966 296.479 cv
443.966 256.347 li
443.966 253.139 441.364 250.538 438.156 250.538 cv
427.037 250.538 li
427.037 244.592 li
438.156 244.592 li
441.364 244.592 443.966 241.991 443.966 238.783 cv
443.966 198.652 li
443.966 195.443 441.364 192.842 438.156 192.842 cv
427.037 192.842 li
427.037 181.502 li
436.853 181.502 li
439.977 181.502 442.51 178.97 442.51 175.845 cv
442.51 132.109 li
442.51 128.984 439.977 126.451 436.853 126.451 cv
427.037 126.451 li
427.037 74.4995 li
437.157 74.4995 li
440.366 74.4995 442.967 71.8985 442.967 68.69 cv
442.967 28.5783 li
442.967 25.3699 440.366 22.7689 437.157 22.7689 cv
427.037 22.7689 li
427.037 .876464 li
427.037 .744827 426.984 .616093 426.891 .522975 cv
426.798 .429858 426.669 .376489 426.537 .376489 cv
.600015 .376489 li
false sop
0 0 0 0 cmyk
f
.600015 .876464 mo
426.537 .876464 li
426.537 431 li
.600015 431 li
.600015 .876464 li
ef
.600015 .876464 mo
.600015 .376489 li
426.537 .376489 li
426.669 .376489 426.798 .429858 426.891 .522975 cv
426.984 .616093 427.037 .744827 427.037 .876464 cv
427.037 431 li
427.037 431.132 426.984 431.26 426.891 431.353 cv
426.798 431.447 426.669 431.5 426.537 431.5 cv
.600015 431.5 li
.468266 431.5 .339532 431.447 .246415 431.353 cv
.153297 431.26 .10004 431.132 .10004 431 cv
.10004 .876464 li
.10004 .744827 .153297 .616093 .246415 .522975 cv
.339532 .429858 .468378 .376489 .600015 .376489 cv
.600015 .876464 li
1.09999 .876464 li
1.09999 430.5 li
426.037 430.5 li
426.037 1.37655 li
.600015 1.37655 li
.600015 .876464 li
1.09999 .876464 li
.600015 .876464 li
.750271 .679713 .654902 .901945 cmyk
f
44.7916 20.9151 mo
231.795 20.9151 li
231.795 204.088 li
44.7916 204.088 li
cp
0 0 0 0 cmyk
ef
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
44.7916 20.9151 mo
231.795 20.9151 li
231.795 204.088 li
44.7916 204.088 li
cp
.156802 .755154 .645502 .0239872 cmyk
@
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: SDUAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /SDUAAA+ArialMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000006546670
676d00000000000007100000066e676c79660000000000001a98000030ee
686561640000000000000d8000000036686865610000000000000db80000
0024686d74780000000000000ddc0000007c6c6f63610000000000000e58
000000406d6178700000000000000e98000000206e616d65000000000000
0eb800000020707265700000000000000ed800000bbe6764697200000000
000000000000000005ba001905ba001a05a70019042600180000ffe70000
ffe80000ffe7fe69ffe805ba0019fe69ffe802ea000000b8000000b80000
000000a800ad016900ad00bf00c201f0001800af00b900b400c800170044
009c007c009400870006005a00c80089005200520005004400940119ffb4
002f00a1000300a100cd00170057007e00ba00160118ffe9007f008503d3
00870085000d002200410050006f008d014cff75005c00df04830037004c
006e00700180ff58ff8eff92ffa400a500b903c8fffd000b001a00630063
00cdffee05d8ffdc002d005c0095009900df019209b500400057008000b9
039d0072009a035d0401ff67fffa00030021007700cd0004004d00cd01c0
022b004c006500e70118017c034305d8ffa3ffb0ffc40003001c005d0068
009a00ba013501470221055cff4dffcd0016002d00780080009900b200b6
00b600b800bd00da010c05f0ffa4fff00019002c0049007f00b400ce01c0
03fefd81fe3f000000050018002900390049006f00be00c700d0012301c1
026f050c05320540057affd4001400310055005700a700b400e601f7027e
027e027f03c60446ff42000e0085009100bf00c200c500e1011a012f014f
01560229026f029e03720008002c00310031006400690089009800c700de
012b01b6020c02cf03a304ab04fb061dfee0ff0e00060026009b009d00c1
010d011801200173018201d601e30243025f029b02e2039404a904d20761
001c005e006d008d00ab00f7011201380151015b0168017c018701910199
01cd01d001e802410254026b02ef0368037103bd04420442045304730483
0586058b06e8fe58fec4fed1fef7ff32ff860051007c008100910095009e
00b400b900cf00d900d900df00e20105010b010e010e012001210155017b
017b017e018d01a201a801a901b401d001d001e201e901f201f501fb0200
02000206021b0221022202220223027202770294029c02cf02cf02d002ec
02f903170322032b0335033c0359036f037103870390039003b503e1041a
04cf04ff053205320596059f05a805ab05c205f0060c0782080008ccfca3
fd2afddefe00fe88fe96feb2feb4ffe100150019001a001c001f003c0051
00610061006a0078009600a500af00d3010c0118011a012a013e014c0151
015f016a0171017801820184019a01a501a801a901ae01bc01cd01d701ef
0200020d021c02210222022e02350242024f024f025e0265027102900292
02b402d602fa0307030b030f0315032a0347035d036503740379039603b0
03cc03dd03e203f603fc03fc03ff040a041f04220426042b0447045f0475
049e04e704e7055c05cb05e5060a066d068606b806f10736073e07500751
075d078f07b607d4086000b600c300b500b7000000000000000000000000
01e00381034503b5008e0233041902ce02ce002d005f0064034d023f0000
02a80188027d01b402240578063b023b014e00f00426029402c6029f02f6
023b034d014b0153006a0231000000000000061404aa0000003c04c300ed
04bc026502ce03b50078060c017e02ef060c00b201000239000001c50330
042b03cb00da03df010704a100db040a011701ed02a70350010b01bd043e
05580021039c00ae0371017d00b5024500000afb088c012b014e01aa0087
0054013201f803ff0003024e00b4003703e30083006b02d800ed00770088
009701640467008e0033017c00e700a6029e0329056e062a061501c90269
048a021301b4000204a9000002390124010305140084015d039a06ef02d9
007500cf040a00de03ac04bc02cf02ae034d04f005520168006d007d0086
0071ff810079055804d2016700030156002504e00094007c033204210094
007f0072005c002f00b6001800ba00b80041034d00720018001f004c016a
01550099009a009a009800b200040078006900140057006e00ce00b40654
02b80067050e016500e7000004cbfe52005affa60099ff67006eff92002d
ffd40087ff7c00b800a800e5008f00a80185fe7b0070001e00d900de014c
054602cf0546ff2d028a02d90253029600b7000000000000000000000000
00000125011800ea00ea00ae0000003e05bb008a04d70053003fff8cffd5
00150028002200990062004a00e4006d00ee00e5004803c00033fe4e02b1
ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a507050061
072b00ed04b001d200b6007b00650252ff740365fe690094008f005c0040
00860075008900894043555441403f3e3d3c3b3a3938373534333231302f
2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514131211
100f0e0d0c0b0a090807060504030201002c4523466020b02660b0042623
48482d2c452346236120b02661b004262348482d2c45234660b0206120b0
4660b004262348482d2c4523462361b0206020b02661b02061b004262348
482d2c45234660b0406120b06660b004262348482d2c4523462361b04060
20b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd44
2320b8015a51582320b08d44235920b0ed51582320b04d44235920b09051
582320b00d44235921212d2c20204518684420b001602045b04676688a45
60442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370
b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b01923
442d2c2045b00325456164b050515845441b2121592d2cb00143632362b0
002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069
b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d
2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0124358
8745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0a0
5158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b23
5961441cb114008a5279b31940201945208a54582321b03f1b235961442d
2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c
0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b52
5845441b2121592d2c0120b003252349b04060b0206320b000525823b002
253823b002256538008a63381b212121212159012d2c4bb06451584569b0
0943608a103a1b212121592d2c01b005251023208af500b0016023edec2d
2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c
20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a
2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8022323701020b8
02234520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c
21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051
580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb84000
626023212d2cb4000100000015b00826b00826b00826b008260f10161345
683ab001162d2cb4000100000015b00826b00826b00826b008260f101613
4568653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b5458
20458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b
2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54b01243
5c5a58381b2121592d2cb012435c580cb00425b00425060c6423646164b8
07085158b00425b00425012046b01060482046b0106048590a21211b2121
592d2cb012435c580cb00425b00425060c6423646164b807085158b00425
b00425012046b8fff060482046b8fff06048590a21211b2121592d2c4b53
234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c
4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b54
5a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0042549b00425
b00425496120b0005458212043b0005558b00325b00325b8ffc038b8ffc0
38591bb04054582043b0005458b00225b8ffc038591b2043b0005458b003
25b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121212d2c
462346608a8a462320468a608a61b8ff8062232010238ab902c202c28a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b94000020063b80400885458b2024002
43604259595959592d2cb0024354584b53234b515a58381b2121591b2121
2121592d00000001000000050f5c93baa7385f0f3cf5081b080000000000
a2e3272a00000000c59b6257faaffd671000080c00000009000100000000
000000010000073efe4e00431000faaffa7a100000010000000000000000
000000000000001f0600010002390000023900000556fffd05c7006605c7
009e055600a204e300a805c700a10556005c04e30030055600090473004a
04000050047300460473004b047300420473008701c700880400008801c7
008306aa008704730087047300440473008702aa00850400003f02390024
047300830400001a04000021000000150015004d012201bf026302c50320
045605ab060206bc082508ff09d90ab80bb00c820cfc0e480ec60fde10c1
11a21284130714db156d163c174b187700010000001f00f2003c009d0007
00020010002f0056000004ac041d00050002000000010012000100000000
0006000e00005158535a44582b417269616c4d54b900540328b326181fd0
bc032900e0032900020329b22b1d1fb90327031db23b1f40b80323b31215
320f412d03200001002f0320000100200320006f032000af032000bf0320
0004005f031e00010010031e007f031e0080031e00af031e00bf031e00d0
031e00060000031e0010031e0020031e006f031e009f031e00e0031e0006
031d031cb2201f1041270319007f03190002000f031700ef031700ff0317
0003001f0317002f0317004f0317005f0317008f0317009f03170006000f
0317005f0317006f0317007f031700bf031700f00317000600400317b292
3340b80317b28b3340b80317b36a6c3240b80317b2613340b80317b35c5d
3240b80317b357593240b80317b34d513240b80317b344493240b80317b2
3a3340b80317b331343240b80317b32e423240b80317b3272c3240b80317
b312253280b80317b30a0d32c04116031600d00316000200700316000102
c4000f0101001f00a0031500b0031500020306000f0101001f00400312b3
2426329fbf03040001030203010064001fffc00301b20d1132410a02ff02
ef0012001f02ee02ed0064001fffc002edb30e11329f414a02e200af02e2
00bf02e2000302e202e202e102e1007f02e00001001002e0003f02e0009f
02e000bf02e000cf02e000ef02e0000602e002e002df02df02de02de000f
02dd002f02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd000702dd
02dd001002dc0001000002dc0001001002dc003f02dc000202dc02dc0010
02db000102db02db000f02da000102da02daffc002d3b2373932b9ffc002
d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b32b9ffc002d3b212
1632b802d2b2f9291fb90326031cb23b1f40bb0322003e00330322b22531
1fb80318b23c691fb802e3b3202b1fa0413002d400b002d40002000002d4
001002d4002002d4005002d4006002d4007002d40006006002d6007002d6
008002d6009002d600a002d600b002d60006000002d6001002d6002002ca
002002cc002002d6003002d6004002d6005002d6000802d0b2202b1fb802
cfb226421f411602ce02c70017001f02cd02c80017001f02cc02c6001700
1f02cb02c50017001f02c902c5001e001f02ca02c6b21e1f00410b02c600
0002c7001002c6001002c7002f02c5000502c1b324121fff411102bf0001
001f02bf002f02bf003f02bf004f02bf005f02bf008f02bf000602bf0222
b2641f12410b02bb00ca0800001f02b200e90800001f02a600a20800406a
1f4026434932402043493240263a3d3240203a3d329f209f260240269699
32402096993240268e923240208e92324026848c324020848c3240267a81
3240207a813240266c763240206c76324026646a324020646a3240265a5f
3240205a5f3240264f543240204f5432b8029eb724271f374f6b0120410f
0277003002770040027700500277000402770277027700f90400001f029b
b22a2a1fb8029a402b292a1f80ba0180bc0180520180a201806501807e01
808101803c01805e01802b01801c01801e0180400180bb01380001008001
40b40180400180bb013800010080013940180180ca0180ad018073018026
018025018024018020013740b80221b2493340b80221b2453340b80221b3
41423240b80221b33d3e320f410f0221003f0221007f0221000300bf0221
00cf022100ff0221000300400221b320223240b80221b3191e3240b80222
b32a3f3240b80221b32e3a326f414802c3007f02c3008f02c300df02c300
04002f02c3006002c300cf02c30003000f02c3003f02c3005f02c300c002
c300ef02c300ff02c3000600df02220001008f02220001000f0222002f02
22003f0222005f0222007f022200ef0222000600bf022100ef0221000200
6f0221007f022100af02210003002f0221003f0221004f0221000302c302
c30222022202210221401d101c102b1048038f1c010f1e014f1eff1e0237
00161600000012110811b8010db6f70df8f70d00094109028e028f001d00
1f0290028f001d001f028fb2f91d1fb80198b226bb1f41150197001e0401
001f013900260125001f013800730401001f0135001c0801001f0134001c
02ab001f0132b21c561fb8010fb2262c1fba010e001e0401b61ff91ce41f
e91cb80201b61fe81cbb1fd720b80401b21fd51cb802abb61fd41c891fc9
2fb80801b21fbc26b80101b21fba20b80201b61fb91c381fadcab80401b2
1f8126b8019ab21f7e26b8019ab61f7d1c471f6b1cb80401b21f6526b801
9ab21f5e73b80401400f1f52265a1f481c891f441c621f4073b80801b61f
3f1c5e1f3c26b8019ab21f351cb80401b61f301cbb1f2b1cb80401b61f2a
1c561f291cb80101b21f231eb80401b21f5537b80168402c07960758074f
07360732072c0721071f071d071b071408120810080e080c080a08080806
0804080208000814b8ffe0402b0000010014061000000100060400000100
0410000001001002000001000200000001000002010802004a00b013034b
024b5342014bb0c063004b6220b0f65323b8010a515ab005234201b0124b
004b5442b0382b4bb807ff52b0372b4bb007505b58b101018e59b0382bb0
0288b801005458b801ffb101018e851bb0124358b900010111858d1bb900
010128858d5959001816763f183f123e113946443e113946443e11394644
3e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d
594bb09353205c58b901f201f04544b901f101f045445958b9033e01f245
5258b901f2033e4459594bb8015653205c58b9002001f14544b9002601f1
45445958b9081e0020455258b90020081e4459594bb8019a53205c58b900
2501f24544b9002401f245445958b909090025455258b900250909445959
4bb8040153205c58b173244544b1242445445958b917200073455258b900
7317204459594bb8040153205c58b1ca254544b1252545445958b9168000
ca455258b900ca16804459594bb03e53205c58b11c1c4544b11e1c454459
58b9011a001c455258b9001c011a4459594bb05653205c58b11c1c4544b1
2f1c45445958b90189001c455258b9001c01894459594bb8030153205c58
b11c1c4544b11c1c45445958b90de0001c455258b9001c0de04459592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c4565234560234565602345
60b08b766818b080622020b163594565234520b003266062636820b00326
6165b059236544b063234420b13b5c4565234520b003266062636820b003
266165b05c236544b03b2344b1005c455458b15c406544b23b403b452361
4459b347503437456523456023456560234560b089766818b080622020b1
34504565234520b003266062636820b003266165b050236544b034234420
b147374565234520b003266062636820b003266165b037236544b0472344
b10037455458b137406544b24740474523614459004b5342014b5058b108
004259435c58b108004259b3020b0a124358601b2159421610703eb01243
58b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d
412d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b21
1bba01a80400000b2b59b0102342b0112342002b74757375001845694445
69444569447373737374757374752b2b2b2b74752b2b2b2b2b7373737373
73737373737373737373737373737373737373732b2b2b45b04061447374
00004bb02a534bb03f515a58b1070745b040604459004bb03a534bb03f51
5a58b10b0b45b8ffc0604459004bb02e534bb03a515a58b1030345b04060
4459004bb02e534bb03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb30140
1e017400735903b01e4b5402b0124b545ab012435c5a58ba009f02220001
007359002b7473012b01732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b
2b2b2b2b2b00456944734569447345694473747545694473456944456944
4569447374456944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b
2b2b2b2b2b2b2b2b2b737475732b7374757374752b2b2b742b2b000000>
[12527 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> SDUAAA+ArialMT AddT42Char 
1 894 5 <0002009e0000055a05ba000f001d00e5402f201f0143081c1d1e02010211
101e0f000817262009011f400d0d0255092010100255090a0f0f02550918
0d0d025509b8fff440150c0c0655091a1f1d102001200001002010100255
00b8fff6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d1e3b5c182b10f62b2b2b2b2b
2b5d3cfd3c10f62b2b2b2b2b5ded003f3cfd3c3f3cfd3c31304379403603
1b0708060805080408040619181a1802060b0a0c0a0d0a03061516141613
1603061b03172101120e17210118081c2101160a1121002b2b012b2b2a2a
2a2a81015d3311213217161716121514020e022325213236373636353426
272623219e01f9ab5a7e5974734e7a91cd85feb1013991a531454d976c4e
adfecc05ba151d4c62fecfc4a7fefea96132ad363145e9a6e6f72a1e>SDUAAA+ArialMT AddT42Char 
1 2902 10 <00010030000004ba05ba00070089400d05021e04030200080706050409b8
0273b320040104b80101b7062001022f030103b80101b5010120000100b8
ffe8400b1010025500080f0f025500b8fff2b40c0c025500b8ffe2b40d0d
025500b8fffcb40c0c065500b8fffeb40d0d065500b80273b308b699182b
10f62b2b2b2b2b2b5d3c10f45d3c10fde45de6103c103c003f3f3cfd3c31
3021112135211521110213fe1d048afe1b050dadadfaf300>SDUAAA+ArialMT AddT42Char 
1 3448 12 <0002004affe8041c043e00280037022d402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe040550c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030e0c0f0f
02550eb8ffeab4101002550eb8fff44015101006550e0c0d0d06550e060f
0f06550e0e1c0317b802aab61895141c1c0700b8fff4401a0c0c06550045
270a321c030b2961106100060d0d025500252124b8ffecb41010025524b8
ffec400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b
065524b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b802
5b400e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b6
0e0e0255263139b8ffc0400d1e23343039c03902a039013917b8fff44041
10100655172518222f24bf06cf06021f063f0602060e0f0f0255060c0d0d
025506180c0c0255060c0b0b0255060c0b0b0655060e0d0d065506100c0c
065506313810f62b2b2b2b2b2b2b5d71edf4ed2b105d712bf62b2b5dedf4
2b2b2b2b2b2b2b2b3cfd2be5e5003fed3fe42b3fedfde41112392f2b2b2b
2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d2b
2b0071250606232226353436363736373637363534272623220607273e02
333216161716151514161723260306070e02151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>SDUAAA+ArialMT AddT42Char 
1 4170 13 <00010050ffe803ed043e001a015ab1020243545840340e7f0f010f0b0140
0050007000030004121c0b07181c040b010e1507080e0e0255070c0d0d02
55070c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10c45d
3210c45d3231301b4047090c011f1c4313431753135317601360179b029b
039a0da410a41a0c080d190a6a0269036a05750c700d800da60cb509b60a
b50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa407930004000
5000600070009000a000e000f00009000f0f0b000004121c0b07181c040b
1c0f010f240e080d0d06550e221b000100240b2b1f010100010101400b0b
065501401010065501480c0c0655011a0d0d065501491c1524cf07011f07
3f0702070e0b0b0655070a1010065507120c0c065507311b34c4182b10f6
2b2b2b5d71ed10f62b2b2b2b5d724b53234b515a58b90001ffc03859ed72
f42bed72003fed3fed12392f11392f105de4105de43130005d71015d7159
011706062322001134123633321617072626232206151416333236033cb1
1defaedafef772e989addc1faf197f5a88aaa4846a8e018517b7cf011d01
0aac010281afa11b6b6cc3d3d6c28200>SDUAAA+ArialMT AddT42Char 
1 4606 14 <00020046ffe803df05ba0011001d015540a40a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b1833010025110f2510
10d011011011401160118011041f400b0b02551f400d0d02551112101002
5511b8fff440110f0f025511060e0e025511180d0d025511b8fff2400b0b
0b0655110e1010065511b8ffeeb40c0c065511b8fff840420d0d06551174
1224bf07cf07df07ff07041f073f074f0703071e0b0b025507180c0c0255
071e0d0d0255070c0b0b0655070c0d0d0655071a0c0c065507191e345018
2b4e10f42b2b2b2b2b2b5d714dedfd2b2b2b2b2b2b2b2b2b2b5d713c10ed
10fd3ce4003fed3f3c3fed3f3c11391112393130005d01715d0071213506
232226263534123633321617113311011416333236353426232206033865
c47fd5756ad48360962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a
5141020efa460212cccac1c6daccc400>SDUAAA+ArialMT AddT42Char 
1 5042 15 <0002004bffe8041e043e0015001d015340171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc04010101006551001010195131c040b17400db8ffdcb40d0d02550d
b8ffeeb40d0d06550db8ffeab40c0c06550db8ffc04009272a34b00d010d
1a1fb8ffc0b32526341fb8ffc040411e2334301f011f163310240740242a
341f073f074f070307200b0b025507180c0c0255071c0d0d0255070e0b0b
0655071c0c0c065507160d0d065507191e3437182b4e10f42b2b2b2b2b2b
5d2b4dfde44e10712b2bf6712b2b2b2b4ded003fedfd5d2b2be43fed1239
2f5d3cfd713c011112393912393130015d005d2b2b2b0171720117060623
22001110003332001114072116163332360121262726232206035eba2cee
b9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897ca90156
17a3b4011f0103010c0128fedefef91020afba680195864368a6>SDUAAA+ArialMT AddT42Char 
1 5488 16 <00020042fe5103ea043e001e002a016f40600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d403205
1c1c0f0a45221c0c0a16153325330a251818d01701101740176017801704
2c400b0c02552c400d0d025517121010025517b8fff440110f0f02551706
0e0e025517160d0d025517b8ffea400b0b0b065517121010065517b8ffee
b40c0c065517b8fffc404a0d0d065517740f012500221f24bf0fcf0fdf0f
ff0f041f0f3f0f4f0f030f200b0b02550f1a0c0c02550f220d0d02550f1c
0b0b06550f0c0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b
2b2b2b2b2b5d714dedf4ed10fd2b2b2b2b2b2b2b2b2b2b5d713c10fde4f6
3c003fede43fedfd5de43fede43f3c3130015d71005d7117171617163332
363736270623220235341236333217353311140606232226131416333236
35342623220666af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0
beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd9801018c9880
fc6af8cf78ab032ad1c0bfccc3c6c300>SDUAAA+ArialMT AddT42Char 
1 6404 18 <000200880000013c05ba0003000700cd405e09360b0b02554f099009a009
b009c009df09f0090700091f09700980099f09b009c009df09e009ff090a
1f09010001070402030906037e0100060506040a0607250500049f04a004
b004c004e00406c004f0040200042004d004e0040404b8fff8b410100255
04b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8
ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e0847
50182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed0111123939
111239393130015d72712b133533150311331188b4b4b404ebcfcffb1504
26fbda00>SDUAAA+ArialMT AddT42Char 
1 7312 20 <000100830000013705ba000300e3b605360b0b025505b8ffc0b337383405
b8ffc0b334353405b8ffc0b330313405b8ffc0b322253405b8ffc0402515
17340f051f059f05df05044f05df05f005031f0570058005ff0504010000
0a0203250100b8ffc0b337383400b8ffc040153335349f0001c000f00002
00002000d000e0000400b8fff8b41010025500b8fffa401d0e0e02550004
0c0c0255000a0b0b025500140b0b065500081010065500b8fffeb40d0d06
5500b8ffffb40c0c065500b8fffc400a0c0c0655004e044750182b10f62b
2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130015d71722b2b2b2b2b
2b3311331183b405bafa4600>SDUAAA+ArialMT AddT42Char 
1 8124 22 <00010087000003e6043e0016017d40130503061302a810b810e303e713f0
03f6130604b8fff0403c0b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e2418401010025518400b0b02550b2810
1002550b140e0e02550bb8ffec40110d0d02550b040c0c02550b220b0b02
550bb8fff4400b0b0b06550b14101006550bb8fff9400b0d0d06550b0a0f
0f06550bb8fff640120c0c06550b40333634ff0b01ff0b010b4e18b8ffc0
401a343634b018f018027018a018b018c01804180302331516250100b8ff
f6b41111025500b8fffab41010025500b8fffa40170e0e025500040c0c02
55000a0b0b025500040b0b065500b8fffa40110f0f065500020c0c065500
040d0d065500b8ffc04012333634f0000100002000d000e00004004e1710
f65d712b2b2b2b2b2b2b2b2b2b3cfd3cf43c105d712bf65d712b2b2b2b2b
2b2b2b2b2b2b2b2bed3c103c003f3c3f3fed113901123931304379401606
11090a080a070a0306102611060e1b010f0a121b01002b012b2b2a81015d
71002b5d71331133153633321616171615112311342626232206151187a2
75dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e6d4192
ccfdbc00>SDUAAA+ArialMT AddT42Char 
1 8578 23 <00020044ffe80427043e000d0019016bb615180d0d065513b8ffe8b40d0d
06550fb8ffe840730d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14241b400d0d02551b400b0b
025507b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b
0b065507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c0655
07b8ffc04013242534300701000710072007030731df1b011bb8ffc04049
1e2334301b011b0e24000c0e0f025500120d0d0255000c0c0c0255001c0b
0b0255000e0b0b0655000e0d0d0655000c1010065500160c0c0655004024
25341f003f000200311a3437182b10f65d2b2b2b2b2b2b2b2b2bed10712b
5df65d5d2b2b2b2b2b2b2b2b2b2bed003fed3fed313001715d0071435c58
4009530553096205620904015d59002b2b2b2b1310373633320015140606
23220013141633323635342623220644a489c5db01167beb8bdffeedb9b2
8786b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca
>SDUAAA+ArialMT AddT42Char 
1 9028 24 <00020087fe690421043e0012001e0162408e0c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a0420400b
0b025520400d0d02550ab8ffe6400b0f0f02550a180d0d02550ab8fffab4
0c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f06550ab8ffe840230c0c
06550a74011333023312250000c001019001a001b001f001041f013f014f
010301b8fffc401d0e0e025501100d0d025501100c0c025501100b0b0255
010c0b0b065501b8fff6b41010065501b8fffc40160f0f0655010c0c0c06
5501120d0d065501191f473718012b4e10f42b2b2b2b2b2b2b2b2b5d7172
3c4d10fdf4e410fd2b2b2b2b2b2b2b2b5d71ed003f3fed3f3fed11391239
3130005d015d717200711311331536363332161615140206232226271103
141633323635342623220687a43a926888d06a75df7b5a8f2e11a67678ab
a77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbca
d700>SDUAAA+ArialMT AddT42Char 
1 9480 25 <00010085000002c6043e001100c9403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
900801082220130113022211250100b8ffc04010333634f0000100002000
d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c0255
00060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c06
5500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfde4
105df472e4003f3f3fed11393911393901111239390010c9870e7dc43130
005d72015d33113315363633321707262322060706151185a23e693f5b5e
3e42423b5e141e0426a171483aa727473f6072fdd400>SDUAAA+ArialMT AddT42Char 
1 9742 26 <0001003fffe803b1043e00300317407b042214223a094a09442456226522
7c098e098424a613ab2cc2030d09171a1817304b2cd617051b0255020210
32010a185c085c095c0a5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426
b4270f27262427242936245a0a590b64266428742374248024930a9c0c92
28972c9530a40aa90ca327a428b326c5261628b8fff4b40d0d065522b8ff
f4b40d0d065523b8fff4b40d0d065524b8fff4b40d0d065528b8fff4b40c
0c065522b8fff4b40c0c065523b8fff4b40c0c065524b8fff4b40c0c0655
1db8ffde40121e395a0827250c0a041a202615040b2e1d1ab802aa402219
2c0b0b02551f193f194f195f19af19cf19060f191f196f19df19041f198f
190219bd02550015000002aa0001ffc040140b0b025510014001021001d0
0102000110010201b8ffc0b314163401b8ffc040100e113401012e5c1d6c
1d021d1c150704b8fff4b40b0b025504b8ffe6b41010065504b8ffe64013
0f0f0655041c2e0b1f1a011a24194013183432b8ffc0402f0f0f02551918
0f0f025519180d0d025519160c0c025519201010065519200f0f06551910
0c0c065519160d0d065519b8025bb207242ab8ffc0b51c39d02a012ab8ff
e6b40c0c02552ab8ffe8b40f0f02552ab8ffe8b40c0c06552ab8ffeab60d
0d06552a1a32b8ffc04021272a346032c032023f32803202321001010124
00180d0d025500100d0d06550020b8fff4b40d0d025520b8fff4b4101006
5520b8fff440190f0f065520240f100b0b02550f160c0c02550f200d0d02
550fb8fffa40200f0f02550f0e0c0c06550f0c0d0d06550f22df00013f00
4f00020019313437182b4e10f45d714df42b2b2b2b2b2bed2b2b2b102b2b
ed724e105d712bf62b2b2b2b712b4dedf42b2b2b2b2b2b2b2b2bed72003f
ed2b2b2b3fed7112392f2b2b5d71722be410fd5d71722be4111239111239
0111121739313043794040272d1e2305142c261110121013100306220d20
1b000928071b01052d071b011e14201b00210e231b0022230d0c08290a1b
012827090a062b041b001f101d1b01002b2b103c103c2b103c103c2b012b
2b2b2b2a2b818181002b2b2b2b2b2b2b2b2b5d71015d72715d1337161633
323635342726272e02353436373636333216161707262623220615141716
1716171e02151406062322263fb20f897b7c78352593c6994f41382a9153
7dbd5a11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c6b726544
3d2318253249814e4779281f2b487b6718525c5237231c1d130a2433417c
5c5a9f57ac00>SDUAAA+ArialMT AddT42Char 
1 10678 27 <00010024fff2022a0599001700d8b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e0255
07b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8ff
f0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136
b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd3c10e4f43c003f
ed3f3cfd3c1139123911333310c93130015d2b2b25170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>SDUAAA+ArialMT AddT42Char 
1 10970 28 <00010083ffe803e004260018014fb9001affc0400915173402201316340f
b8fff040331214342b1301240813160c0113160b06000a111c030b003316
251817403336341a401010025517281010025517120e0e025517b8ffec40
0b0d0d025517040c0c025517b8fff4400b0b0b065517141010065517b8ff
f8400b0d0d0655170c0f0f065517b8fff6400d0c0c0655ff1701c0170117
4e1ab8ffc04015343634b01af01a02701aa01ab01aff1a041a0c2509b8ff
c04010333634f0090100092009d009e0090409b8fff8b41010025509b8ff
f840110e0e025509040c0c0255090a0b0b065509b8fff640160f0f065509
020c0c065509020d0d0655094e194750182b10f62b2b2b2b2b2b2b5d712b
ed105d712bf65d712b2b2b2b2b2b2b2b2b2b2b3cfde4003fed3f3f3c3939
0111123931304379401a04100e0d0f0d0206070806080508030610040c1b
000d08111b00002b012b2a2a81005d012b2b2b2135062322262627263511
3311141716163332363635113311033f7cd55ea34f100bb40b116e51518e
3bb49cb4486d4f35730292fdb38d314751538f880239fbda>SDUAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>SDUAAA+ArialMT AddT42Char 
SDUAAA+ArialMT /CharStrings get begin
/space 1 def
/D 5 def
/T 10 def
/a 12 def
/c 13 def
/d 14 def
/e 15 def
/g 16 def
/i 18 def
/l 20 def
/n 22 def
/o 23 def
/p 24 def
/r 25 def
/s 26 def
/t 27 def
/u 28 def
end
SDUAAA+ArialMT /Encoding get
dup 32 /space put
dup 68 /D put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
end
%ADOEndSubsetFont
/GLGSFD+ArialMT /SDUAAA+ArialMT findfont ct_VMDictPut/GLGSFD+ArialMT*1 [32{/.notdef}rp /space 35{/.notdef}rp /D 15{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]GLGSFD+ArialMT nfGLGSFD+ArialMT*1 [20 0 0 -20 0 0 ]msf90.6791 96.5015 mo(Decoupled )[14.444 11.124 10 11.124 11.124 11.124 4.444 11.124 11.124 0 ]xsh110.699 120.501 mo(Target  )[9.99985 11.124 6.65985 11.124 11.124 5.556 5.55598 0 ]xsh107.364 144.501 mo(Design )[14.444 11.124 10 4.444 11.124 11.124 0 ]xsh389.518 385.088 mo
34.0558 385.088 li
34.0558 316.478 li
389.518 316.478 li
389.518 385.088 li
.14902 .105882 0 0 cmyk
f
389.518 385.088 mo
34.0558 385.088 li
34.0558 316.478 li
389.518 316.478 li
cp
.156802 .755154 .645502 .0239872 cmyk
@
371 369.82 mo
353.351 369.82 li
353.351 325.065 li
371 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
1 lw
371 369.82 mo
353.351 369.82 li
353.351 325.064 li
371 325.064 li
cp
.750271 .679713 .654902 .901945 cmyk
@
371 325.065 mo
362.176 337.73 li
353.351 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
371 325.065 mo
362.176 337.73 li
353.351 325.065 li
cp
.750271 .679713 .654902 .901945 cmyk
@
321.472 369.82 mo
303.823 369.82 li
303.823 325.065 li
321.472 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
321.472 369.82 mo
303.822 369.82 li
303.822 325.064 li
321.472 325.064 li
cp
.750271 .679713 .654902 .901945 cmyk
@
321.472 325.065 mo
312.647 337.73 li
303.823 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
321.472 325.065 mo
312.647 337.73 li
303.822 325.065 li
cp
.750271 .679713 .654902 .901945 cmyk
@
271.944 369.82 mo
254.294 369.82 li
254.294 325.065 li
271.944 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
271.944 369.82 mo
254.294 369.82 li
254.294 325.064 li
271.944 325.064 li
cp
.750271 .679713 .654902 .901945 cmyk
@
271.944 325.065 mo
263.119 337.73 li
254.294 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
271.944 325.065 mo
263.119 337.73 li
254.294 325.065 li
cp
.750271 .679713 .654902 .901945 cmyk
@
222.415 369.82 mo
204.766 369.82 li
204.766 325.065 li
222.415 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
222.415 369.82 mo
204.766 369.82 li
204.766 325.064 li
222.415 325.064 li
cp
.750271 .679713 .654902 .901945 cmyk
@
222.415 325.065 mo
213.591 337.73 li
204.766 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
222.415 325.065 mo
213.591 337.73 li
204.766 325.065 li
cp
.750271 .679713 .654902 .901945 cmyk
@
172.887 369.82 mo
155.238 369.82 li
155.238 325.065 li
172.887 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
172.887 369.82 mo
155.237 369.82 li
155.237 325.064 li
172.887 325.064 li
cp
.750271 .679713 .654902 .901945 cmyk
@
172.887 325.065 mo
164.062 337.73 li
155.238 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
172.887 325.065 mo
164.062 337.73 li
155.237 325.065 li
cp
.750271 .679713 .654902 .901945 cmyk
@
123.359 369.82 mo
105.709 369.82 li
105.709 325.065 li
123.359 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
123.359 369.82 mo
105.709 369.82 li
105.709 325.064 li
123.359 325.064 li
cp
.750271 .679713 .654902 .901945 cmyk
@
123.359 325.065 mo
114.534 337.73 li
105.709 325.065 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
123.359 325.065 mo
114.534 337.73 li
105.709 325.065 li
cp
.750271 .679713 .654902 .901945 cmyk
@
321.472 347.442 mo
351.362 347.442 li
@
353.347 347.442 mo
345.866 343.078 li
345.389 342.8 344.777 342.961 344.499 343.438 cv
344.22 343.915 344.381 344.527 344.858 344.806 cv
349.378 347.442 li
344.858 350.078 li
344.381 350.356 344.22 350.969 344.499 351.446 cv
344.777 351.923 345.389 352.084 345.866 351.806 cv
cp
ef
271.944 347.748 mo
301.834 347.748 li
@
303.819 347.748 mo
296.338 343.384 li
295.861 343.106 295.249 343.267 294.97 343.744 cv
294.692 344.221 294.853 344.833 295.33 345.112 cv
299.849 347.748 li
295.33 350.384 li
294.853 350.662 294.692 351.275 294.97 351.752 cv
295.249 352.229 295.861 352.39 296.338 352.112 cv
cp
ef
222.415 347.823 mo
252.306 347.823 li
@
254.29 347.823 mo
246.81 343.459 li
246.333 343.181 245.72 343.342 245.442 343.819 cv
245.164 344.296 245.325 344.908 245.802 345.187 cv
250.321 347.823 li
245.802 350.459 li
245.325 350.737 245.164 351.35 245.442 351.827 cv
245.72 352.304 246.333 352.465 246.81 352.187 cv
cp
ef
172.887 347.973 mo
202.777 347.973 li
@
204.762 347.973 mo
197.281 343.609 li
196.804 343.331 196.192 343.492 195.914 343.969 cv
195.635 344.446 195.796 345.058 196.273 345.336 cv
200.793 347.973 li
196.273 350.609 li
195.796 350.887 195.635 351.499 195.914 351.976 cv
196.192 352.454 196.804 352.615 197.281 352.336 cv
cp
ef
123.359 347.973 mo
153.249 347.973 li
@
155.234 347.973 mo
147.753 343.609 li
147.276 343.331 146.663 343.492 146.385 343.969 cv
146.107 344.446 146.268 345.058 146.745 345.336 cv
151.264 347.973 li
146.745 350.609 li
146.268 350.887 146.107 351.499 146.385 351.976 cv
146.663 352.454 147.276 352.615 147.753 352.336 cv
cp
ef
389.518 274.913 mo
406.081 274.913 li
406.081 277.913 li
389.518 277.913 li
389.518 274.913 li
1 .927642 .0572518 .118349 cmyk
f
400.081 271.913 mo
409.081 276.413 li
400.081 280.913 li
400.081 271.913 li
ef
438.156 302.288 mo
427.037 302.288 li
427.037 250.538 li
438.156 250.538 li
441.364 250.538 443.966 253.139 443.966 256.347 cv
443.966 296.479 li
443.966 299.687 441.364 302.288 438.156 302.288 cv
.184314 .0352941 .2 .014902 cmyk
f
426.037 302.288 mo
414.919 302.288 li
411.71 302.288 409.109 299.687 409.109 296.479 cv
409.109 256.347 li
409.109 253.139 411.71 250.538 414.919 250.538 cv
426.037 250.538 li
426.037 302.288 li
.184314 .0352941 .2 .0156863 cmyk
f
427.037 302.288 mo
426.037 302.288 li
426.037 250.538 li
427.037 250.538 li
427.037 302.288 li
.784314 .576471 .72549 .737255 cmyk
f
409.109 256.347 mo
409.109 253.139 411.71 250.538 414.919 250.538 cv
438.156 250.538 li
441.365 250.538 443.966 253.139 443.966 256.347 cv
443.966 296.478 li
443.966 299.687 441.365 302.288 438.156 302.288 cv
414.919 302.288 li
411.71 302.288 409.109 299.687 409.109 296.478 cv
cp
.750271 .679713 .654902 .901945 cmyk
@
418.477 261.262 mo
418.477 261.686 418.564 262.039 418.737 262.321 cv
418.911 262.603 419.11 262.826 419.335 262.991 cv
419.561 263.155 419.78 263.272 419.992 263.342 cv
420.204 263.411 420.349 263.446 420.427 263.446 cv
420.427 259.182 li
420.159 259.182 419.907 259.236 419.673 259.344 cv
419.439 259.453 419.234 259.6 419.056 259.786 cv
418.878 259.972 418.737 260.193 418.633 260.449 cv
418.529 260.705 418.477 260.976 418.477 261.262 cv
cp
418.477 287.573 mo
418.477 287.937 418.542 288.267 418.672 288.561 cv
418.802 288.856 418.978 289.107 419.199 289.315 cv
419.42 289.523 419.68 289.682 419.979 289.79 cv
420.278 289.898 420.596 289.952 420.934 289.952 cv
421.272 289.952 421.591 289.898 421.89 289.79 cv
422.189 289.682 422.449 289.523 422.67 289.315 cv
422.891 289.107 423.066 288.856 423.196 288.561 cv
423.326 288.267 423.391 287.937 423.391 287.573 cv
423.391 287.209 423.326 286.88 423.196 286.585 cv
423.066 286.291 422.891 286.039 422.67 285.831 cv
422.449 285.623 422.189 285.465 421.89 285.357 cv
421.591 285.249 421.272 285.194 420.934 285.194 cv
420.596 285.194 420.278 285.249 419.979 285.357 cv
419.68 285.465 419.42 285.623 419.199 285.831 cv
418.978 286.039 418.802 286.291 418.672 286.585 cv
418.542 286.88 418.477 287.209 418.477 287.573 cv
cp
417.931 282.737 mo
417.931 281.958 li
421.467 281.958 li
421.71 281.958 421.946 281.936 422.176 281.893 cv
422.406 281.849 422.611 281.773 422.793 281.665 cv
422.975 281.557 423.121 281.405 423.229 281.21 cv
423.337 281.015 423.391 280.762 423.391 280.449 cv
423.391 280.164 423.342 279.893 423.242 279.637 cv
423.142 279.381 422.991 279.16 422.787 278.974 cv
422.583 278.788 422.328 278.64 422.02 278.532 cv
421.712 278.424 421.35 278.37 420.934 278.37 cv
417.931 278.37 li
417.931 277.589 li
422.247 277.589 li
422.36 277.589 422.497 277.585 422.657 277.577 cv
422.817 277.568 422.98 277.561 423.144 277.557 cv
423.309 277.553 423.463 277.546 423.606 277.538 cv
423.749 277.529 423.859 277.525 423.937 277.525 cv
423.937 278.305 li
423.712 278.313 423.495 278.32 423.287 278.324 cv
423.079 278.328 422.945 278.339 422.884 278.357 cv
422.884 278.396 li
423.214 278.552 423.498 278.811 423.736 279.176 cv
423.974 279.539 424.093 279.964 424.093 280.449 cv
424.093 280.917 424.02 281.301 423.872 281.6 cv
423.725 281.899 423.532 282.133 423.294 282.302 cv
423.056 282.471 422.78 282.586 422.468 282.646 cv
422.156 282.707 421.836 282.737 421.506 282.737 cv
cp
417.775 253.982 mo
417.795 253.754 li
417.84 253.527 li
418.607 253.618 li
418.573 253.722 418.555 253.821 418.555 253.917 cv
418.555 254.255 418.61 254.547 418.718 254.794 cv
418.826 255.041 418.976 255.245 419.166 255.405 cv
419.357 255.565 419.58 255.685 419.836 255.763 cv
420.092 255.841 420.367 255.88 420.661 255.88 cv
423.937 255.88 li
423.937 256.66 li
419.621 256.66 li
419.509 256.66 419.372 256.664 419.212 256.673 cv
419.052 256.681 418.889 256.688 418.724 256.692 cv
418.56 256.696 418.406 256.703 418.263 256.712 cv
418.12 256.72 418.009 256.725 417.931 256.725 cv
417.931 255.945 li
418.157 255.936 418.373 255.929 418.581 255.925 cv
418.789 255.921 418.924 255.91 418.984 255.893 cv
418.629 255.693 418.339 255.438 418.113 255.126 cv
417.888 254.814 417.775 254.432 417.775 253.982 cv
cp
417.775 261.223 mo
417.775 260.763 417.856 260.358 418.016 260.007 cv
418.176 259.656 418.389 259.362 418.653 259.123 cv
418.917 258.885 419.218 258.705 419.556 258.584 cv
419.894 258.462 420.237 258.402 420.583 258.402 cv
421.129 258.402 li
421.129 263.446 li
421.294 263.446 421.504 263.413 421.76 263.348 cv
422.016 263.283 422.265 263.164 422.507 262.991 cv
422.75 262.817 422.958 262.585 423.131 262.295 cv
423.305 262.005 423.391 261.63 423.391 261.171 cv
423.391 260.772 423.296 260.386 423.105 260.014 cv
422.915 259.641 422.655 259.355 422.325 259.156 cv
422.806 258.584 li
423.266 258.887 423.595 259.262 423.794 259.708 cv
423.994 260.154 424.093 260.646 424.093 261.184 cv
424.093 261.643 424.015 262.059 423.859 262.432 cv
423.703 262.804 423.485 263.125 423.203 263.394 cv
422.921 263.662 422.588 263.868 422.202 264.011 cv
421.816 264.154 421.389 264.226 420.921 264.226 cv
420.471 264.226 420.055 264.152 419.673 264.005 cv
419.292 263.857 418.961 263.649 418.679 263.381 cv
418.397 263.112 418.176 262.796 418.016 262.432 cv
417.856 262.068 417.775 261.665 417.775 261.223 cv
cp
417.775 272.585 mo
417.775 272.117 417.849 271.735 417.996 271.44 cv
418.144 271.146 418.337 270.914 418.575 270.745 cv
418.813 270.576 419.088 270.459 419.4 270.394 cv
419.712 270.329 420.033 270.297 420.362 270.297 cv
423.937 270.297 li
423.937 271.077 li
420.401 271.077 li
420.159 271.077 419.923 271.098 419.693 271.141 cv
419.463 271.185 419.257 271.261 419.075 271.369 cv
418.893 271.477 418.748 271.629 418.64 271.824 cv
418.532 272.019 418.477 272.273 418.477 272.585 cv
418.477 272.87 418.527 273.141 418.627 273.397 cv
418.727 273.653 418.878 273.874 419.082 274.06 cv
419.286 274.246 419.541 274.394 419.849 274.502 cv
420.157 274.61 420.518 274.664 420.934 274.664 cv
423.937 274.664 li
423.937 275.445 li
419.621 275.445 li
419.509 275.445 419.372 275.449 419.212 275.458 cv
419.052 275.466 418.889 275.473 418.724 275.477 cv
418.56 275.481 418.406 275.488 418.263 275.497 cv
418.12 275.505 418.009 275.51 417.931 275.51 cv
417.931 274.729 li
418.157 274.721 418.373 274.714 418.581 274.71 cv
418.789 274.706 418.924 274.695 418.984 274.677 cv
418.984 274.638 li
418.655 274.482 418.371 274.223 418.133 273.859 cv
417.895 273.495 417.775 273.07 417.775 272.585 cv
cp
417.775 287.573 mo
417.775 287.114 417.853 286.692 418.009 286.306 cv
418.165 285.92 418.384 285.587 418.666 285.305 cv
418.948 285.023 419.281 284.804 419.667 284.648 cv
420.053 284.492 420.475 284.414 420.934 284.414 cv
421.394 284.414 421.816 284.492 422.202 284.648 cv
422.588 284.804 422.921 285.023 423.203 285.305 cv
423.485 285.587 423.703 285.92 423.859 286.306 cv
424.015 286.692 424.093 287.114 424.093 287.573 cv
424.093 288.033 424.015 288.457 423.859 288.847 cv
423.703 289.237 423.485 289.571 423.203 289.848 cv
422.921 290.126 422.588 290.342 422.202 290.498 cv
421.816 290.654 421.394 290.732 420.934 290.732 cv
420.475 290.732 420.053 290.654 419.667 290.498 cv
419.281 290.342 418.948 290.126 418.666 289.848 cv
418.384 289.571 418.165 289.237 418.009 288.847 cv
417.853 288.457 417.775 288.033 417.775 287.573 cv
cp
416.202 267.775 mo
416.202 266.995 li
417.931 266.995 li
417.931 265.279 li
418.633 265.279 li
418.633 266.995 li
422.546 266.995 li
422.815 266.995 423.023 266.921 423.17 266.773 cv
423.318 266.626 423.391 266.422 423.391 266.163 cv
423.391 266.015 423.372 265.866 423.333 265.714 cv
423.294 265.562 423.244 265.417 423.183 265.279 cv
423.885 265.214 li
423.937 265.361 423.985 265.53 424.028 265.721 cv
424.072 265.911 424.093 266.08 424.093 266.227 cv
424.093 266.505 424.052 266.743 423.97 266.943 cv
423.888 267.142 423.777 267.302 423.638 267.423 cv
423.5 267.545 423.337 267.634 423.151 267.69 cv
422.965 267.746 422.763 267.775 422.546 267.775 cv
418.633 267.775 li
418.633 269.074 li
417.931 269.074 li
417.931 267.775 li
cp
414.499 295.165 mo
414.499 294.541 414.61 293.958 414.831 293.417 cv
415.052 292.875 415.422 292.401 415.942 291.993 cv
416.527 292.695 li
416.094 292.981 415.778 293.348 415.578 293.794 cv
415.379 294.24 415.279 294.697 415.279 295.165 cv
415.279 295.763 415.383 296.303 415.591 296.784 cv
415.799 297.265 416.085 297.674 416.449 298.012 cv
416.813 298.35 417.242 298.61 417.736 298.792 cv
418.23 298.974 418.763 299.065 419.335 299.065 cv
419.907 299.065 420.44 298.974 420.934 298.792 cv
421.428 298.61 421.857 298.35 422.221 298.012 cv
422.585 297.674 422.871 297.265 423.079 296.784 cv
423.287 296.303 423.391 295.763 423.391 295.165 cv
423.391 294.931 423.363 294.689 423.307 294.437 cv
423.251 294.186 423.164 293.941 423.047 293.703 cv
422.93 293.464 422.783 293.237 422.605 293.02 cv
422.427 292.804 422.213 292.613 421.961 292.448 cv
422.494 291.746 li
423.092 292.188 423.521 292.7 423.781 293.28 cv
424.041 293.861 424.171 294.489 424.171 295.165 cv
424.171 295.867 424.052 296.511 423.814 297.096 cv
423.576 297.681 423.242 298.181 422.813 298.597 cv
422.384 299.013 421.873 299.338 421.279 299.572 cv
420.685 299.806 420.037 299.923 419.335 299.923 cv
418.633 299.923 417.988 299.806 417.398 299.572 cv
416.809 299.338 416.3 299.013 415.871 298.597 cv
415.442 298.181 415.106 297.681 414.863 297.096 cv
414.621 296.511 414.499 295.867 414.499 295.165 cv
cp
f
418.477 261.262 mo
418.477 261.686 418.564 262.039 418.737 262.321 cv
418.911 262.603 419.11 262.826 419.335 262.991 cv
419.561 263.155 419.78 263.272 419.992 263.342 cv
420.204 263.411 420.349 263.446 420.427 263.446 cv
420.427 259.182 li
420.159 259.182 419.907 259.236 419.673 259.344 cv
419.439 259.452 419.234 259.6 419.056 259.786 cv
418.878 259.972 418.737 260.193 418.633 260.449 cv
418.529 260.705 418.477 260.976 418.477 261.262 cv
cp
418.477 287.573 mo
418.477 287.937 418.542 288.267 418.672 288.561 cv
418.802 288.856 418.978 289.107 419.199 289.315 cv
419.42 289.523 419.68 289.682 419.979 289.79 cv
420.278 289.898 420.596 289.952 420.934 289.952 cv
421.272 289.952 421.591 289.898 421.89 289.79 cv
422.189 289.682 422.449 289.523 422.67 289.315 cv
422.891 289.107 423.066 288.856 423.196 288.561 cv
423.326 288.267 423.391 287.937 423.391 287.573 cv
423.391 287.209 423.326 286.88 423.196 286.585 cv
423.066 286.291 422.891 286.039 422.67 285.831 cv
422.449 285.623 422.189 285.465 421.89 285.357 cv
421.591 285.249 421.272 285.194 420.934 285.194 cv
420.596 285.194 420.278 285.249 419.979 285.357 cv
419.68 285.465 419.42 285.623 419.199 285.831 cv
418.978 286.039 418.802 286.291 418.672 286.585 cv
418.542 286.88 418.477 287.209 418.477 287.573 cv
cp
417.931 282.738 mo
417.931 281.958 li
421.467 281.958 li
421.71 281.958 421.946 281.936 422.176 281.893 cv
422.406 281.849 422.611 281.773 422.793 281.665 cv
422.975 281.557 423.121 281.405 423.229 281.21 cv
423.337 281.015 423.391 280.762 423.391 280.45 cv
423.391 280.164 423.342 279.893 423.242 279.637 cv
423.142 279.381 422.991 279.16 422.787 278.974 cv
422.583 278.788 422.328 278.64 422.02 278.532 cv
421.712 278.424 421.35 278.37 420.934 278.37 cv
417.931 278.37 li
417.931 277.59 li
422.247 277.59 li
422.36 277.59 422.497 277.585 422.657 277.577 cv
422.817 277.568 422.98 277.561 423.144 277.557 cv
423.309 277.553 423.463 277.546 423.606 277.538 cv
423.749 277.529 423.859 277.525 423.937 277.525 cv
423.937 278.305 li
423.712 278.313 423.495 278.32 423.287 278.324 cv
423.079 278.328 422.945 278.339 422.884 278.357 cv
422.884 278.396 li
423.214 278.552 423.498 278.812 423.736 279.176 cv
423.974 279.54 424.093 279.964 424.093 280.45 cv
424.093 280.918 424.02 281.301 423.872 281.6 cv
423.725 281.899 423.532 282.133 423.294 282.302 cv
423.056 282.471 422.78 282.586 422.468 282.647 cv
422.156 282.707 421.836 282.738 421.506 282.738 cv
cp
417.775 253.982 mo
417.795 253.754 li
417.84 253.527 li
418.607 253.618 li
418.573 253.722 418.555 253.821 418.555 253.917 cv
418.555 254.255 418.61 254.547 418.718 254.794 cv
418.826 255.041 418.976 255.245 419.166 255.405 cv
419.357 255.565 419.58 255.685 419.836 255.763 cv
420.092 255.841 420.367 255.88 420.661 255.88 cv
423.937 255.88 li
423.937 256.66 li
419.621 256.66 li
419.509 256.66 419.372 256.664 419.212 256.673 cv
419.052 256.681 418.889 256.688 418.724 256.692 cv
418.56 256.696 418.406 256.703 418.263 256.712 cv
418.12 256.72 418.009 256.725 417.931 256.725 cv
417.931 255.945 li
418.157 255.936 418.373 255.929 418.581 255.925 cv
418.789 255.921 418.924 255.91 418.984 255.893 cv
418.629 255.693 418.339 255.438 418.113 255.126 cv
417.888 254.814 417.775 254.432 417.775 253.982 cv
cp
417.775 261.223 mo
417.775 260.763 417.856 260.358 418.016 260.007 cv
418.176 259.656 418.389 259.362 418.653 259.123 cv
418.917 258.885 419.218 258.705 419.556 258.584 cv
419.894 258.462 420.237 258.402 420.583 258.402 cv
421.129 258.402 li
421.129 263.446 li
421.294 263.446 421.504 263.413 421.76 263.348 cv
422.016 263.283 422.265 263.164 422.507 262.991 cv
422.75 262.817 422.958 262.585 423.131 262.295 cv
423.305 262.005 423.391 261.63 423.391 261.171 cv
423.391 260.772 423.296 260.386 423.105 260.014 cv
422.915 259.641 422.655 259.355 422.325 259.156 cv
422.806 258.584 li
423.266 258.887 423.595 259.262 423.794 259.708 cv
423.994 260.154 424.093 260.646 424.093 261.184 cv
424.093 261.643 424.015 262.059 423.859 262.432 cv
423.703 262.804 423.485 263.125 423.203 263.394 cv
422.921 263.662 422.588 263.868 422.202 264.011 cv
421.816 264.154 421.389 264.226 420.921 264.226 cv
420.471 264.226 420.055 264.152 419.673 264.005 cv
419.292 263.857 418.961 263.649 418.679 263.381 cv
418.397 263.112 418.176 262.796 418.016 262.432 cv
417.856 262.068 417.775 261.665 417.775 261.223 cv
cp
417.775 272.585 mo
417.775 272.117 417.849 271.735 417.996 271.441 cv
418.144 271.146 418.337 270.914 418.575 270.745 cv
418.813 270.576 419.088 270.459 419.4 270.394 cv
419.712 270.329 420.033 270.297 420.362 270.297 cv
423.937 270.297 li
423.937 271.077 li
420.401 271.077 li
420.159 271.077 419.923 271.098 419.693 271.142 cv
419.463 271.185 419.257 271.261 419.075 271.369 cv
418.893 271.477 418.748 271.629 418.64 271.824 cv
418.532 272.019 418.477 272.273 418.477 272.585 cv
418.477 272.871 418.527 273.141 418.627 273.397 cv
418.727 273.653 418.878 273.874 419.082 274.06 cv
419.286 274.246 419.541 274.394 419.849 274.502 cv
420.157 274.61 420.518 274.665 420.934 274.665 cv
423.937 274.665 li
423.937 275.445 li
419.621 275.445 li
419.509 275.445 419.372 275.449 419.212 275.458 cv
419.052 275.466 418.889 275.473 418.724 275.477 cv
418.56 275.481 418.406 275.488 418.263 275.497 cv
418.12 275.505 418.009 275.51 417.931 275.51 cv
417.931 274.73 li
418.157 274.721 418.373 274.714 418.581 274.71 cv
418.789 274.706 418.924 274.695 418.984 274.678 cv
418.984 274.639 li
418.655 274.483 418.371 274.223 418.133 273.859 cv
417.895 273.495 417.775 273.07 417.775 272.585 cv
cp
417.775 287.573 mo
417.775 287.114 417.853 286.692 418.009 286.306 cv
418.165 285.92 418.384 285.587 418.666 285.305 cv
418.948 285.023 419.281 284.804 419.667 284.648 cv
420.053 284.492 420.475 284.414 420.934 284.414 cv
421.394 284.414 421.816 284.492 422.202 284.648 cv
422.588 284.804 422.921 285.023 423.203 285.305 cv
423.485 285.587 423.703 285.92 423.859 286.306 cv
424.015 286.692 424.093 287.114 424.093 287.573 cv
424.093 288.033 424.015 288.457 423.859 288.847 cv
423.703 289.237 423.485 289.571 423.203 289.848 cv
422.921 290.126 422.588 290.342 422.202 290.498 cv
421.816 290.654 421.394 290.732 420.934 290.732 cv
420.475 290.732 420.053 290.654 419.667 290.498 cv
419.281 290.342 418.948 290.126 418.666 289.848 cv
418.384 289.571 418.165 289.237 418.009 288.847 cv
417.853 288.457 417.775 288.033 417.775 287.573 cv
cp
416.202 267.775 mo
416.202 266.995 li
417.931 266.995 li
417.931 265.279 li
418.633 265.279 li
418.633 266.995 li
422.546 266.995 li
422.815 266.995 423.023 266.921 423.17 266.774 cv
423.318 266.626 423.391 266.423 423.391 266.163 cv
423.391 266.015 423.372 265.866 423.333 265.714 cv
423.294 265.562 423.244 265.417 423.183 265.279 cv
423.885 265.214 li
423.937 265.361 423.985 265.53 424.028 265.721 cv
424.072 265.911 424.093 266.08 424.093 266.228 cv
424.093 266.505 424.052 266.743 423.97 266.943 cv
423.888 267.142 423.777 267.302 423.638 267.424 cv
423.5 267.545 423.337 267.634 423.151 267.69 cv
422.965 267.746 422.763 267.775 422.546 267.775 cv
418.633 267.775 li
418.633 269.075 li
417.931 269.075 li
417.931 267.775 li
cp
414.499 295.165 mo
414.499 294.541 414.61 293.959 414.831 293.417 cv
415.052 292.875 415.422 292.401 415.942 291.993 cv
416.527 292.695 li
416.094 292.981 415.778 293.348 415.578 293.794 cv
415.379 294.24 415.279 294.697 415.279 295.165 cv
415.279 295.763 415.383 296.303 415.591 296.784 cv
415.799 297.265 416.085 297.674 416.449 298.012 cv
416.813 298.35 417.242 298.61 417.736 298.792 cv
418.23 298.974 418.763 299.065 419.335 299.065 cv
419.907 299.065 420.44 298.974 420.934 298.792 cv
421.428 298.61 421.857 298.35 422.221 298.012 cv
422.585 297.674 422.871 297.265 423.079 296.784 cv
423.287 296.303 423.391 295.763 423.391 295.165 cv
423.391 294.931 423.363 294.689 423.307 294.437 cv
423.251 294.186 423.164 293.941 423.047 293.703 cv
422.93 293.465 422.783 293.237 422.605 293.02 cv
422.427 292.804 422.213 292.613 421.961 292.448 cv
422.494 291.746 li
423.092 292.188 423.521 292.7 423.781 293.28 cv
424.041 293.861 424.171 294.489 424.171 295.165 cv
424.171 295.867 424.052 296.511 423.814 297.096 cv
423.576 297.681 423.242 298.181 422.813 298.597 cv
422.384 299.013 421.873 299.338 421.279 299.572 cv
420.685 299.806 420.037 299.923 419.335 299.923 cv
418.633 299.923 417.988 299.806 417.398 299.572 cv
416.809 299.338 416.3 299.013 415.871 298.597 cv
415.442 298.181 415.106 297.681 414.863 297.096 cv
414.621 296.511 414.499 295.867 414.499 295.165 cv
cp
@
432.931 275.769 mo
432.931 274.989 li
436.467 274.989 li
436.71 274.989 436.946 274.968 437.176 274.924 cv
437.406 274.881 437.611 274.805 437.793 274.697 cv
437.975 274.589 438.121 274.437 438.229 274.242 cv
438.337 274.047 438.391 273.793 438.391 273.481 cv
438.391 273.195 438.342 272.924 438.242 272.669 cv
438.142 272.413 437.991 272.192 437.787 272.006 cv
437.583 271.82 437.328 271.672 437.02 271.564 cv
436.712 271.456 436.35 271.401 435.934 271.401 cv
432.931 271.401 li
432.931 270.621 li
437.247 270.621 li
437.36 270.621 437.497 270.617 437.657 270.608 cv
437.817 270.6 437.98 270.593 438.144 270.589 cv
438.309 270.585 438.463 270.578 438.606 270.569 cv
438.749 270.561 438.859 270.556 438.937 270.556 cv
438.937 271.336 li
438.712 271.345 438.495 271.352 438.287 271.356 cv
438.079 271.36 437.945 271.371 437.884 271.388 cv
437.884 271.427 li
438.214 271.583 438.498 271.843 438.736 272.207 cv
438.974 272.571 439.093 272.996 439.093 273.481 cv
439.093 273.949 439.02 274.333 438.872 274.632 cv
438.725 274.931 438.532 275.165 438.294 275.334 cv
438.056 275.503 437.78 275.618 437.468 275.678 cv
437.156 275.739 436.836 275.769 436.506 275.769 cv
cp
431.202 268.034 mo
431.202 267.254 li
432.931 267.254 li
432.931 265.538 li
433.633 265.538 li
433.633 267.254 li
437.546 267.254 li
437.815 267.254 438.023 267.181 438.17 267.033 cv
438.318 266.886 438.391 266.682 438.391 266.422 cv
438.391 266.275 438.372 266.125 438.333 265.974 cv
438.294 265.822 438.244 265.677 438.183 265.538 cv
438.885 265.473 li
438.937 265.621 438.985 265.79 439.028 265.98 cv
439.072 266.171 439.093 266.34 439.093 266.487 cv
439.093 266.765 439.052 267.003 438.97 267.202 cv
438.888 267.402 438.777 267.562 438.638 267.683 cv
438.5 267.805 438.337 267.893 438.151 267.95 cv
437.965 268.006 437.763 268.034 437.546 268.034 cv
433.633 268.034 li
433.633 269.334 li
432.931 269.334 li
432.931 268.034 li
cp
430.279 282.165 mo
430.279 282.763 430.383 283.303 430.591 283.784 cv
430.799 284.265 431.085 284.674 431.449 285.012 cv
431.813 285.35 432.242 285.61 432.736 285.792 cv
433.23 285.974 433.763 286.065 434.335 286.065 cv
434.907 286.065 435.44 285.974 435.934 285.792 cv
436.428 285.61 436.857 285.35 437.221 285.012 cv
437.585 284.674 437.871 284.265 438.079 283.784 cv
438.287 283.303 438.391 282.763 438.391 282.165 cv
438.391 281.567 438.287 281.028 438.079 280.547 cv
437.871 280.066 437.585 279.656 437.221 279.318 cv
436.857 278.98 436.428 278.72 435.934 278.538 cv
435.44 278.356 434.907 278.265 434.335 278.265 cv
433.763 278.265 433.23 278.356 432.736 278.538 cv
432.242 278.72 431.813 278.98 431.449 279.318 cv
431.085 279.656 430.799 280.066 430.591 280.547 cv
430.383 281.028 430.279 281.567 430.279 282.165 cv
cp
429.499 282.165 mo
429.499 281.463 429.621 280.82 429.863 280.235 cv
430.106 279.65 430.442 279.149 430.871 278.733 cv
431.3 278.317 431.809 277.992 432.398 277.758 cv
432.988 277.524 433.633 277.407 434.335 277.407 cv
435.037 277.407 435.685 277.524 436.279 277.758 cv
436.873 277.992 437.384 278.317 437.813 278.733 cv
438.242 279.149 438.576 279.65 438.814 280.235 cv
439.052 280.82 439.171 281.463 439.171 282.165 cv
439.171 282.867 439.052 283.511 438.814 284.096 cv
438.576 284.681 438.242 285.181 437.813 285.597 cv
437.384 286.013 436.873 286.338 436.279 286.572 cv
435.685 286.806 435.037 286.923 434.335 286.923 cv
433.633 286.923 432.988 286.806 432.398 286.572 cv
431.809 286.338 431.3 286.013 430.871 285.597 cv
430.442 285.181 430.106 284.681 429.863 284.096 cv
429.621 283.511 429.499 282.867 429.499 282.165 cv
cp
f
432.931 275.769 mo
432.931 274.989 li
436.467 274.989 li
436.71 274.989 436.946 274.968 437.176 274.924 cv
437.406 274.881 437.611 274.805 437.793 274.697 cv
437.975 274.589 438.121 274.437 438.229 274.242 cv
438.337 274.047 438.391 273.793 438.391 273.481 cv
438.391 273.195 438.342 272.925 438.242 272.669 cv
438.142 272.413 437.991 272.192 437.787 272.006 cv
437.583 271.82 437.328 271.672 437.02 271.564 cv
436.712 271.456 436.35 271.401 435.934 271.401 cv
432.931 271.401 li
432.931 270.621 li
437.247 270.621 li
437.36 270.621 437.497 270.617 437.657 270.608 cv
437.817 270.6 437.98 270.593 438.144 270.589 cv
438.309 270.585 438.463 270.578 438.606 270.569 cv
438.749 270.561 438.859 270.556 438.937 270.556 cv
438.937 271.336 li
438.712 271.345 438.495 271.352 438.287 271.356 cv
438.079 271.36 437.945 271.371 437.884 271.388 cv
437.884 271.427 li
438.214 271.583 438.498 271.843 438.736 272.207 cv
438.974 272.571 439.093 272.996 439.093 273.481 cv
439.093 273.949 439.02 274.333 438.872 274.632 cv
438.725 274.931 438.532 275.165 438.294 275.334 cv
438.056 275.503 437.78 275.618 437.468 275.678 cv
437.156 275.739 436.836 275.769 436.506 275.769 cv
cp
431.202 268.034 mo
431.202 267.254 li
432.931 267.254 li
432.931 265.538 li
433.633 265.538 li
433.633 267.254 li
437.546 267.254 li
437.815 267.254 438.023 267.181 438.17 267.033 cv
438.318 266.886 438.391 266.682 438.391 266.422 cv
438.391 266.275 438.372 266.126 438.333 265.974 cv
438.294 265.822 438.244 265.677 438.183 265.538 cv
438.885 265.473 li
438.937 265.621 438.985 265.79 439.028 265.98 cv
439.072 266.171 439.093 266.34 439.093 266.487 cv
439.093 266.765 439.052 267.003 438.97 267.202 cv
438.888 267.402 438.777 267.562 438.638 267.683 cv
438.5 267.805 438.337 267.894 438.151 267.95 cv
437.965 268.006 437.763 268.034 437.546 268.034 cv
433.633 268.034 li
433.633 269.334 li
432.931 269.334 li
432.931 268.034 li
cp
430.279 282.165 mo
430.279 282.763 430.383 283.303 430.591 283.784 cv
430.799 284.265 431.085 284.674 431.449 285.012 cv
431.813 285.35 432.242 285.61 432.736 285.792 cv
433.23 285.974 433.763 286.065 434.335 286.065 cv
434.907 286.065 435.44 285.974 435.934 285.792 cv
436.428 285.61 436.857 285.35 437.221 285.012 cv
437.585 284.674 437.871 284.265 438.079 283.784 cv
438.287 283.303 438.391 282.763 438.391 282.165 cv
438.391 281.567 438.287 281.028 438.079 280.547 cv
437.871 280.066 437.585 279.656 437.221 279.318 cv
436.857 278.98 436.428 278.72 435.934 278.538 cv
435.44 278.356 434.907 278.265 434.335 278.265 cv
433.763 278.265 433.23 278.356 432.736 278.538 cv
432.242 278.72 431.813 278.98 431.449 279.318 cv
431.085 279.656 430.799 280.066 430.591 280.547 cv
430.383 281.028 430.279 281.567 430.279 282.165 cv
cp
429.499 282.165 mo
429.499 281.463 429.621 280.82 429.863 280.235 cv
430.106 279.65 430.442 279.149 430.871 278.733 cv
431.3 278.317 431.809 277.992 432.398 277.758 cv
432.988 277.524 433.633 277.407 434.335 277.407 cv
435.037 277.407 435.685 277.524 436.279 277.758 cv
436.873 277.992 437.384 278.317 437.813 278.733 cv
438.242 279.149 438.576 279.65 438.814 280.235 cv
439.052 280.82 439.171 281.463 439.171 282.165 cv
439.171 282.867 439.052 283.511 438.814 284.096 cv
438.576 284.681 438.242 285.181 437.813 285.597 cv
437.384 286.013 436.873 286.338 436.279 286.572 cv
435.685 286.806 435.037 286.923 434.335 286.923 cv
433.633 286.923 432.988 286.806 432.398 286.572 cv
431.809 286.338 431.3 286.013 430.871 285.597 cv
430.442 285.181 430.106 284.681 429.863 284.096 cv
429.621 283.511 429.499 282.867 429.499 282.165 cv
cp
@
389.518 306.823 mo
34.0557 306.823 li
34.0557 231.941 li
389.518 231.941 li
389.518 274.913 li
389.518 274.913 li
389.518 277.913 li
389.518 306.823 li
.14902 .105882 0 0 cmyk
f
389.518 277.913 mo
389.518 277.913 li
389.518 274.913 li
389.518 277.913 li
.94902 .85098 .0470588 .0941176 cmyk
f
2 lw
389.518 306.823 mo
34.0557 306.823 li
34.0557 231.941 li
389.518 231.941 li
cp
.156802 .755154 .645502 .0239872 cmyk
@
371.012 290.159 mo
353.373 290.159 li
353.373 241.312 li
371.012 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
1 lw
371.012 290.159 mo
353.373 290.159 li
353.373 241.312 li
371.012 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
371.012 241.312 mo
362.192 255.136 li
353.373 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
371.012 241.312 mo
362.192 255.136 li
353.373 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
321.514 290.159 mo
303.875 290.159 li
303.875 241.312 li
321.514 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
321.514 290.159 mo
303.875 290.159 li
303.875 241.312 li
321.514 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
321.514 241.312 mo
312.694 255.136 li
303.875 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
321.514 241.312 mo
312.694 255.136 li
303.875 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
272.016 290.159 mo
254.377 290.159 li
254.377 241.312 li
272.016 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
272.016 290.159 mo
254.377 290.159 li
254.377 241.312 li
272.016 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
272.016 241.312 mo
263.196 255.136 li
254.377 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
272.016 241.312 mo
263.196 255.136 li
254.377 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
222.518 290.159 mo
204.879 290.159 li
204.879 241.312 li
222.518 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
222.518 290.159 mo
204.879 290.159 li
204.879 241.312 li
222.518 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
222.518 241.312 mo
213.698 255.136 li
204.879 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
222.518 241.312 mo
213.698 255.136 li
204.879 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
173.02 290.159 mo
155.381 290.159 li
155.381 241.312 li
173.02 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
173.02 290.159 mo
155.381 290.159 li
155.381 241.312 li
173.02 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
173.02 241.312 mo
164.2 255.136 li
155.381 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
173.02 241.312 mo
164.2 255.136 li
155.381 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
123.521 290.159 mo
105.883 290.159 li
105.883 241.312 li
123.521 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
123.521 290.159 mo
105.883 290.159 li
105.883 241.312 li
123.521 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
123.521 241.312 mo
114.702 255.136 li
105.883 241.312 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
123.521 241.312 mo
114.702 255.136 li
105.883 241.312 li
cp
.750271 .679713 .654902 .901945 cmyk
@
321.514 265.736 mo
351.404 265.736 li
@
353.389 265.736 mo
345.908 261.372 li
345.431 261.094 344.819 261.255 344.54 261.732 cv
344.262 262.209 344.423 262.821 344.9 263.099 cv
349.419 265.736 li
344.9 268.372 li
344.423 268.65 344.262 269.263 344.54 269.74 cv
344.819 270.217 345.431 270.378 345.908 270.099 cv
cp
ef
272.016 266.069 mo
301.906 266.069 li
@
303.891 266.069 mo
296.41 261.706 li
295.933 261.427 295.32 261.588 295.042 262.065 cv
294.764 262.542 294.925 263.155 295.402 263.433 cv
299.921 266.069 li
295.402 268.706 li
294.925 268.984 294.764 269.596 295.042 270.073 cv
295.32 270.55 295.933 270.711 296.41 270.433 cv
cp
ef
222.518 266.151 mo
252.408 266.151 li
@
254.393 266.151 mo
246.912 261.787 li
246.435 261.509 245.822 261.67 245.544 262.147 cv
245.266 262.624 245.427 263.237 245.904 263.515 cv
250.423 266.151 li
245.904 268.787 li
245.427 269.066 245.266 269.678 245.544 270.155 cv
245.822 270.632 246.435 270.793 246.912 270.515 cv
cp
ef
173.02 266.315 mo
202.91 266.315 li
@
204.895 266.315 mo
197.414 261.951 li
196.937 261.673 196.324 261.834 196.046 262.311 cv
195.768 262.788 195.929 263.4 196.406 263.678 cv
200.925 266.315 li
196.406 268.951 li
195.929 269.229 195.768 269.842 196.046 270.319 cv
196.324 270.796 196.937 270.957 197.414 270.678 cv
cp
ef
123.521 266.315 mo
153.412 266.315 li
@
155.396 266.315 mo
147.916 261.951 li
147.439 261.673 146.826 261.834 146.548 262.311 cv
146.27 262.788 146.431 263.4 146.908 263.678 cv
151.427 266.315 li
146.908 268.951 li
146.431 269.229 146.27 269.842 146.548 270.319 cv
146.826 270.796 147.439 270.957 147.916 270.678 cv
cp
ef
438.156 367.506 mo
427.037 367.506 li
427.037 309.815 li
438.156 309.815 li
441.364 309.815 443.966 312.416 443.966 315.624 cv
443.966 361.697 li
443.966 364.905 441.364 367.506 438.156 367.506 cv
.184314 .0352941 .2 .014902 cmyk
f
426.037 367.506 mo
414.919 367.506 li
411.71 367.506 409.109 364.905 409.109 361.697 cv
409.109 315.624 li
409.109 312.416 411.71 309.815 414.919 309.815 cv
426.037 309.815 li
426.037 367.506 li
.184314 .0352941 .2 .0156863 cmyk
f
427.037 367.506 mo
426.037 367.506 li
426.037 309.815 li
427.037 309.815 li
427.037 367.506 li
.784314 .576471 .72549 .737255 cmyk
f
409.109 315.624 mo
409.109 312.416 411.71 309.815 414.919 309.815 cv
438.156 309.815 li
441.364 309.815 443.965 312.416 443.965 315.624 cv
443.965 361.697 li
443.965 364.905 441.364 367.506 438.156 367.506 cv
414.919 367.506 li
411.71 367.506 409.109 364.905 409.109 361.697 cv
cp
.750271 .679713 .654902 .901945 cmyk
@
420.921 347.202 mo
420.921 347.531 420.943 347.85 420.986 348.157 cv
421.03 348.465 421.103 348.742 421.207 348.989 cv
421.311 349.236 421.45 349.433 421.623 349.581 cv
421.797 349.728 422.013 349.802 422.273 349.802 cv
422.455 349.802 422.618 349.761 422.761 349.678 cv
422.904 349.596 423.021 349.49 423.112 349.36 cv
423.203 349.23 423.272 349.085 423.32 348.924 cv
423.367 348.764 423.391 348.601 423.391 348.437 cv
423.391 348.021 423.331 347.678 423.209 347.41 cv
423.088 347.141 422.93 346.927 422.735 346.766 cv
422.54 346.606 422.319 346.495 422.072 346.435 cv
421.825 346.374 421.576 346.344 421.324 346.344 cv
420.921 346.344 li
cp
418.477 320.032 mo
418.477 320.396 418.542 320.725 418.672 321.02 cv
418.802 321.315 418.978 321.566 419.199 321.774 cv
419.42 321.982 419.68 322.14 419.979 322.248 cv
420.278 322.357 420.596 322.411 420.934 322.411 cv
421.272 322.411 421.591 322.357 421.89 322.248 cv
422.189 322.14 422.449 321.982 422.67 321.774 cv
422.891 321.566 423.066 321.315 423.196 321.02 cv
423.326 320.725 423.391 320.396 423.391 320.032 cv
423.391 319.668 423.326 319.339 423.196 319.044 cv
423.066 318.749 422.891 318.498 422.67 318.29 cv
422.449 318.082 422.189 317.924 421.89 317.815 cv
421.591 317.707 421.272 317.653 420.934 317.653 cv
420.596 317.653 420.278 317.707 419.979 317.815 cv
419.68 317.924 419.42 318.082 419.199 318.29 cv
418.978 318.498 418.802 318.749 418.672 319.044 cv
418.542 319.339 418.477 319.668 418.477 320.032 cv
cp
418.477 340.52 mo
418.477 340.875 418.542 341.204 418.672 341.508 cv
418.802 341.811 418.978 342.075 419.199 342.301 cv
419.42 342.526 419.68 342.704 419.979 342.834 cv
420.278 342.964 420.596 343.029 420.934 343.029 cv
421.272 343.029 421.591 342.964 421.89 342.834 cv
422.189 342.704 422.449 342.526 422.67 342.301 cv
422.891 342.075 423.066 341.811 423.196 341.508 cv
423.326 341.204 423.391 340.875 423.391 340.52 cv
423.391 340.156 423.326 339.826 423.196 339.532 cv
423.066 339.237 422.891 338.986 422.67 338.778 cv
422.449 338.57 422.189 338.412 421.89 338.303 cv
421.591 338.195 421.272 338.141 420.934 338.141 cv
420.596 338.141 420.278 338.195 419.979 338.303 cv
419.68 338.412 419.42 338.57 419.199 338.778 cv
418.978 338.986 418.802 339.237 418.672 339.532 cv
418.542 339.826 418.477 340.156 418.477 340.52 cv
cp
417.775 320.032 mo
417.775 319.573 417.853 319.15 418.009 318.764 cv
418.165 318.379 418.384 318.045 418.666 317.763 cv
418.948 317.482 419.281 317.263 419.667 317.107 cv
420.052 316.951 420.475 316.873 420.934 316.873 cv
421.394 316.873 421.816 316.951 422.202 317.107 cv
422.587 317.263 422.921 317.482 423.203 317.763 cv
423.484 318.045 423.703 318.379 423.859 318.764 cv
424.015 319.15 424.093 319.573 424.093 320.032 cv
424.093 320.491 424.015 320.916 423.859 321.306 cv
423.703 321.696 423.484 322.03 423.203 322.307 cv
422.921 322.584 422.587 322.801 422.202 322.957 cv
421.816 323.113 421.394 323.191 420.934 323.191 cv
420.475 323.191 420.052 323.113 419.667 322.957 cv
419.281 322.801 418.948 322.584 418.666 322.307 cv
418.384 322.03 418.165 321.696 418.009 321.306 cv
417.853 320.916 417.775 320.491 417.775 320.032 cv
cp
417.775 333.994 mo
417.775 333.5 417.866 333.073 418.048 332.713 cv
418.23 332.354 418.516 332.074 418.906 331.875 cv
419.322 332.577 li
419.045 332.724 418.835 332.908 418.692 333.129 cv
418.549 333.35 418.477 333.639 418.477 333.994 cv
418.477 334.133 418.499 334.278 418.542 334.429 cv
418.586 334.581 418.646 334.718 418.724 334.839 cv
418.802 334.96 418.902 335.062 419.023 335.144 cv
419.145 335.227 419.283 335.268 419.439 335.268 cv
419.708 335.268 419.907 335.179 420.037 335.001 cv
420.167 334.824 420.269 334.605 420.343 334.345 cv
420.417 334.085 420.479 333.799 420.531 333.487 cv
420.583 333.175 420.668 332.889 420.785 332.629 cv
420.902 332.369 421.071 332.15 421.292 331.972 cv
421.513 331.795 421.827 331.706 422.234 331.706 cv
422.546 331.706 422.817 331.764 423.047 331.881 cv
423.276 331.998 423.469 332.159 423.625 332.362 cv
423.781 332.566 423.898 332.798 423.976 333.058 cv
424.054 333.318 424.093 333.591 424.093 333.877 cv
424.093 334.397 423.994 334.871 423.794 335.3 cv
423.595 335.729 423.287 336.061 422.871 336.295 cv
422.403 335.606 li
422.724 335.441 422.969 335.199 423.138 334.878 cv
423.307 334.557 423.391 334.219 423.391 333.864 cv
423.391 333.699 423.365 333.535 423.313 333.37 cv
423.261 333.205 423.188 333.058 423.092 332.928 cv
422.997 332.798 422.882 332.692 422.748 332.609 cv
422.613 332.527 422.46 332.486 422.286 332.486 cv
422.009 332.486 421.801 332.575 421.662 332.752 cv
421.524 332.93 421.415 333.149 421.337 333.409 cv
421.259 333.669 421.192 333.955 421.136 334.267 cv
421.079 334.579 420.993 334.865 420.876 335.125 cv
420.759 335.385 420.596 335.604 420.388 335.781 cv
420.18 335.959 419.886 336.048 419.504 336.048 cv
419.21 336.048 418.954 335.987 418.737 335.866 cv
418.521 335.745 418.341 335.586 418.198 335.391 cv
418.055 335.196 417.949 334.978 417.879 334.735 cv
417.81 334.492 417.775 334.245 417.775 333.994 cv
cp
417.775 340.52 mo
417.775 340.06 417.853 339.638 418.009 339.252 cv
418.165 338.867 418.384 338.533 418.666 338.251 cv
418.948 337.97 419.281 337.751 419.667 337.595 cv
420.052 337.439 420.475 337.361 420.934 337.361 cv
421.394 337.361 421.816 337.439 422.202 337.595 cv
422.587 337.751 422.921 337.97 423.203 338.251 cv
423.484 338.533 423.703 338.867 423.859 339.252 cv
424.015 339.638 424.093 340.06 424.093 340.52 cv
424.093 340.745 424.069 340.975 424.022 341.209 cv
423.974 341.443 423.901 341.666 423.801 341.878 cv
423.701 342.091 423.576 342.288 423.424 342.47 cv
423.272 342.652 423.092 342.803 422.884 342.925 cv
422.884 342.951 li
426.901 342.951 li
426.901 343.731 li
417.931 343.731 li
417.931 342.951 li
418.984 342.951 li
418.984 342.925 li
418.776 342.803 418.596 342.652 418.445 342.47 cv
418.293 342.288 418.168 342.091 418.068 341.878 cv
417.968 341.666 417.895 341.443 417.847 341.209 cv
417.799 340.975 417.775 340.745 417.775 340.52 cv
cp
417.775 348.034 mo
417.775 347.306 417.947 346.725 418.289 346.292 cv
418.631 345.858 419.184 345.642 419.946 345.642 cv
421.415 345.642 li
421.71 345.642 421.974 345.64 422.208 345.635 cv
422.442 345.631 422.659 345.624 422.858 345.616 cv
423.058 345.607 423.244 345.596 423.417 345.583 cv
423.591 345.57 423.764 345.551 423.937 345.525 cv
423.937 346.253 li
423.643 346.305 423.318 346.331 422.962 346.331 cv
422.962 346.357 li
423.352 346.582 423.638 346.862 423.82 347.195 cv
424.002 347.529 424.093 347.951 424.093 348.463 cv
424.093 348.723 424.061 348.978 423.996 349.23 cv
423.931 349.481 423.827 349.706 423.684 349.906 cv
423.541 350.105 423.357 350.268 423.131 350.393 cv
422.906 350.519 422.633 350.582 422.312 350.582 cv
421.853 350.582 421.489 350.465 421.22 350.231 cv
420.952 349.997 420.75 349.709 420.616 349.366 cv
420.482 349.024 420.395 348.66 420.356 348.274 cv
420.317 347.889 420.297 347.548 420.297 347.254 cv
420.297 346.344 li
419.933 346.344 li
419.413 346.344 419.041 346.504 418.815 346.825 cv
418.59 347.145 418.477 347.548 418.477 348.034 cv
418.477 348.727 418.703 349.338 419.153 349.867 cv
418.62 350.322 li
418.343 350.036 418.133 349.68 417.99 349.256 cv
417.847 348.831 417.775 348.424 417.775 348.034 cv
cp
417.775 354.677 mo
417.775 354.209 417.849 353.827 417.996 353.533 cv
418.144 353.238 418.336 353.006 418.575 352.837 cv
418.813 352.668 419.088 352.551 419.4 352.486 cv
419.712 352.421 420.033 352.389 420.362 352.389 cv
423.937 352.389 li
423.937 353.169 li
420.401 353.169 li
420.159 353.169 419.922 353.19 419.693 353.234 cv
419.463 353.277 419.257 353.353 419.075 353.461 cv
418.893 353.57 418.748 353.721 418.64 353.916 cv
418.531 354.111 418.477 354.365 418.477 354.677 cv
418.477 354.963 418.527 355.234 418.627 355.489 cv
418.727 355.745 418.878 355.966 419.082 356.152 cv
419.285 356.339 419.541 356.486 419.849 356.594 cv
420.156 356.703 420.518 356.757 420.934 356.757 cv
423.937 356.757 li
423.937 357.537 li
419.621 357.537 li
419.509 357.537 419.372 357.541 419.212 357.55 cv
419.052 357.558 418.889 357.565 418.724 357.569 cv
418.56 357.574 418.406 357.58 418.263 357.589 cv
418.12 357.597 418.009 357.602 417.931 357.602 cv
417.931 356.822 li
418.157 356.813 418.373 356.807 418.581 356.802 cv
418.789 356.798 418.924 356.787 418.984 356.77 cv
418.984 356.731 li
418.655 356.575 418.371 356.315 418.133 355.951 cv
417.895 355.587 417.775 355.162 417.775 354.677 cv
cp
416.202 314.689 mo
416.202 313.909 li
417.931 313.909 li
417.931 312.193 li
418.633 312.193 li
418.633 313.909 li
422.546 313.909 li
422.815 313.909 423.023 313.835 423.17 313.688 cv
423.318 313.541 423.391 313.337 423.391 313.077 cv
423.391 312.93 423.372 312.78 423.333 312.629 cv
423.294 312.477 423.244 312.332 423.183 312.193 cv
423.885 312.128 li
423.937 312.275 423.985 312.444 424.028 312.635 cv
424.072 312.826 424.093 312.995 424.093 313.142 cv
424.093 313.419 424.052 313.658 423.97 313.857 cv
423.888 314.056 423.777 314.217 423.638 314.338 cv
423.5 314.459 423.337 314.548 423.151 314.604 cv
422.965 314.661 422.763 314.689 422.546 314.689 cv
418.633 314.689 li
418.633 315.989 li
417.931 315.989 li
417.931 314.689 li
cp
414.499 361.918 mo
414.499 361.415 414.588 360.949 414.766 360.52 cv
414.944 360.091 415.24 359.721 415.656 359.409 cv
416.189 360.15 li
415.886 360.366 415.659 360.62 415.507 360.91 cv
415.355 361.201 415.279 361.545 415.279 361.944 cv
415.279 362.221 415.316 362.485 415.39 362.737 cv
415.464 362.988 415.572 363.207 415.715 363.393 cv
415.858 363.58 416.038 363.729 416.254 363.842 cv
416.471 363.954 416.727 364.011 417.021 364.011 cv
417.481 364.011 417.834 363.894 418.081 363.66 cv
418.328 363.426 418.523 363.133 418.666 362.782 cv
418.809 362.431 418.935 362.05 419.043 361.638 cv
419.151 361.227 419.296 360.845 419.478 360.494 cv
419.66 360.143 419.914 359.851 420.239 359.617 cv
420.564 359.383 421.012 359.266 421.584 359.266 cv
422 359.266 422.369 359.344 422.689 359.5 cv
423.01 359.656 423.281 359.866 423.502 360.13 cv
423.723 360.395 423.89 360.7 424.002 361.047 cv
424.115 361.393 424.171 361.753 424.171 362.126 cv
424.171 362.732 424.065 363.291 423.853 363.803 cv
423.641 364.314 423.283 364.752 422.78 365.116 cv
422.234 364.297 li
422.624 364.071 422.915 363.779 423.105 363.419 cv
423.296 363.06 423.391 362.65 423.391 362.191 cv
423.391 361.905 423.348 361.636 423.261 361.385 cv
423.175 361.133 423.053 360.915 422.897 360.728 cv
422.741 360.542 422.553 360.395 422.332 360.286 cv
422.111 360.178 421.862 360.124 421.584 360.124 cv
421.264 360.124 420.999 360.191 420.791 360.325 cv
420.583 360.46 420.412 360.639 420.278 360.865 cv
420.143 361.09 420.029 361.344 419.933 361.625 cv
419.838 361.907 419.743 362.197 419.647 362.496 cv
419.552 362.795 419.444 363.086 419.322 363.367 cv
419.201 363.649 419.043 363.902 418.848 364.128 cv
418.653 364.353 418.408 364.533 418.113 364.667 cv
417.819 364.802 417.455 364.869 417.021 364.869 cv
416.614 364.869 416.252 364.789 415.936 364.628 cv
415.62 364.468 415.355 364.251 415.143 363.978 cv
414.931 363.705 414.77 363.391 414.662 363.036 cv
414.553 362.68 414.499 362.308 414.499 361.918 cv
cp
414.109 330.081 mo
414.109 329.301 li
418.984 329.301 li
418.984 329.275 li
418.655 329.119 418.371 328.859 418.133 328.495 cv
417.895 328.131 417.775 327.706 417.775 327.221 cv
417.775 326.753 417.849 326.372 417.996 326.077 cv
418.144 325.782 418.336 325.55 418.575 325.381 cv
418.813 325.212 419.088 325.095 419.4 325.03 cv
419.712 324.965 420.033 324.933 420.362 324.933 cv
423.937 324.933 li
423.937 325.713 li
420.401 325.713 li
420.159 325.713 419.922 325.735 419.693 325.778 cv
419.463 325.821 419.257 325.897 419.075 326.005 cv
418.893 326.114 418.748 326.265 418.64 326.46 cv
418.531 326.655 418.477 326.909 418.477 327.221 cv
418.477 327.507 418.527 327.778 418.627 328.033 cv
418.727 328.289 418.878 328.51 419.082 328.696 cv
419.285 328.883 419.541 329.03 419.849 329.138 cv
420.156 329.247 420.518 329.301 420.934 329.301 cv
423.937 329.301 li
423.937 330.081 li
cp
f
420.921 347.202 mo
420.921 347.531 420.943 347.85 420.986 348.157 cv
421.03 348.465 421.103 348.742 421.207 348.989 cv
421.311 349.236 421.45 349.433 421.623 349.581 cv
421.797 349.728 422.013 349.802 422.273 349.802 cv
422.455 349.802 422.618 349.761 422.761 349.678 cv
422.904 349.596 423.021 349.49 423.112 349.36 cv
423.203 349.23 423.272 349.085 423.32 348.924 cv
423.367 348.764 423.391 348.601 423.391 348.437 cv
423.391 348.021 423.331 347.678 423.209 347.41 cv
423.088 347.141 422.93 346.927 422.735 346.766 cv
422.54 346.606 422.319 346.495 422.072 346.435 cv
421.825 346.374 421.576 346.344 421.324 346.344 cv
420.921 346.344 li
cp
418.477 320.032 mo
418.477 320.396 418.542 320.725 418.672 321.02 cv
418.802 321.315 418.978 321.566 419.199 321.774 cv
419.42 321.982 419.68 322.14 419.979 322.248 cv
420.278 322.357 420.596 322.411 420.934 322.411 cv
421.272 322.411 421.591 322.357 421.89 322.248 cv
422.189 322.14 422.449 321.982 422.67 321.774 cv
422.891 321.566 423.066 321.315 423.196 321.02 cv
423.326 320.725 423.391 320.396 423.391 320.032 cv
423.391 319.668 423.326 319.339 423.196 319.044 cv
423.066 318.749 422.891 318.498 422.67 318.29 cv
422.449 318.082 422.189 317.924 421.89 317.815 cv
421.591 317.707 421.272 317.653 420.934 317.653 cv
420.596 317.653 420.278 317.707 419.979 317.815 cv
419.68 317.924 419.42 318.082 419.199 318.29 cv
418.978 318.498 418.802 318.749 418.672 319.044 cv
418.542 319.339 418.477 319.668 418.477 320.032 cv
cp
418.477 340.52 mo
418.477 340.875 418.542 341.204 418.672 341.508 cv
418.802 341.811 418.978 342.075 419.199 342.301 cv
419.42 342.526 419.68 342.704 419.979 342.834 cv
420.278 342.964 420.596 343.029 420.934 343.029 cv
421.272 343.029 421.591 342.964 421.89 342.834 cv
422.189 342.704 422.449 342.526 422.67 342.301 cv
422.891 342.075 423.066 341.811 423.196 341.508 cv
423.326 341.204 423.391 340.875 423.391 340.52 cv
423.391 340.156 423.326 339.826 423.196 339.532 cv
423.066 339.237 422.891 338.986 422.67 338.778 cv
422.449 338.57 422.189 338.412 421.89 338.303 cv
421.591 338.195 421.272 338.141 420.934 338.141 cv
420.596 338.141 420.278 338.195 419.979 338.303 cv
419.68 338.412 419.42 338.57 419.199 338.778 cv
418.978 338.986 418.802 339.237 418.672 339.532 cv
418.542 339.826 418.477 340.156 418.477 340.52 cv
cp
417.775 320.032 mo
417.775 319.573 417.853 319.15 418.009 318.764 cv
418.165 318.379 418.384 318.045 418.666 317.763 cv
418.947 317.482 419.281 317.263 419.667 317.107 cv
420.052 316.951 420.475 316.873 420.934 316.873 cv
421.394 316.873 421.816 316.951 422.202 317.107 cv
422.587 317.263 422.921 317.482 423.203 317.763 cv
423.484 318.045 423.703 318.379 423.859 318.764 cv
424.015 319.15 424.093 319.573 424.093 320.032 cv
424.093 320.491 424.015 320.916 423.859 321.306 cv
423.703 321.696 423.484 322.03 423.203 322.307 cv
422.921 322.584 422.587 322.801 422.202 322.957 cv
421.816 323.113 421.394 323.191 420.934 323.191 cv
420.475 323.191 420.052 323.113 419.667 322.957 cv
419.281 322.801 418.947 322.584 418.666 322.307 cv
418.384 322.03 418.165 321.696 418.009 321.306 cv
417.853 320.916 417.775 320.491 417.775 320.032 cv
cp
417.775 333.994 mo
417.775 333.5 417.866 333.073 418.048 332.713 cv
418.23 332.354 418.516 332.074 418.906 331.875 cv
419.322 332.577 li
419.045 332.724 418.835 332.908 418.692 333.129 cv
418.549 333.35 418.477 333.639 418.477 333.994 cv
418.477 334.133 418.499 334.278 418.542 334.429 cv
418.586 334.581 418.646 334.718 418.724 334.839 cv
418.802 334.96 418.902 335.062 419.023 335.144 cv
419.145 335.227 419.283 335.268 419.439 335.268 cv
419.708 335.268 419.907 335.179 420.037 335.001 cv
420.167 334.824 420.269 334.605 420.343 334.345 cv
420.416 334.085 420.479 333.799 420.531 333.487 cv
420.583 333.175 420.668 332.889 420.785 332.629 cv
420.902 332.369 421.071 332.15 421.292 331.972 cv
421.513 331.795 421.827 331.706 422.234 331.706 cv
422.546 331.706 422.817 331.764 423.047 331.881 cv
423.276 331.998 423.469 332.159 423.625 332.362 cv
423.781 332.566 423.898 332.798 423.976 333.058 cv
424.054 333.318 424.093 333.591 424.093 333.877 cv
424.093 334.397 423.994 334.871 423.794 335.3 cv
423.595 335.729 423.287 336.061 422.871 336.295 cv
422.403 335.606 li
422.724 335.441 422.969 335.199 423.138 334.878 cv
423.307 334.557 423.391 334.219 423.391 333.864 cv
423.391 333.699 423.365 333.535 423.313 333.37 cv
423.261 333.205 423.188 333.058 423.092 332.928 cv
422.997 332.798 422.882 332.692 422.748 332.609 cv
422.613 332.527 422.46 332.486 422.286 332.486 cv
422.009 332.486 421.801 332.575 421.662 332.752 cv
421.524 332.93 421.415 333.149 421.337 333.409 cv
421.259 333.669 421.192 333.955 421.136 334.267 cv
421.079 334.579 420.993 334.865 420.876 335.125 cv
420.759 335.385 420.596 335.604 420.388 335.781 cv
420.18 335.959 419.886 336.048 419.504 336.048 cv
419.21 336.048 418.954 335.987 418.737 335.866 cv
418.521 335.745 418.341 335.586 418.198 335.391 cv
418.055 335.196 417.949 334.978 417.879 334.735 cv
417.81 334.492 417.775 334.245 417.775 333.994 cv
cp
417.775 340.52 mo
417.775 340.06 417.853 339.638 418.009 339.252 cv
418.165 338.867 418.384 338.533 418.666 338.251 cv
418.947 337.97 419.281 337.751 419.667 337.595 cv
420.052 337.439 420.475 337.361 420.934 337.361 cv
421.394 337.361 421.816 337.439 422.202 337.595 cv
422.587 337.751 422.921 337.97 423.203 338.251 cv
423.484 338.533 423.703 338.867 423.859 339.252 cv
424.015 339.638 424.093 340.06 424.093 340.52 cv
424.093 340.745 424.069 340.975 424.022 341.209 cv
423.974 341.443 423.9 341.666 423.801 341.878 cv
423.701 342.091 423.575 342.288 423.424 342.47 cv
423.272 342.652 423.092 342.803 422.884 342.925 cv
422.884 342.951 li
426.901 342.951 li
426.901 343.731 li
417.931 343.731 li
417.931 342.951 li
418.984 342.951 li
418.984 342.925 li
418.776 342.803 418.596 342.652 418.445 342.47 cv
418.293 342.288 418.167 342.091 418.068 341.878 cv
417.968 341.666 417.894 341.443 417.847 341.209 cv
417.799 340.975 417.775 340.745 417.775 340.52 cv
cp
417.775 348.034 mo
417.775 347.306 417.946 346.725 418.289 346.292 cv
418.631 345.858 419.184 345.642 419.946 345.642 cv
421.415 345.642 li
421.71 345.642 421.974 345.64 422.208 345.635 cv
422.442 345.631 422.659 345.624 422.858 345.616 cv
423.058 345.607 423.244 345.596 423.417 345.583 cv
423.591 345.57 423.764 345.551 423.937 345.525 cv
423.937 346.253 li
423.643 346.305 423.318 346.331 422.962 346.331 cv
422.962 346.357 li
423.352 346.582 423.638 346.862 423.82 347.195 cv
424.002 347.529 424.093 347.951 424.093 348.463 cv
424.093 348.723 424.061 348.978 423.996 349.23 cv
423.931 349.481 423.827 349.706 423.684 349.906 cv
423.541 350.105 423.357 350.268 423.131 350.393 cv
422.906 350.519 422.633 350.582 422.312 350.582 cv
421.853 350.582 421.489 350.465 421.22 350.231 cv
420.952 349.997 420.75 349.709 420.616 349.366 cv
420.481 349.024 420.395 348.66 420.356 348.274 cv
420.317 347.889 420.297 347.548 420.297 347.254 cv
420.297 346.344 li
419.933 346.344 li
419.413 346.344 419.041 346.504 418.815 346.825 cv
418.59 347.145 418.477 347.548 418.477 348.034 cv
418.477 348.727 418.703 349.338 419.153 349.867 cv
418.62 350.322 li
418.343 350.036 418.133 349.68 417.99 349.256 cv
417.847 348.831 417.775 348.424 417.775 348.034 cv
cp
417.775 354.677 mo
417.775 354.209 417.849 353.827 417.996 353.533 cv
418.144 353.238 418.336 353.006 418.575 352.837 cv
418.813 352.668 419.088 352.551 419.4 352.486 cv
419.712 352.421 420.033 352.389 420.362 352.389 cv
423.937 352.389 li
423.937 353.169 li
420.401 353.169 li
420.159 353.169 419.922 353.19 419.693 353.234 cv
419.463 353.277 419.257 353.353 419.075 353.461 cv
418.893 353.57 418.748 353.721 418.64 353.916 cv
418.531 354.111 418.477 354.365 418.477 354.677 cv
418.477 354.963 418.527 355.234 418.627 355.489 cv
418.726 355.745 418.878 355.966 419.082 356.152 cv
419.285 356.339 419.541 356.486 419.849 356.594 cv
420.156 356.703 420.518 356.757 420.934 356.757 cv
423.937 356.757 li
423.937 357.537 li
419.621 357.537 li
419.509 357.537 419.372 357.541 419.212 357.55 cv
419.051 357.558 418.889 357.565 418.724 357.569 cv
418.56 357.574 418.406 357.58 418.263 357.589 cv
418.12 357.597 418.009 357.602 417.931 357.602 cv
417.931 356.822 li
418.157 356.813 418.373 356.807 418.581 356.802 cv
418.789 356.798 418.924 356.787 418.984 356.77 cv
418.984 356.731 li
418.655 356.575 418.371 356.315 418.133 355.951 cv
417.894 355.587 417.775 355.162 417.775 354.677 cv
cp
416.202 314.689 mo
416.202 313.909 li
417.931 313.909 li
417.931 312.193 li
418.633 312.193 li
418.633 313.909 li
422.546 313.909 li
422.815 313.909 423.023 313.835 423.17 313.688 cv
423.318 313.541 423.391 313.337 423.391 313.077 cv
423.391 312.93 423.372 312.78 423.333 312.629 cv
423.294 312.477 423.244 312.332 423.183 312.193 cv
423.885 312.128 li
423.937 312.275 423.985 312.444 424.028 312.635 cv
424.072 312.826 424.093 312.995 424.093 313.142 cv
424.093 313.419 424.052 313.658 423.97 313.857 cv
423.887 314.056 423.777 314.217 423.638 314.338 cv
423.5 314.459 423.337 314.548 423.151 314.604 cv
422.964 314.661 422.763 314.689 422.546 314.689 cv
418.633 314.689 li
418.633 315.989 li
417.931 315.989 li
417.931 314.689 li
cp
414.499 361.918 mo
414.499 361.415 414.588 360.949 414.766 360.52 cv
414.943 360.091 415.24 359.721 415.656 359.409 cv
416.189 360.15 li
415.886 360.366 415.658 360.62 415.507 360.91 cv
415.355 361.201 415.279 361.545 415.279 361.944 cv
415.279 362.221 415.316 362.485 415.39 362.737 cv
415.463 362.988 415.572 363.207 415.715 363.393 cv
415.858 363.58 416.038 363.729 416.254 363.842 cv
416.471 363.954 416.727 364.011 417.021 364.011 cv
417.481 364.011 417.834 363.894 418.081 363.66 cv
418.328 363.426 418.523 363.133 418.666 362.782 cv
418.809 362.431 418.934 362.05 419.043 361.638 cv
419.151 361.227 419.296 360.845 419.478 360.494 cv
419.66 360.143 419.914 359.851 420.239 359.617 cv
420.564 359.383 421.012 359.266 421.584 359.266 cv
422 359.266 422.369 359.344 422.689 359.5 cv
423.01 359.656 423.281 359.866 423.502 360.13 cv
423.723 360.395 423.89 360.7 424.002 361.047 cv
424.115 361.393 424.171 361.753 424.171 362.126 cv
424.171 362.732 424.065 363.291 423.853 363.803 cv
423.64 364.314 423.283 364.752 422.78 365.116 cv
422.234 364.297 li
422.624 364.071 422.915 363.779 423.105 363.419 cv
423.296 363.06 423.391 362.65 423.391 362.191 cv
423.391 361.905 423.348 361.636 423.261 361.385 cv
423.175 361.133 423.053 360.915 422.897 360.728 cv
422.741 360.542 422.553 360.395 422.332 360.286 cv
422.111 360.178 421.862 360.124 421.584 360.124 cv
421.264 360.124 420.999 360.191 420.791 360.325 cv
420.583 360.46 420.412 360.639 420.278 360.865 cv
420.143 361.09 420.029 361.344 419.933 361.625 cv
419.838 361.907 419.743 362.197 419.647 362.496 cv
419.552 362.795 419.444 363.086 419.322 363.367 cv
419.201 363.649 419.043 363.902 418.848 364.128 cv
418.653 364.353 418.408 364.533 418.113 364.667 cv
417.819 364.802 417.455 364.869 417.021 364.869 cv
416.614 364.869 416.252 364.789 415.936 364.628 cv
415.619 364.468 415.355 364.251 415.143 363.978 cv
414.93 363.705 414.77 363.391 414.662 363.036 cv
414.553 362.68 414.499 362.308 414.499 361.918 cv
cp
414.109 330.081 mo
414.109 329.301 li
418.984 329.301 li
418.984 329.275 li
418.655 329.119 418.371 328.859 418.133 328.495 cv
417.894 328.131 417.775 327.706 417.775 327.221 cv
417.775 326.753 417.849 326.372 417.996 326.077 cv
418.144 325.782 418.336 325.55 418.575 325.381 cv
418.813 325.212 419.088 325.095 419.4 325.03 cv
419.712 324.965 420.033 324.933 420.362 324.933 cv
423.937 324.933 li
423.937 325.713 li
420.401 325.713 li
420.159 325.713 419.922 325.735 419.693 325.778 cv
419.463 325.821 419.257 325.897 419.075 326.005 cv
418.893 326.114 418.748 326.265 418.64 326.46 cv
418.531 326.655 418.477 326.909 418.477 327.221 cv
418.477 327.507 418.527 327.778 418.627 328.033 cv
418.726 328.289 418.878 328.51 419.082 328.696 cv
419.285 328.883 419.541 329.03 419.849 329.138 cv
420.156 329.247 420.518 329.301 420.934 329.301 cv
423.937 329.301 li
423.937 330.081 li
cp
@
432.931 337.988 mo
432.931 337.208 li
436.467 337.208 li
436.71 337.208 436.946 337.186 437.176 337.143 cv
437.405 337.099 437.611 337.024 437.793 336.915 cv
437.975 336.807 438.121 336.655 438.229 336.46 cv
438.337 336.265 438.391 336.012 438.391 335.7 cv
438.391 335.414 438.341 335.143 438.242 334.887 cv
438.142 334.632 437.991 334.411 437.787 334.224 cv
437.583 334.038 437.328 333.891 437.02 333.782 cv
436.712 333.674 436.35 333.62 435.934 333.62 cv
432.931 333.62 li
432.931 332.84 li
437.247 332.84 li
437.36 332.84 437.496 332.835 437.657 332.827 cv
437.817 332.818 437.98 332.812 438.144 332.807 cv
438.309 332.803 438.463 332.796 438.606 332.788 cv
438.749 332.779 438.859 332.775 438.937 332.775 cv
438.937 333.555 li
438.712 333.563 438.495 333.57 438.287 333.574 cv
438.079 333.579 437.945 333.589 437.884 333.607 cv
437.884 333.646 li
438.214 333.802 438.497 334.062 438.736 334.426 cv
438.974 334.79 439.093 335.214 439.093 335.7 cv
439.093 336.168 439.02 336.551 438.872 336.85 cv
438.725 337.149 438.532 337.383 438.294 337.552 cv
438.056 337.721 437.78 337.836 437.468 337.897 cv
437.156 337.957 436.836 337.988 436.506 337.988 cv
cp
431.202 330.253 mo
431.202 329.473 li
432.931 329.473 li
432.931 327.757 li
433.633 327.757 li
433.633 329.473 li
437.546 329.473 li
437.815 329.473 438.023 329.399 438.17 329.252 cv
438.318 329.104 438.391 328.901 438.391 328.641 cv
438.391 328.493 438.372 328.344 438.333 328.192 cv
438.294 328.041 438.244 327.895 438.183 327.757 cv
438.885 327.692 li
438.937 327.839 438.985 328.008 439.028 328.199 cv
439.072 328.389 439.093 328.558 439.093 328.706 cv
439.093 328.983 439.052 329.221 438.97 329.421 cv
438.888 329.62 438.777 329.78 438.638 329.902 cv
438.5 330.023 438.337 330.112 438.151 330.168 cv
437.965 330.225 437.763 330.253 437.546 330.253 cv
433.633 330.253 li
433.633 331.553 li
432.931 331.553 li
432.931 330.253 li
cp
430.279 344.384 mo
430.279 344.982 430.383 345.521 430.591 346.002 cv
430.799 346.483 431.085 346.893 431.449 347.231 cv
431.813 347.569 432.242 347.829 432.736 348.011 cv
433.23 348.193 433.763 348.284 434.335 348.284 cv
434.907 348.284 435.44 348.193 435.934 348.011 cv
436.428 347.829 436.857 347.569 437.221 347.231 cv
437.585 346.893 437.871 346.483 438.079 346.002 cv
438.287 345.521 438.391 344.982 438.391 344.384 cv
438.391 343.786 438.287 343.246 438.079 342.765 cv
437.871 342.284 437.585 341.875 437.221 341.537 cv
436.857 341.199 436.428 340.939 435.934 340.757 cv
435.44 340.575 434.907 340.484 434.335 340.484 cv
433.763 340.484 433.23 340.575 432.736 340.757 cv
432.242 340.939 431.813 341.199 431.449 341.537 cv
431.085 341.875 430.799 342.284 430.591 342.765 cv
430.383 343.246 430.279 343.786 430.279 344.384 cv
cp
429.499 344.384 mo
429.499 343.682 429.621 343.038 429.863 342.453 cv
430.106 341.868 430.442 341.368 430.871 340.952 cv
431.3 340.536 431.809 340.211 432.398 339.977 cv
432.988 339.743 433.633 339.626 434.335 339.626 cv
435.037 339.626 435.685 339.743 436.279 339.977 cv
436.872 340.211 437.384 340.536 437.813 340.952 cv
438.242 341.368 438.576 341.868 438.814 342.453 cv
439.052 343.038 439.171 343.682 439.171 344.384 cv
439.171 345.086 439.052 345.729 438.814 346.314 cv
438.576 346.899 438.242 347.4 437.813 347.816 cv
437.384 348.232 436.872 348.557 436.279 348.791 cv
435.685 349.025 435.037 349.142 434.335 349.142 cv
433.633 349.142 432.988 349.025 432.398 348.791 cv
431.809 348.557 431.3 348.232 430.871 347.816 cv
430.442 347.4 430.106 346.899 429.863 346.314 cv
429.621 345.729 429.499 345.086 429.499 344.384 cv
cp
f
432.931 337.988 mo
432.931 337.208 li
436.467 337.208 li
436.71 337.208 436.946 337.186 437.176 337.143 cv
437.405 337.099 437.611 337.024 437.793 336.915 cv
437.975 336.807 438.12 336.655 438.229 336.46 cv
438.337 336.265 438.391 336.012 438.391 335.7 cv
438.391 335.414 438.341 335.143 438.242 334.887 cv
438.142 334.632 437.99 334.411 437.787 334.224 cv
437.583 334.038 437.327 333.891 437.02 333.782 cv
436.712 333.674 436.35 333.62 435.934 333.62 cv
432.931 333.62 li
432.931 332.84 li
437.247 332.84 li
437.36 332.84 437.496 332.835 437.657 332.827 cv
437.817 332.818 437.98 332.812 438.144 332.807 cv
438.309 332.803 438.463 332.796 438.606 332.788 cv
438.749 332.779 438.859 332.775 438.937 332.775 cv
438.937 333.555 li
438.712 333.563 438.495 333.57 438.287 333.574 cv
438.079 333.579 437.945 333.589 437.884 333.607 cv
437.884 333.646 li
438.214 333.802 438.497 334.062 438.736 334.426 cv
438.974 334.79 439.093 335.214 439.093 335.7 cv
439.093 336.168 439.02 336.551 438.872 336.85 cv
438.725 337.149 438.532 337.383 438.294 337.552 cv
438.055 337.721 437.78 337.836 437.468 337.897 cv
437.156 337.957 436.836 337.988 436.506 337.988 cv
cp
431.202 330.253 mo
431.202 329.473 li
432.931 329.473 li
432.931 327.757 li
433.633 327.757 li
433.633 329.473 li
437.546 329.473 li
437.815 329.473 438.023 329.399 438.17 329.252 cv
438.318 329.104 438.391 328.901 438.391 328.641 cv
438.391 328.493 438.372 328.344 438.333 328.192 cv
438.294 328.041 438.244 327.895 438.183 327.757 cv
438.885 327.692 li
438.937 327.839 438.985 328.008 439.028 328.199 cv
439.072 328.389 439.093 328.558 439.093 328.706 cv
439.093 328.983 439.052 329.221 438.97 329.421 cv
438.887 329.62 438.777 329.78 438.638 329.902 cv
438.5 330.023 438.337 330.112 438.151 330.168 cv
437.964 330.225 437.763 330.253 437.546 330.253 cv
433.633 330.253 li
433.633 331.553 li
432.931 331.553 li
432.931 330.253 li
cp
430.279 344.384 mo
430.279 344.982 430.383 345.521 430.591 346.002 cv
430.799 346.483 431.085 346.893 431.449 347.231 cv
431.813 347.569 432.242 347.829 432.736 348.011 cv
433.23 348.193 433.763 348.284 434.335 348.284 cv
434.907 348.284 435.44 348.193 435.934 348.011 cv
436.428 347.829 436.857 347.569 437.221 347.231 cv
437.585 346.893 437.871 346.483 438.079 346.002 cv
438.287 345.521 438.391 344.982 438.391 344.384 cv
438.391 343.786 438.287 343.246 438.079 342.765 cv
437.871 342.284 437.585 341.875 437.221 341.537 cv
436.857 341.199 436.428 340.939 435.934 340.757 cv
435.44 340.575 434.907 340.484 434.335 340.484 cv
433.763 340.484 433.23 340.575 432.736 340.757 cv
432.242 340.939 431.813 341.199 431.449 341.537 cv
431.085 341.875 430.799 342.284 430.591 342.765 cv
430.383 343.246 430.279 343.786 430.279 344.384 cv
cp
429.499 344.384 mo
429.499 343.682 429.621 343.038 429.863 342.453 cv
430.106 341.868 430.442 341.368 430.871 340.952 cv
431.3 340.536 431.809 340.211 432.398 339.977 cv
432.988 339.743 433.633 339.626 434.335 339.626 cv
435.037 339.626 435.685 339.743 436.279 339.977 cv
436.872 340.211 437.384 340.536 437.813 340.952 cv
438.242 341.368 438.575 341.868 438.814 342.453 cv
439.052 343.038 439.171 343.682 439.171 344.384 cv
439.171 345.086 439.052 345.729 438.814 346.314 cv
438.575 346.899 438.242 347.4 437.813 347.816 cv
437.384 348.232 436.872 348.557 436.279 348.791 cv
435.685 349.025 435.037 349.142 434.335 349.142 cv
433.633 349.142 432.988 349.025 432.398 348.791 cv
431.809 348.557 431.3 348.232 430.871 347.816 cv
430.442 347.4 430.106 346.899 429.863 346.314 cv
429.621 345.729 429.499 345.086 429.499 344.384 cv
cp
@
3 lw
389.518 338.661 mo
406.081 338.661 li
1 .927642 .0572518 .118349 cmyk
@
400.081 334.161 mo
409.081 338.661 li
400.081 343.161 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: SDUAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GLGSFD+ArialMT gcheck setglobal} if
1 580 4 <00010066ffe7057605d3001d00d3b563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc0402d2839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f1726200801080c0b0b06
5508191e635c182b4e10f42b5d4ded4e10f65d4dedf4ed003fed3fed1117
393130012b2b5d5d71005d2b2b0172011706042322240235341224333204
17072626232206021514121633323604b4c23dfec3e5edfed79baf0143c2
dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155b1e0
cb2da092a2feef91bbfee98abc00>GLGSFD+ArialMT AddT42Char 
1 2220 9 <0001005cffe704eb05d30030021540276303630473037404042527350339
1c430349074c1d451f44244627530359075c1d572889130e23b8fff2b410
10025524b8fff2b41010025525b8fff2b41010025526b8fff2b410100255
27b8fff2b41010025523b8fff6b40d10025524b8fff6b40d10025525b8ff
f6b40d10025526b8fff6b40d10025527b8fff640460d100255280d262402
24032725360f34234425452f5a20562355256c0b6a0d6b0e66146518790b
7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325920d960f9615
1eb10602435458402d2126121b261a09262901260000291a120432312600
650002000d2d791b891b021b25160d2d1e27250125051605b8fff4400c0c
0c0655051e2d091e1e1603003fed3fed2b1112395d1112391112395d1112
395d01111217392fed2fed2fed2fed1b402d25240e0d0b05211c1d1e1b08
070604030206012524220e0d0b06051e1b2d1a400c0c02558f1a011aed16
002d01b8ffc040120c0c02551001200150016001700190010601b801b040
132d1e1e1603051e2d091b261a4a092600290129b8ffeab40e0e025529b8
fff4400d0c0c0255291a32212612012612b8ffecb40e0e025512b8fff6b4
0d0d025512b8fff8400f0c0c02551254200001001931635b182b4e10f45d
4de42b2b2bed10ed4e10f62b2b5d4dedf4ed003fed3fed10fd5d2be410fd
5d2bf4111217391117391112393901121739593130005d712b2b2b2b2b2b
2b2b2b2b015d7113371e0233323636353426272624272626353436363332
161617072626232206151417160417161615140606232224265cb70d5fc8
7d6faa53505c3bfe6c5169677ef294a3f98605ba0fada9b0a1393801d958
807a86fb9dc7fef39901d7106e8d5742734445672317612b37a3656fc164
69cc810e8b8e815b4f33336b283bb57675cf7374e900>GLGSFD+ArialMT AddT42Char 
1 5984 17 <00010087000003e805ba00140161b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe0403a1719341708110c1114030501
000f1c0507140b0a0c250940333634ff0901c0090116400b0b0255164010
10025509281010025509140e0e025509b8ffec40110d0d025509040c0c02
55091a0b0b025509b8fff6400b0b0b065509141010065509b8fff8400b0d
0d0655090a0f0f065509b8fff6b60c0c0655094e16b8ffc04017343634b0
16f016027016a016b016ff1604160214250100b8ffc04010333634f00001
00002000d000e0000400b8fffab41010025500b8fffa40170e0e02550004
0c0c025500080b0b025500040b0b065500b8fffa40160f0f065500020c0c
065500020d0d0655004e154750182b10f62b2b2b2b2b2b2b2b5d712b3cfd
3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b5d712bed003f3c3fed3f1139
113901123931304379400e060e07250e060c1b010d080f1b01002b012b2b
81002b5d2b012b33113311363332161615112311342623220606151187b4
7ec076ae4bb4756b508d3c05bafdf2925da49cfd5f02a1877b538e7dfdbb
>GLGSFD+ArialMT AddT42Char 
GLGSFD+ArialMT /CharStrings get begin
/C 4 def
/S 9 def
/h 17 def
end
GLGSFD+ArialMT /Encoding get
dup 67 /C put
dup 83 /S put
dup 104 /h put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GLGSFD+ArialMT*1 [32{/.notdef}rp /space 34{/.notdef}rp /C /D 14{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]GLGSFD+ArialMT nfGLGSFD+ArialMT*1 [14 0 0 -14 0 0 ]msf45.7916 264.291 mo(Counter  )[10.1108 7.7868 7.78679 7.7868 3.8892 7.7868 4.6619 3.8892 0 ]xsh52.7916 280.291 mo(Chain )[10.1108 7.7868 7.78679 3.1108 7.7868 0 ]xsh39.7245 347.124 mo(Snapshot  )[9.3381 7.7868 7.78679 7.7868 7 7.7868 7.7868 3.88919 3.88921 0 ]xsh50.7245 363.124 mo(Chain )[10.1108 7.78679 7.7868 3.1108 7.7868 0 ]xsh31.0557 269.382 mo
20.1807 269.382 li
20.1807 170.569 li
56.6807 170.569 li
1 .927642 .0572518 .118349 cmyk
@
25.0557 273.882 mo
34.0557 269.382 li
25.0557 264.882 li
cp
ef
50.6807 175.069 mo
59.6807 170.569 li
50.6807 166.069 li
cp
ef
31.0557 350.783 mo
7.86826 350.783 li
7.86826 47.0328 li
59.9308 47.0328 li
@
25.0557 355.283 mo
34.0558 350.783 li
25.0557 346.283 li
cp
ef
53.9308 51.5328 mo
62.9308 47.0328 li
53.9308 42.5328 li
cp
ef
392.808 74.2404 mo
375.159 74.2404 li
375.159 21.9243 li
392.808 21.9243 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
1 lw
392.808 74.2404 mo
375.159 74.2404 li
375.159 21.9243 li
392.808 21.9243 li
cp
.750271 .679713 .654902 .901945 cmyk
@
392.808 21.9243 mo
383.983 36.7295 li
375.159 21.9243 li
cp
.0294804 .0187381 .0187381 0 cmyk
ef
392.808 21.9244 mo
383.983 36.7295 li
375.159 21.9244 li
cp
.750271 .679713 .654902 .901945 cmyk
@
437.157 74.4995 mo
427.037 74.4995 li
427.037 22.7689 li
437.157 22.7689 li
440.366 22.7689 442.967 25.3699 442.967 28.5783 cv
442.967 68.69 li
442.967 71.8985 440.366 74.4995 437.157 74.4995 cv
.184314 .0352941 .2 .014902 cmyk
f
426.037 74.4995 mo
413.92 74.4995 li
410.711 74.4995 408.111 71.8985 408.111 68.69 cv
408.111 28.5783 li
408.111 25.3699 410.711 22.7689 413.92 22.7689 cv
426.037 22.7689 li
426.037 74.4995 li
.184314 .0352941 .2 .0156863 cmyk
f
427.037 74.4995 mo
426.037 74.4995 li
426.037 22.7689 li
427.037 22.7689 li
427.037 74.4995 li
.784314 .576471 .72549 .737255 cmyk
f
408.111 28.5783 mo
408.111 25.3699 410.712 22.7689 413.92 22.7689 cv
437.157 22.7689 li
440.366 22.7689 442.967 25.3699 442.967 28.5783 cv
442.967 68.69 li
442.967 71.8985 440.366 74.4995 437.157 74.4995 cv
413.92 74.4995 li
410.712 74.4995 408.111 71.8985 408.111 68.69 cv
cp
.750271 .679713 .654902 .901945 cmyk
@
417.479 41.931 mo
417.479 42.2863 417.544 42.6157 417.674 42.919 cv
417.804 43.2223 417.979 43.4867 418.2 43.712 cv
418.421 43.9373 418.681 44.115 418.98 44.245 cv
419.279 44.375 419.598 44.44 419.936 44.44 cv
420.274 44.44 420.592 44.375 420.891 44.245 cv
421.19 44.115 421.45 43.9373 421.671 43.712 cv
421.892 43.4867 422.068 43.2223 422.198 42.919 cv
422.328 42.6157 422.393 42.2863 422.393 41.931 cv
422.393 41.567 422.328 41.2376 422.198 40.943 cv
422.068 40.6483 421.892 40.397 421.671 40.189 cv
421.45 39.981 421.19 39.8228 420.891 39.7145 cv
420.592 39.6061 420.274 39.552 419.936 39.552 cv
419.598 39.552 419.279 39.6061 418.98 39.7145 cv
418.681 39.8228 418.421 39.981 418.2 40.189 cv
417.979 40.397 417.804 40.6483 417.674 40.943 cv
417.544 41.2376 417.479 41.567 417.479 41.931 cv
cp
417.479 49.575 mo
417.479 49.9996 417.565 50.3528 417.739 50.6345 cv
417.912 50.9161 418.111 51.1393 418.337 51.304 cv
418.562 51.4687 418.781 51.5857 418.993 51.655 cv
419.206 51.7243 419.351 51.759 419.429 51.759 cv
419.429 47.495 li
419.16 47.495 418.909 47.5491 418.675 47.6575 cv
418.441 47.7658 418.235 47.9131 418.057 48.0995 cv
417.879 48.2858 417.739 48.5068 417.635 48.7625 cv
417.531 49.0182 417.479 49.289 417.479 49.575 cv
cp
416.777 35.4051 mo
416.777 34.9111 416.868 34.4843 417.05 34.1246 cv
417.232 33.7649 417.518 33.4854 417.908 33.2861 cv
418.324 33.9881 li
418.046 34.1354 417.836 34.3196 417.693 34.5406 cv
417.55 34.7616 417.479 35.0497 417.479 35.4051 cv
417.479 35.5438 417.5 35.6889 417.544 35.8406 cv
417.587 35.9922 417.648 36.1288 417.726 36.2501 cv
417.804 36.3714 417.903 36.4732 418.025 36.5556 cv
418.146 36.6379 418.285 36.6791 418.441 36.6791 cv
418.709 36.6791 418.909 36.5902 419.039 36.4126 cv
419.169 36.2349 419.271 36.0161 419.344 35.7561 cv
419.418 35.4961 419.481 35.2101 419.533 34.8981 cv
419.585 34.5861 419.669 34.3001 419.786 34.0401 cv
419.903 33.7801 420.072 33.5612 420.293 33.3836 cv
420.514 33.2059 420.828 33.1171 421.236 33.1171 cv
421.548 33.1171 421.819 33.1756 422.048 33.2926 cv
422.278 33.4096 422.471 33.5699 422.627 33.7736 cv
422.783 33.9772 422.9 34.2091 422.978 34.4691 cv
423.056 34.7291 423.095 35.0021 423.095 35.2881 cv
423.095 35.8081 422.995 36.2826 422.796 36.7116 cv
422.596 37.1406 422.289 37.4721 421.873 37.7061 cv
421.405 37.0171 li
421.725 36.8524 421.97 36.6097 422.139 36.2891 cv
422.308 35.9684 422.393 35.6304 422.393 35.2751 cv
422.393 35.1104 422.367 34.9457 422.315 34.7811 cv
422.263 34.6164 422.189 34.4691 422.094 34.3391 cv
421.998 34.2091 421.884 34.1029 421.749 34.0206 cv
421.615 33.9383 421.461 33.8971 421.288 33.8971 cv
421.01 33.8971 420.802 33.9859 420.664 34.1636 cv
420.525 34.3412 420.417 34.5601 420.339 34.8201 cv
420.261 35.0801 420.194 35.3661 420.137 35.6781 cv
420.081 35.9901 419.994 36.2761 419.877 36.5361 cv
419.76 36.7961 419.598 37.0149 419.39 37.1926 cv
419.182 37.3702 418.887 37.4591 418.506 37.4591 cv
418.211 37.4591 417.955 37.3984 417.739 37.2771 cv
417.522 37.1558 417.342 36.9976 417.199 36.8026 cv
417.056 36.6076 416.95 36.3888 416.881 36.1461 cv
416.811 35.9034 416.777 35.6564 416.777 35.4051 cv
cp
416.777 41.931 mo
416.777 41.4716 416.855 41.0492 417.011 40.6635 cv
417.167 40.2778 417.385 39.9442 417.667 39.6625 cv
417.949 39.3808 418.283 39.162 418.668 39.006 cv
419.054 38.85 419.476 38.772 419.936 38.772 cv
420.395 38.772 420.818 38.85 421.203 39.006 cv
421.589 39.162 421.922 39.3808 422.204 39.6625 cv
422.486 39.9442 422.705 40.2778 422.861 40.6635 cv
423.017 41.0492 423.095 41.4716 423.095 41.931 cv
423.095 42.1563 423.071 42.386 423.023 42.62 cv
422.975 42.854 422.902 43.0771 422.802 43.2895 cv
422.703 43.5018 422.577 43.699 422.425 43.881 cv
422.273 44.063 422.094 44.2147 421.886 44.336 cv
421.886 44.362 li
425.903 44.362 li
425.903 45.142 li
416.933 45.142 li
416.933 44.362 li
417.986 44.362 li
417.986 44.336 li
417.778 44.2147 417.598 44.063 417.446 43.881 cv
417.294 43.699 417.169 43.5018 417.069 43.2895 cv
416.97 43.0771 416.896 42.854 416.848 42.62 cv
416.801 42.386 416.777 42.1563 416.777 41.931 cv
cp
416.777 49.536 mo
416.777 49.0767 416.857 48.6715 417.017 48.3205 cv
417.177 47.9695 417.39 47.6748 417.654 47.4365 cv
417.918 47.1982 418.22 47.0183 418.558 46.897 cv
418.896 46.7756 419.238 46.715 419.585 46.715 cv
420.131 46.715 li
420.131 51.759 li
420.295 51.759 420.505 51.7265 420.761 51.6615 cv
421.017 51.5965 421.266 51.4773 421.509 51.304 cv
421.751 51.1306 421.959 50.8988 422.133 50.6085 cv
422.306 50.3181 422.393 49.9433 422.393 49.484 cv
422.393 49.0853 422.297 48.6996 422.107 48.327 cv
421.916 47.9543 421.656 47.6683 421.327 47.469 cv
421.808 46.897 li
422.267 47.2003 422.596 47.5751 422.796 48.0215 cv
422.995 48.4678 423.095 48.9597 423.095 49.497 cv
423.095 49.9563 423.017 50.3723 422.861 50.745 cv
422.705 51.1176 422.486 51.4383 422.204 51.707 cv
421.922 51.9756 421.589 52.1815 421.203 52.3245 cv
420.818 52.4675 420.391 52.539 419.923 52.539 cv
419.472 52.539 419.056 52.4653 418.675 52.318 cv
418.293 52.1707 417.962 51.9626 417.68 51.694 cv
417.398 51.4253 417.177 51.109 417.017 50.745 cv
416.857 50.381 416.777 49.978 416.777 49.536 cv
cp
415.204 56.0879 mo
415.204 55.3079 li
416.933 55.3079 li
416.933 53.5919 li
417.635 53.5919 li
417.635 55.3079 li
421.548 55.3079 li
421.816 55.3079 422.024 55.2342 422.172 55.0869 cv
422.319 54.9395 422.393 54.7359 422.393 54.4759 cv
422.393 54.3286 422.373 54.179 422.334 54.0274 cv
422.295 53.8757 422.245 53.7306 422.185 53.5919 cv
422.887 53.5269 li
422.939 53.6742 422.986 53.8432 423.03 54.0339 cv
423.073 54.2245 423.095 54.3936 423.095 54.5409 cv
423.095 54.8182 423.053 55.0565 422.971 55.2559 cv
422.889 55.4552 422.778 55.6155 422.64 55.7369 cv
422.501 55.8582 422.339 55.9471 422.152 56.0034 cv
421.966 56.0597 421.764 56.0879 421.548 56.0879 cv
417.635 56.0879 li
417.635 57.3879 li
416.933 57.3879 li
416.933 56.0879 li
cp
413.501 60.9109 mo
413.501 60.4082 413.59 59.9424 413.767 59.5134 cv
413.945 59.0844 414.242 58.7139 414.658 58.4019 cv
415.191 59.1429 li
414.887 59.3596 414.66 59.613 414.508 59.9034 cv
414.357 60.1937 414.281 60.5382 414.281 60.9369 cv
414.281 61.2142 414.318 61.4785 414.391 61.7299 cv
414.465 61.9812 414.573 62.2 414.716 62.3864 cv
414.859 62.5727 415.039 62.7222 415.256 62.8349 cv
415.472 62.9475 415.728 63.0039 416.023 63.0039 cv
416.482 63.0039 416.835 62.8869 417.082 62.6529 cv
417.329 62.4189 417.524 62.1264 417.667 61.7754 cv
417.81 61.4244 417.936 61.0431 418.044 60.6314 cv
418.152 60.2197 418.298 59.8384 418.48 59.4874 cv
418.662 59.1364 418.915 58.8439 419.24 58.6099 cv
419.565 58.3759 420.014 58.2589 420.586 58.2589 cv
421.002 58.2589 421.37 58.3369 421.691 58.4929 cv
422.011 58.6489 422.282 58.859 422.503 59.1234 cv
422.724 59.3877 422.891 59.6932 423.004 60.0399 cv
423.116 60.3865 423.173 60.7462 423.173 61.1189 cv
423.173 61.7256 423.066 62.2845 422.854 62.7959 cv
422.642 63.3072 422.284 63.7449 421.782 64.1089 cv
421.236 63.2899 li
421.626 63.0645 421.916 62.772 422.107 62.4124 cv
422.297 62.0527 422.393 61.6432 422.393 61.1839 cv
422.393 60.8979 422.349 60.6292 422.263 60.3779 cv
422.176 60.1266 422.055 59.9077 421.899 59.7214 cv
421.743 59.535 421.554 59.3877 421.333 59.2794 cv
421.112 59.1711 420.863 59.1169 420.586 59.1169 cv
420.265 59.1169 420.001 59.1841 419.793 59.3184 cv
419.585 59.4527 419.414 59.6325 419.279 59.8579 cv
419.145 60.0832 419.03 60.3367 418.935 60.6184 cv
418.839 60.9001 418.744 61.1904 418.649 61.4894 cv
418.553 61.7884 418.445 62.0787 418.324 62.3604 cv
418.202 62.6421 418.044 62.8955 417.849 63.1209 cv
417.654 63.3462 417.409 63.5261 417.115 63.6604 cv
416.82 63.7947 416.456 63.8619 416.023 63.8619 cv
415.615 63.8619 415.254 63.7817 414.937 63.6214 cv
414.621 63.4611 414.357 63.2444 414.144 62.9714 cv
413.932 62.6984 413.772 62.3842 413.663 62.0289 cv
413.555 61.6736 413.501 61.3009 413.501 60.9109 cv
cp
f
417.479 41.931 mo
417.479 42.2863 417.544 42.6157 417.674 42.919 cv
417.804 43.2224 417.979 43.4867 418.2 43.712 cv
418.421 43.9373 418.681 44.1151 418.98 44.245 cv
419.279 44.3751 419.598 44.44 419.936 44.44 cv
420.274 44.44 420.592 44.3751 420.891 44.245 cv
421.19 44.1151 421.45 43.9373 421.671 43.712 cv
421.892 43.4867 422.068 43.2224 422.198 42.919 cv
422.328 42.6157 422.393 42.2863 422.393 41.931 cv
422.393 41.567 422.328 41.2377 422.198 40.943 cv
422.068 40.6483 421.892 40.397 421.671 40.189 cv
421.45 39.981 421.19 39.8228 420.891 39.7145 cv
420.592 39.6062 420.274 39.552 419.936 39.552 cv
419.598 39.552 419.279 39.6062 418.98 39.7145 cv
418.681 39.8228 418.421 39.981 418.2 40.189 cv
417.979 40.397 417.804 40.6483 417.674 40.943 cv
417.544 41.2377 417.479 41.567 417.479 41.931 cv
cp
417.479 49.575 mo
417.479 49.9997 417.565 50.3528 417.739 50.6346 cv
417.912 50.9162 418.111 51.1393 418.337 51.304 cv
418.562 51.4687 418.781 51.5857 418.993 51.655 cv
419.206 51.7243 419.351 51.759 419.429 51.759 cv
419.429 47.495 li
419.16 47.495 418.909 47.5492 418.675 47.6575 cv
418.441 47.7659 418.235 47.9132 418.057 48.0995 cv
417.879 48.2859 417.739 48.5068 417.635 48.7625 cv
417.531 49.0182 417.479 49.289 417.479 49.575 cv
cp
416.777 35.4052 mo
416.777 34.9111 416.868 34.4843 417.05 34.1246 cv
417.232 33.765 417.518 33.4854 417.908 33.2861 cv
418.324 33.9882 li
418.046 34.1354 417.836 34.3196 417.693 34.5406 cv
417.55 34.7616 417.479 35.0498 417.479 35.4052 cv
417.479 35.5438 417.5 35.6889 417.544 35.8406 cv
417.587 35.9923 417.648 36.1288 417.726 36.2501 cv
417.804 36.3715 417.903 36.4733 418.025 36.5556 cv
418.146 36.638 418.285 36.6791 418.441 36.6791 cv
418.709 36.6791 418.909 36.5903 419.039 36.4127 cv
419.169 36.235 419.271 36.0161 419.344 35.7561 cv
419.418 35.4961 419.481 35.2101 419.533 34.8981 cv
419.585 34.5862 419.669 34.3001 419.786 34.0401 cv
419.903 33.7802 420.072 33.5613 420.293 33.3836 cv
420.514 33.206 420.828 33.1171 421.236 33.1171 cv
421.548 33.1171 421.818 33.1757 422.048 33.2926 cv
422.278 33.4096 422.471 33.5699 422.627 33.7737 cv
422.783 33.9773 422.9 34.2091 422.978 34.4691 cv
423.056 34.7291 423.095 35.0021 423.095 35.2881 cv
423.095 35.8081 422.995 36.2826 422.796 36.7116 cv
422.596 37.1406 422.289 37.4721 421.873 37.7061 cv
421.405 37.0172 li
421.725 36.8524 421.97 36.6098 422.139 36.2891 cv
422.308 35.9684 422.393 35.6305 422.393 35.2751 cv
422.393 35.1104 422.367 34.9458 422.315 34.7812 cv
422.263 34.6165 422.189 34.4691 422.094 34.3391 cv
421.998 34.2091 421.883 34.1029 421.749 34.0206 cv
421.615 33.9383 421.461 33.8971 421.288 33.8971 cv
421.01 33.8971 420.802 33.986 420.664 34.1636 cv
420.525 34.3413 420.417 34.5602 420.339 34.8201 cv
420.261 35.0801 420.193 35.3661 420.137 35.6781 cv
420.081 35.9901 419.994 36.2761 419.877 36.5361 cv
419.76 36.7961 419.598 37.015 419.39 37.1926 cv
419.182 37.3703 418.887 37.4591 418.506 37.4591 cv
418.211 37.4591 417.955 37.3984 417.739 37.2772 cv
417.522 37.1558 417.342 36.9977 417.199 36.8026 cv
417.056 36.6076 416.95 36.3888 416.881 36.1461 cv
416.811 35.9034 416.777 35.6564 416.777 35.4052 cv
cp
416.777 41.931 mo
416.777 41.4717 416.855 41.0492 417.011 40.6635 cv
417.167 40.2779 417.385 39.9442 417.667 39.6625 cv
417.949 39.3809 418.283 39.162 418.668 39.006 cv
419.054 38.85 419.476 38.772 419.936 38.772 cv
420.395 38.772 420.818 38.85 421.203 39.006 cv
421.589 39.162 421.923 39.3809 422.204 39.6625 cv
422.486 39.9442 422.705 40.2779 422.861 40.6635 cv
423.017 41.0492 423.095 41.4717 423.095 41.931 cv
423.095 42.1564 423.071 42.386 423.023 42.62 cv
422.975 42.854 422.902 43.0772 422.802 43.2896 cv
422.702 43.5019 422.577 43.699 422.425 43.881 cv
422.274 44.063 422.094 44.2147 421.886 44.3361 cv
421.886 44.3621 li
425.903 44.3621 li
425.903 45.1421 li
416.933 45.1421 li
416.933 44.3621 li
417.986 44.3621 li
417.986 44.3361 li
417.778 44.2147 417.598 44.063 417.446 43.881 cv
417.295 43.699 417.169 43.5019 417.069 43.2896 cv
416.97 43.0772 416.896 42.854 416.848 42.62 cv
416.801 42.386 416.777 42.1564 416.777 41.931 cv
cp
416.777 49.536 mo
416.777 49.0767 416.857 48.6715 417.017 48.3205 cv
417.178 47.9695 417.39 47.6748 417.654 47.4365 cv
417.919 47.1982 418.22 47.0184 418.558 46.897 cv
418.896 46.7757 419.238 46.715 419.585 46.715 cv
420.131 46.715 li
420.131 51.759 li
420.295 51.759 420.505 51.7265 420.761 51.6615 cv
421.017 51.5965 421.266 51.4774 421.509 51.304 cv
421.751 51.1307 421.959 50.8988 422.133 50.6086 cv
422.306 50.3182 422.393 49.9434 422.393 49.484 cv
422.393 49.0854 422.297 48.6997 422.107 48.327 cv
421.916 47.9543 421.656 47.6683 421.327 47.469 cv
421.808 46.897 li
422.267 47.2004 422.596 47.5752 422.796 48.0215 cv
422.995 48.4678 423.095 48.9597 423.095 49.497 cv
423.095 49.9564 423.017 50.3723 422.861 50.745 cv
422.705 51.1177 422.486 51.4384 422.204 51.707 cv
421.923 51.9757 421.589 52.1815 421.203 52.3245 cv
420.818 52.4675 420.391 52.539 419.923 52.539 cv
419.472 52.539 419.056 52.4654 418.675 52.318 cv
418.293 52.1707 417.962 51.9627 417.68 51.694 cv
417.399 51.4254 417.178 51.109 417.017 50.745 cv
416.857 50.381 416.777 49.978 416.777 49.536 cv
cp
415.204 56.0879 mo
415.204 55.3079 li
416.933 55.3079 li
416.933 53.5919 li
417.635 53.5919 li
417.635 55.3079 li
421.548 55.3079 li
421.816 55.3079 422.024 55.2343 422.172 55.0869 cv
422.319 54.9396 422.393 54.7359 422.393 54.476 cv
422.393 54.3286 422.373 54.1791 422.334 54.0274 cv
422.295 53.8758 422.245 53.7306 422.185 53.5919 cv
422.887 53.5269 li
422.939 53.6743 422.986 53.8433 423.03 54.0339 cv
423.073 54.2246 423.095 54.3936 423.095 54.5409 cv
423.095 54.8182 423.054 55.0566 422.971 55.2559 cv
422.889 55.4553 422.778 55.6156 422.64 55.7369 cv
422.501 55.8582 422.339 55.9471 422.152 56.0034 cv
421.966 56.0598 421.764 56.0879 421.548 56.0879 cv
417.635 56.0879 li
417.635 57.3879 li
416.933 57.3879 li
416.933 56.0879 li
cp
413.501 60.9109 mo
413.501 60.4082 413.59 59.9424 413.767 59.5134 cv
413.945 59.0844 414.242 58.7139 414.658 58.4019 cv
415.191 59.1429 li
414.887 59.3596 414.66 59.6131 414.508 59.9034 cv
414.357 60.1938 414.281 60.5382 414.281 60.937 cv
414.281 61.2143 414.318 61.4786 414.391 61.7299 cv
414.465 61.9812 414.573 62.2001 414.716 62.3864 cv
414.859 62.5728 415.039 62.7223 415.256 62.8349 cv
415.472 62.9476 415.728 63.0039 416.023 63.0039 cv
416.482 63.0039 416.835 62.8869 417.082 62.6529 cv
417.329 62.4189 417.524 62.1264 417.667 61.7755 cv
417.81 61.4244 417.936 61.0431 418.044 60.6314 cv
418.153 60.2198 418.298 59.8384 418.48 59.4874 cv
418.662 59.1364 418.915 58.8439 419.24 58.61 cv
419.565 58.3759 420.014 58.2589 420.586 58.2589 cv
421.002 58.2589 421.37 58.3369 421.691 58.4929 cv
422.011 58.6489 422.282 58.8591 422.503 59.1234 cv
422.724 59.3878 422.891 59.6933 423.004 60.0399 cv
423.116 60.3866 423.173 60.7463 423.173 61.1189 cv
423.173 61.7256 423.067 62.2846 422.854 62.7959 cv
422.642 63.3073 422.284 63.7449 421.782 64.1089 cv
421.236 63.2899 li
421.626 63.0646 421.916 62.7721 422.107 62.4124 cv
422.297 62.0528 422.393 61.6432 422.393 61.1839 cv
422.393 60.8979 422.349 60.6292 422.263 60.3779 cv
422.176 60.1266 422.055 59.9077 421.899 59.7214 cv
421.743 59.5351 421.554 59.3878 421.333 59.2794 cv
421.112 59.1711 420.863 59.1169 420.586 59.1169 cv
420.265 59.1169 420.001 59.1841 419.793 59.3184 cv
419.585 59.4528 419.414 59.6326 419.279 59.8579 cv
419.145 60.0833 419.03 60.3367 418.935 60.6184 cv
418.839 60.9001 418.744 61.1904 418.649 61.4894 cv
418.553 61.7884 418.445 62.0788 418.324 62.3604 cv
418.202 62.6421 418.044 62.8956 417.849 63.1209 cv
417.654 63.3463 417.409 63.5261 417.115 63.6604 cv
416.82 63.7947 416.456 63.8619 416.023 63.8619 cv
415.615 63.8619 415.253 63.7818 414.937 63.6214 cv
414.621 63.4611 414.357 63.2444 414.144 62.9714 cv
413.932 62.6985 413.772 62.3842 413.663 62.0289 cv
413.555 61.6736 413.501 61.3009 413.501 60.9109 cv
cp
@
431.777 46.5179 mo
431.777 46.05 431.85 45.6686 431.998 45.374 cv
432.145 45.0793 432.338 44.8474 432.576 44.6785 cv
432.815 44.5095 433.09 44.3925 433.402 44.3275 cv
433.714 44.2625 434.034 44.2299 434.364 44.2299 cv
437.939 44.2299 li
437.939 45.0099 li
434.403 45.0099 li
434.16 45.0099 433.924 45.0316 433.694 45.075 cv
433.465 45.1183 433.259 45.1941 433.077 45.3025 cv
432.895 45.4108 432.75 45.5624 432.641 45.7574 cv
432.533 45.9525 432.479 46.206 432.479 46.5179 cv
432.479 46.804 432.529 47.0748 432.628 47.3304 cv
432.728 47.5861 432.879 47.8071 433.083 47.9934 cv
433.287 48.1798 433.543 48.3271 433.85 48.4355 cv
434.158 48.5438 434.52 48.598 434.936 48.598 cv
437.939 48.598 li
437.939 49.378 li
433.623 49.378 li
433.51 49.378 433.374 49.3823 433.213 49.391 cv
433.053 49.3996 432.89 49.4061 432.726 49.4105 cv
432.561 49.4148 432.407 49.4213 432.264 49.43 cv
432.121 49.4386 432.011 49.443 431.933 49.443 cv
431.933 48.663 li
432.158 48.6543 432.375 48.6478 432.583 48.6435 cv
432.791 48.6391 432.925 48.6283 432.986 48.611 cv
432.986 48.572 li
432.656 48.416 432.372 48.1559 432.134 47.792 cv
431.896 47.4279 431.777 47.0033 431.777 46.5179 cv
cp
428.735 52.5369 mo
428.735 51.6789 li
437.939 51.6789 li
437.939 52.5369 li
cp
f
431.777 46.518 mo
431.777 46.05 431.85 45.6686 431.998 45.374 cv
432.145 45.0793 432.338 44.8475 432.576 44.6785 cv
432.815 44.5095 433.09 44.3925 433.402 44.3275 cv
433.714 44.2625 434.034 44.23 434.364 44.23 cv
437.939 44.23 li
437.939 45.01 li
434.403 45.01 li
434.16 45.01 433.924 45.0316 433.694 45.075 cv
433.465 45.1183 433.259 45.1942 433.077 45.3025 cv
432.895 45.4108 432.75 45.5625 432.641 45.7575 cv
432.533 45.9525 432.479 46.206 432.479 46.518 cv
432.479 46.804 432.529 47.0749 432.628 47.3305 cv
432.728 47.5862 432.879 47.8072 433.083 47.9935 cv
433.287 48.1798 433.543 48.3271 433.85 48.4355 cv
434.158 48.5439 434.52 48.598 434.936 48.598 cv
437.939 48.598 li
437.939 49.378 li
433.623 49.378 li
433.51 49.378 433.374 49.3824 433.213 49.391 cv
433.053 49.3997 432.89 49.4062 432.726 49.4105 cv
432.561 49.4148 432.407 49.4213 432.264 49.43 cv
432.121 49.4387 432.011 49.443 431.933 49.443 cv
431.933 48.663 li
432.158 48.6543 432.375 48.6479 432.583 48.6435 cv
432.791 48.6392 432.925 48.6283 432.986 48.611 cv
432.986 48.572 li
432.656 48.416 432.373 48.156 432.134 47.792 cv
431.896 47.428 431.777 47.0033 431.777 46.518 cv
cp
428.735 52.537 mo
428.735 51.6789 li
437.939 51.6789 li
437.939 52.537 li
cp
@
436.853 181.502 mo
427.037 181.502 li
427.037 126.451 li
436.853 126.451 li
439.977 126.451 442.51 128.984 442.51 132.109 cv
442.51 175.845 li
442.51 178.97 439.977 181.502 436.853 181.502 cv
.184314 .0352941 .2 .014902 cmyk
f
426.037 181.502 mo
414.225 181.502 li
411.1 181.502 408.568 178.97 408.568 175.845 cv
408.568 132.109 li
408.568 128.984 411.1 126.451 414.225 126.451 cv
426.037 126.451 li
426.037 181.502 li
.184314 .0352941 .2 .0156863 cmyk
f
427.037 181.502 mo
426.037 181.502 li
426.037 126.451 li
427.037 126.451 li
427.037 181.502 li
.784314 .576471 .72549 .737255 cmyk
f
408.568 132.109 mo
408.568 128.984 411.1 126.452 414.225 126.452 cv
436.853 126.452 li
439.977 126.452 442.51 128.984 442.51 132.109 cv
442.51 175.845 li
442.51 178.97 439.977 181.502 436.853 181.502 cv
414.225 181.502 li
411.1 181.502 408.568 178.97 408.568 175.845 cv
cp
.750271 .679713 .654902 .901945 cmyk
@
414.281 152.044 mo
414.281 152.642 414.385 153.182 414.593 153.663 cv
414.801 154.144 415.087 154.553 415.451 154.892 cv
415.815 155.229 416.244 155.49 416.738 155.672 cv
417.232 155.853 417.765 155.944 418.337 155.944 cv
418.909 155.944 419.442 155.853 419.936 155.672 cv
420.43 155.49 420.859 155.229 421.223 154.892 cv
421.587 154.553 421.873 154.144 422.081 153.663 cv
422.289 153.182 422.393 152.642 422.393 152.044 cv
422.393 151.447 422.289 150.907 422.081 150.426 cv
421.873 149.945 421.587 149.535 421.223 149.198 cv
420.859 148.859 420.43 148.599 419.936 148.418 cv
419.442 148.236 418.909 148.145 418.337 148.145 cv
417.765 148.145 417.232 148.236 416.738 148.418 cv
416.244 148.599 415.815 148.859 415.451 149.198 cv
415.087 149.535 414.801 149.945 414.593 150.426 cv
414.385 150.907 414.281 151.447 414.281 152.044 cv
cp
413.735 159.584 mo
413.735 158.726 li
422.939 158.726 li
422.939 159.584 li
cp
413.501 152.044 mo
413.501 151.342 413.622 150.699 413.865 150.114 cv
414.107 149.529 414.443 149.029 414.872 148.612 cv
415.301 148.197 415.81 147.871 416.4 147.638 cv
416.989 147.404 417.635 147.286 418.337 147.286 cv
419.039 147.286 419.686 147.404 420.28 147.638 cv
420.874 147.871 421.385 148.197 421.814 148.612 cv
422.243 149.029 422.577 149.529 422.815 150.114 cv
423.053 150.699 423.173 151.342 423.173 152.044 cv
423.173 152.746 423.053 153.39 422.815 153.975 cv
422.577 154.56 422.243 155.06 421.814 155.477 cv
421.385 155.892 420.874 156.217 420.28 156.452 cv
419.686 156.685 419.039 156.802 418.337 156.802 cv
417.635 156.802 416.989 156.685 416.4 156.452 cv
415.81 156.217 415.301 155.892 414.872 155.477 cv
414.443 155.06 414.107 154.56 413.865 153.975 cv
413.622 153.39 413.501 152.746 413.501 152.044 cv
cp
f
414.281 152.044 mo
414.281 152.642 414.385 153.182 414.593 153.663 cv
414.801 154.144 415.087 154.553 415.451 154.892 cv
415.815 155.229 416.244 155.489 416.738 155.671 cv
417.232 155.853 417.765 155.944 418.337 155.944 cv
418.909 155.944 419.442 155.853 419.936 155.671 cv
420.43 155.489 420.859 155.229 421.223 154.892 cv
421.587 154.553 421.873 154.144 422.081 153.663 cv
422.289 153.182 422.393 152.642 422.393 152.044 cv
422.393 151.446 422.289 150.907 422.081 150.426 cv
421.873 149.945 421.587 149.535 421.223 149.197 cv
420.859 148.859 420.43 148.599 419.936 148.417 cv
419.442 148.236 418.909 148.144 418.337 148.144 cv
417.765 148.144 417.232 148.236 416.738 148.417 cv
416.244 148.599 415.815 148.859 415.451 149.197 cv
415.087 149.535 414.801 149.945 414.593 150.426 cv
414.385 150.907 414.281 151.446 414.281 152.044 cv
cp
413.735 159.584 mo
413.735 158.726 li
422.939 158.726 li
422.939 159.584 li
cp
413.501 152.044 mo
413.501 151.342 413.622 150.699 413.865 150.114 cv
414.107 149.529 414.443 149.028 414.872 148.612 cv
415.301 148.196 415.81 147.871 416.4 147.637 cv
416.989 147.403 417.635 147.286 418.337 147.286 cv
419.039 147.286 419.687 147.403 420.28 147.637 cv
420.874 147.871 421.385 148.196 421.814 148.612 cv
422.243 149.028 422.577 149.529 422.815 150.114 cv
423.054 150.699 423.173 151.342 423.173 152.044 cv
423.173 152.746 423.054 153.39 422.815 153.975 cv
422.577 154.56 422.243 155.06 421.814 155.476 cv
421.385 155.892 420.874 156.217 420.28 156.451 cv
419.687 156.685 419.039 156.802 418.337 156.802 cv
417.635 156.802 416.989 156.685 416.4 156.451 cv
415.81 156.217 415.301 155.892 414.872 155.476 cv
414.443 155.06 414.107 154.56 413.865 153.975 cv
413.622 153.39 413.501 152.746 413.501 152.044 cv
cp
@
431.933 157.214 mo
431.933 156.434 li
437.939 156.434 li
437.939 157.214 li
cp
431.777 145.371 mo
431.777 144.877 431.868 144.45 432.05 144.09 cv
432.232 143.73 432.518 143.451 432.908 143.252 cv
433.324 143.954 li
433.046 144.101 432.836 144.285 432.693 144.506 cv
432.55 144.727 432.479 145.015 432.479 145.371 cv
432.479 145.509 432.5 145.655 432.544 145.806 cv
432.587 145.958 432.648 146.094 432.726 146.216 cv
432.804 146.337 432.903 146.439 433.025 146.521 cv
433.146 146.603 433.285 146.645 433.441 146.645 cv
433.709 146.645 433.909 146.556 434.039 146.378 cv
434.169 146.201 434.271 145.982 434.344 145.722 cv
434.418 145.462 434.481 145.176 434.533 144.864 cv
434.585 144.552 434.669 144.266 434.786 144.006 cv
434.903 143.746 435.072 143.527 435.293 143.349 cv
435.514 143.172 435.828 143.083 436.236 143.083 cv
436.548 143.083 436.819 143.141 437.048 143.258 cv
437.278 143.375 437.471 143.535 437.627 143.739 cv
437.783 143.943 437.9 144.175 437.978 144.435 cv
438.056 144.695 438.095 144.968 438.095 145.254 cv
438.095 145.774 437.995 146.248 437.796 146.677 cv
437.596 147.106 437.289 147.438 436.873 147.672 cv
436.405 146.983 li
436.725 146.818 436.97 146.575 437.139 146.255 cv
437.308 145.934 437.393 145.596 437.393 145.241 cv
437.393 145.076 437.367 144.911 437.315 144.747 cv
437.263 144.582 437.189 144.435 437.094 144.305 cv
436.998 144.175 436.884 144.069 436.749 143.986 cv
436.615 143.904 436.461 143.863 436.288 143.863 cv
436.01 143.863 435.802 143.952 435.664 144.129 cv
435.525 144.307 435.417 144.526 435.339 144.786 cv
435.261 145.046 435.194 145.332 435.137 145.644 cv
435.081 145.956 434.994 146.242 434.877 146.502 cv
434.76 146.762 434.598 146.98 434.39 147.158 cv
434.182 147.336 433.887 147.425 433.506 147.425 cv
433.211 147.425 432.955 147.364 432.739 147.243 cv
432.522 147.121 432.342 146.963 432.199 146.768 cv
432.056 146.573 431.95 146.354 431.881 146.112 cv
431.811 145.869 431.777 145.622 431.777 145.371 cv
cp
431.777 151.364 mo
431.777 150.896 431.85 150.514 431.998 150.22 cv
432.145 149.925 432.338 149.693 432.576 149.524 cv
432.815 149.355 433.09 149.238 433.402 149.173 cv
433.714 149.108 434.034 149.076 434.364 149.076 cv
437.939 149.076 li
437.939 149.856 li
434.403 149.856 li
434.16 149.856 433.924 149.877 433.694 149.921 cv
433.465 149.964 433.259 150.04 433.077 150.148 cv
432.895 150.257 432.75 150.408 432.641 150.603 cv
432.533 150.798 432.479 151.052 432.479 151.364 cv
432.479 151.65 432.529 151.921 432.628 152.176 cv
432.728 152.432 432.879 152.653 433.083 152.839 cv
433.287 153.026 433.543 153.173 433.85 153.281 cv
434.158 153.389 434.52 153.444 434.936 153.444 cv
437.939 153.444 li
437.939 154.224 li
433.623 154.224 li
433.51 154.224 433.374 154.228 433.213 154.237 cv
433.053 154.245 432.89 154.252 432.726 154.256 cv
432.561 154.26 432.407 154.267 432.264 154.276 cv
432.121 154.284 432.011 154.289 431.933 154.289 cv
431.933 153.509 li
432.158 153.5 432.375 153.493 432.583 153.489 cv
432.791 153.485 432.925 153.474 432.986 153.457 cv
432.986 153.418 li
432.656 153.262 432.372 153.002 432.134 152.638 cv
431.896 152.274 431.777 151.849 431.777 151.364 cv
cp
429.515 163.726 mo
432.791 163.726 li
432.791 161.776 li
432.791 161.534 432.763 161.295 432.706 161.061 cv
432.65 160.827 432.559 160.619 432.433 160.437 cv
432.307 160.255 432.141 160.108 431.933 159.995 cv
431.725 159.883 431.469 159.826 431.166 159.826 cv
430.871 159.826 430.62 159.885 430.412 160.002 cv
430.204 160.119 430.033 160.271 429.898 160.457 cv
429.764 160.643 429.666 160.858 429.606 161.1 cv
429.545 161.343 429.515 161.586 429.515 161.828 cv
cp
428.969 156.823 mo
428.969 156.659 429.025 156.52 429.138 156.408 cv
429.25 156.295 429.389 156.238 429.554 156.238 cv
429.718 156.238 429.857 156.295 429.97 156.408 cv
430.082 156.52 430.139 156.659 430.139 156.823 cv
430.139 156.988 430.082 157.127 429.97 157.24 cv
429.857 157.352 429.718 157.409 429.554 157.409 cv
429.389 157.409 429.25 157.352 429.138 157.24 cv
429.025 157.127 428.969 156.988 428.969 156.823 cv
cp
428.735 164.584 mo
428.735 161.932 li
428.735 161.612 428.772 161.276 428.845 160.925 cv
428.919 160.574 429.047 160.253 429.229 159.963 cv
429.411 159.673 429.66 159.434 429.976 159.248 cv
430.293 159.062 430.689 158.968 431.166 158.968 cv
431.582 158.968 431.941 159.044 432.245 159.196 cv
432.548 159.348 432.797 159.551 432.992 159.807 cv
433.187 160.063 433.332 160.357 433.428 160.691 cv
433.523 161.025 433.571 161.373 433.571 161.737 cv
433.571 163.726 li
437.939 163.726 li
437.939 164.584 li
cp
f
431.933 157.214 mo
431.933 156.434 li
437.939 156.434 li
437.939 157.214 li
cp
431.777 145.371 mo
431.777 144.877 431.868 144.45 432.05 144.09 cv
432.232 143.73 432.518 143.451 432.908 143.252 cv
433.324 143.954 li
433.046 144.101 432.836 144.285 432.693 144.506 cv
432.55 144.727 432.479 145.015 432.479 145.371 cv
432.479 145.509 432.5 145.654 432.544 145.806 cv
432.587 145.958 432.648 146.094 432.726 146.216 cv
432.804 146.337 432.903 146.439 433.025 146.521 cv
433.146 146.604 433.285 146.645 433.441 146.645 cv
433.709 146.645 433.909 146.556 434.039 146.378 cv
434.169 146.201 434.271 145.982 434.344 145.722 cv
434.418 145.462 434.481 145.176 434.533 144.864 cv
434.585 144.552 434.669 144.266 434.786 144.006 cv
434.903 143.746 435.072 143.527 435.293 143.349 cv
435.514 143.172 435.828 143.083 436.236 143.083 cv
436.548 143.083 436.818 143.141 437.048 143.258 cv
437.278 143.375 437.471 143.535 437.627 143.739 cv
437.783 143.943 437.9 144.175 437.978 144.435 cv
438.056 144.695 438.095 144.968 438.095 145.254 cv
438.095 145.774 437.995 146.248 437.796 146.677 cv
437.596 147.106 437.289 147.438 436.873 147.672 cv
436.405 146.983 li
436.725 146.818 436.97 146.575 437.139 146.255 cv
437.308 145.934 437.393 145.596 437.393 145.241 cv
437.393 145.076 437.367 144.911 437.315 144.747 cv
437.263 144.582 437.189 144.435 437.094 144.305 cv
436.998 144.175 436.883 144.068 436.749 143.986 cv
436.615 143.904 436.461 143.863 436.288 143.863 cv
436.01 143.863 435.802 143.951 435.664 144.129 cv
435.525 144.307 435.417 144.526 435.339 144.786 cv
435.261 145.046 435.193 145.332 435.137 145.644 cv
435.081 145.956 434.994 146.242 434.877 146.502 cv
434.76 146.762 434.598 146.98 434.39 147.158 cv
434.182 147.336 433.887 147.425 433.506 147.425 cv
433.211 147.425 432.955 147.364 432.739 147.243 cv
432.522 147.121 432.342 146.963 432.199 146.768 cv
432.056 146.573 431.95 146.354 431.881 146.112 cv
431.811 145.869 431.777 145.622 431.777 145.371 cv
cp
431.777 151.364 mo
431.777 150.896 431.85 150.514 431.998 150.22 cv
432.145 149.925 432.338 149.693 432.576 149.524 cv
432.815 149.355 433.09 149.238 433.402 149.173 cv
433.714 149.108 434.034 149.076 434.364 149.076 cv
437.939 149.076 li
437.939 149.856 li
434.403 149.856 li
434.16 149.856 433.924 149.877 433.694 149.921 cv
433.465 149.964 433.259 150.04 433.077 150.148 cv
432.895 150.257 432.75 150.408 432.641 150.603 cv
432.533 150.798 432.479 151.052 432.479 151.364 cv
432.479 151.65 432.529 151.921 432.628 152.176 cv
432.728 152.432 432.879 152.653 433.083 152.839 cv
433.287 153.025 433.543 153.173 433.85 153.281 cv
434.158 153.39 434.52 153.444 434.936 153.444 cv
437.939 153.444 li
437.939 154.224 li
433.623 154.224 li
433.51 154.224 433.374 154.228 433.213 154.237 cv
433.053 154.245 432.89 154.252 432.726 154.256 cv
432.561 154.26 432.407 154.267 432.264 154.276 cv
432.121 154.284 432.011 154.289 431.933 154.289 cv
431.933 153.509 li
432.158 153.5 432.375 153.493 432.583 153.489 cv
432.791 153.485 432.925 153.474 432.986 153.457 cv
432.986 153.418 li
432.656 153.262 432.373 153.002 432.134 152.638 cv
431.896 152.274 431.777 151.849 431.777 151.364 cv
cp
429.515 163.726 mo
432.791 163.726 li
432.791 161.776 li
432.791 161.534 432.763 161.295 432.706 161.061 cv
432.65 160.827 432.559 160.619 432.433 160.437 cv
432.307 160.255 432.141 160.108 431.933 159.995 cv
431.725 159.883 431.469 159.826 431.166 159.826 cv
430.871 159.826 430.62 159.885 430.412 160.002 cv
430.204 160.119 430.033 160.271 429.898 160.457 cv
429.764 160.643 429.666 160.858 429.606 161.1 cv
429.545 161.343 429.515 161.586 429.515 161.828 cv
cp
428.969 156.824 mo
428.969 156.659 429.025 156.52 429.138 156.408 cv
429.25 156.295 429.389 156.239 429.554 156.239 cv
429.718 156.239 429.857 156.295 429.97 156.408 cv
430.082 156.52 430.139 156.659 430.139 156.824 cv
430.139 156.988 430.082 157.127 429.97 157.24 cv
429.857 157.352 429.718 157.409 429.554 157.409 cv
429.389 157.409 429.25 157.352 429.138 157.24 cv
429.025 157.127 428.969 156.988 428.969 156.824 cv
cp
428.735 164.584 mo
428.735 161.932 li
428.735 161.612 428.772 161.276 428.845 160.925 cv
428.919 160.574 429.047 160.253 429.229 159.963 cv
429.411 159.673 429.66 159.434 429.976 159.248 cv
430.293 159.062 430.689 158.968 431.166 158.968 cv
431.582 158.968 431.941 159.044 432.245 159.196 cv
432.548 159.348 432.797 159.551 432.992 159.807 cv
433.187 160.063 433.332 160.357 433.428 160.691 cv
433.523 161.025 433.571 161.373 433.571 161.737 cv
433.571 163.726 li
437.939 163.726 li
437.939 164.584 li
cp
@
3 lw
408.111 48.6342 mo
395.807 48.1905 li
1 .927642 .0572518 .118349 cmyk
@
401.64 52.9037 mo
392.808 48.0823 li
401.965 43.9096 li
cp
ef
286.008 153.977 mo
234.795 153.977 li
@
280.008 158.477 mo
289.008 153.977 li
280.008 149.477 li
280.008 158.477 li
ef
240.795 149.477 mo
231.795 153.977 li
240.795 158.477 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
GLGSFD+ArialMT*1 [13 0 0 -13 0 0 ]msf369.667 94.3231 mo(Step  )[8.67108 3.61139 7.23062 7.23059 3.61139 0 ]xsh359.667 109.323 mo(Counter )[9.38858 7.23059 7.23062 7.23059 3.61139 7.23059 4.32892 0 ]xsh344.175 181.502 mo
298.183 181.502 li
293.116 181.502 289.008 177.394 289.008 172.327 cv
289.008 135.627 li
289.008 130.56 293.116 126.452 298.183 126.452 cv
344.175 126.452 li
349.243 126.452 353.351 130.56 353.351 135.627 cv
353.351 172.327 li
353.351 177.394 349.243 181.502 344.175 181.502 cv
.0352941 .0117647 0 0 cmyk
f
1 lw
344.175 126.452 mo
349.243 126.452 353.351 130.56 353.351 135.627 cv
353.351 172.327 li
353.351 177.394 349.243 181.502 344.175 181.502 cv
298.183 181.502 li
293.116 181.502 289.008 177.394 289.008 172.327 cv
289.008 135.627 li
289.008 130.56 293.116 126.452 298.183 126.452 cv
cp
.750271 .679713 .654902 .901945 cmyk
@
323.11 142.719 mo
322.512 142.719 321.973 142.823 321.492 143.031 cv
321.011 143.239 320.601 143.525 320.263 143.889 cv
319.925 144.253 319.665 144.682 319.483 145.176 cv
319.301 145.67 319.21 146.203 319.21 146.775 cv
319.21 147.347 319.301 147.88 319.483 148.374 cv
319.665 148.868 319.925 149.297 320.263 149.661 cv
320.601 150.025 321.011 150.311 321.492 150.519 cv
321.973 150.727 322.512 150.831 323.11 150.831 cv
323.708 150.831 324.248 150.727 324.729 150.519 cv
325.21 150.311 325.619 150.025 325.957 149.661 cv
326.295 149.297 326.555 148.868 326.737 148.374 cv
326.919 147.88 327.01 147.347 327.01 146.775 cv
327.01 146.203 326.919 145.67 326.737 145.176 cv
326.555 144.682 326.295 144.253 325.957 143.889 cv
325.619 143.525 325.21 143.239 324.729 143.031 cv
324.248 142.823 323.708 142.719 323.11 142.719 cv
cp
315.57 142.173 mo
316.428 142.173 li
316.428 151.377 li
315.57 151.377 li
cp
323.11 141.939 mo
323.812 141.939 324.456 142.06 325.041 142.303 cv
325.626 142.546 326.126 142.882 326.542 143.311 cv
326.958 143.74 327.283 144.249 327.517 144.838 cv
327.751 145.427 327.868 146.073 327.868 146.775 cv
327.868 147.477 327.751 148.125 327.517 148.719 cv
327.283 149.312 326.958 149.824 326.542 150.253 cv
326.126 150.682 325.626 151.015 325.041 151.254 cv
324.456 151.492 323.812 151.611 323.11 151.611 cv
322.408 151.611 321.765 151.492 321.18 151.254 cv
320.595 151.015 320.094 150.682 319.678 150.253 cv
319.262 149.824 318.937 149.312 318.703 148.719 cv
318.469 148.125 318.352 147.477 318.352 146.775 cv
318.352 146.073 318.469 145.427 318.703 144.838 cv
318.937 144.249 319.262 143.74 319.678 143.311 cv
320.094 142.882 320.595 142.546 321.18 142.303 cv
321.765 142.06 322.408 141.939 323.11 141.939 cv
cp
f
323.11 142.719 mo
322.512 142.719 321.973 142.823 321.492 143.031 cv
321.011 143.239 320.601 143.525 320.263 143.889 cv
319.925 144.253 319.665 144.682 319.483 145.176 cv
319.301 145.67 319.21 146.203 319.21 146.775 cv
319.21 147.347 319.301 147.88 319.483 148.374 cv
319.665 148.868 319.925 149.297 320.263 149.661 cv
320.601 150.025 321.011 150.311 321.492 150.519 cv
321.973 150.727 322.512 150.831 323.11 150.831 cv
323.708 150.831 324.248 150.727 324.729 150.519 cv
325.21 150.311 325.619 150.025 325.957 149.661 cv
326.295 149.297 326.555 148.868 326.737 148.374 cv
326.919 147.88 327.01 147.347 327.01 146.775 cv
327.01 146.203 326.919 145.67 326.737 145.176 cv
326.555 144.682 326.295 144.253 325.957 143.889 cv
325.619 143.525 325.21 143.239 324.729 143.031 cv
324.248 142.823 323.708 142.719 323.11 142.719 cv
cp
315.57 142.173 mo
316.428 142.173 li
316.428 151.377 li
315.57 151.377 li
cp
323.11 141.939 mo
323.812 141.939 324.456 142.06 325.041 142.303 cv
325.626 142.546 326.126 142.882 326.542 143.311 cv
326.958 143.74 327.283 144.249 327.517 144.838 cv
327.751 145.427 327.868 146.073 327.868 146.775 cv
327.868 147.477 327.751 148.125 327.517 148.719 cv
327.283 149.312 326.958 149.824 326.542 150.253 cv
326.126 150.682 325.626 151.015 325.041 151.254 cv
324.456 151.492 323.812 151.611 323.11 151.611 cv
322.408 151.611 321.765 151.492 321.18 151.254 cv
320.595 151.015 320.094 150.682 319.678 150.253 cv
319.262 149.824 318.937 149.312 318.703 148.719 cv
318.469 148.125 318.352 147.477 318.352 146.775 cv
318.352 146.073 318.469 145.427 318.703 144.838 cv
318.937 144.249 319.262 143.74 319.678 143.311 cv
320.094 142.882 320.595 142.546 321.18 142.303 cv
321.765 142.06 322.408 141.939 323.11 141.939 cv
cp
@
303.552 161.931 mo
303.552 165.597 li
305.515 165.597 li
306.017 165.597 306.423 165.536 306.73 165.415 cv
307.038 165.294 307.274 165.142 307.439 164.96 cv
307.603 164.778 307.714 164.585 307.77 164.382 cv
307.827 164.178 307.855 163.994 307.855 163.829 cv
307.855 163.491 307.79 163.201 307.66 162.958 cv
307.53 162.715 307.361 162.518 307.153 162.367 cv
306.945 162.215 306.709 162.104 306.444 162.035 cv
306.18 161.966 305.914 161.931 305.645 161.931 cv
cp
327.978 160.917 mo
327.554 160.917 327.201 161.004 326.919 161.177 cv
326.637 161.35 326.414 161.55 326.25 161.775 cv
326.085 162 325.968 162.219 325.898 162.432 cv
325.829 162.644 325.794 162.789 325.794 162.867 cv
330.059 162.867 li
330.059 162.598 330.004 162.347 329.896 162.113 cv
329.788 161.879 329.64 161.673 329.454 161.496 cv
329.268 161.318 329.047 161.177 328.791 161.073 cv
328.535 160.969 328.264 160.917 327.978 160.917 cv
cp
310.598 160.371 mo
311.378 160.371 li
311.378 163.907 li
311.378 164.15 311.399 164.386 311.443 164.616 cv
311.486 164.845 311.562 165.051 311.67 165.233 cv
311.779 165.415 311.93 165.56 312.125 165.669 cv
312.32 165.777 312.574 165.831 312.886 165.831 cv
313.172 165.831 313.443 165.781 313.698 165.682 cv
313.954 165.582 314.175 165.43 314.361 165.227 cv
314.548 165.023 314.695 164.767 314.803 164.46 cv
314.912 164.152 314.966 163.79 314.966 163.374 cv
314.966 160.371 li
315.746 160.371 li
315.746 164.687 li
315.746 164.8 315.75 164.936 315.759 165.097 cv
315.767 165.257 315.774 165.419 315.778 165.584 cv
315.783 165.749 315.789 165.903 315.798 166.046 cv
315.806 166.189 315.811 166.299 315.811 166.377 cv
315.031 166.377 li
315.022 166.152 315.016 165.935 315.011 165.727 cv
315.007 165.519 314.996 165.385 314.979 165.324 cv
314.94 165.324 li
314.784 165.653 314.524 165.937 314.16 166.176 cv
313.796 166.414 313.371 166.533 312.886 166.533 cv
312.418 166.533 312.034 166.459 311.735 166.312 cv
311.436 166.165 311.202 165.972 311.033 165.734 cv
310.864 165.495 310.749 165.22 310.689 164.908 cv
310.628 164.596 310.598 164.275 310.598 163.946 cv
cp
338.534 160.215 mo
339.028 160.215 339.455 160.306 339.815 160.488 cv
340.175 160.67 340.454 160.956 340.653 161.346 cv
339.951 161.762 li
339.804 161.485 339.62 161.275 339.399 161.132 cv
339.178 160.989 338.89 160.917 338.534 160.917 cv
338.396 160.917 338.251 160.939 338.099 160.982 cv
337.947 161.025 337.811 161.086 337.689 161.164 cv
337.568 161.242 337.466 161.342 337.384 161.463 cv
337.302 161.584 337.26 161.723 337.26 161.879 cv
337.26 162.148 337.349 162.347 337.527 162.477 cv
337.705 162.607 337.923 162.709 338.183 162.783 cv
338.443 162.856 338.729 162.919 339.041 162.971 cv
339.353 163.023 339.639 163.108 339.899 163.225 cv
340.159 163.342 340.378 163.511 340.556 163.732 cv
340.734 163.953 340.822 164.267 340.822 164.674 cv
340.822 164.986 340.764 165.257 340.647 165.487 cv
340.53 165.716 340.37 165.909 340.166 166.065 cv
339.962 166.221 339.73 166.338 339.47 166.416 cv
339.21 166.494 338.937 166.533 338.651 166.533 cv
338.131 166.533 337.657 166.433 337.228 166.234 cv
336.799 166.035 336.467 165.727 336.233 165.311 cv
336.922 164.843 li
337.087 165.164 337.33 165.409 337.65 165.578 cv
337.971 165.747 338.309 165.831 338.664 165.831 cv
338.829 165.831 338.994 165.805 339.158 165.753 cv
339.323 165.701 339.47 165.627 339.6 165.532 cv
339.73 165.437 339.837 165.322 339.919 165.188 cv
340.001 165.053 340.042 164.899 340.042 164.726 cv
340.042 164.449 339.954 164.241 339.776 164.102 cv
339.598 163.963 339.379 163.855 339.119 163.777 cv
338.859 163.699 338.573 163.632 338.261 163.576 cv
337.949 163.519 337.663 163.433 337.403 163.316 cv
337.143 163.199 336.925 163.036 336.747 162.828 cv
336.569 162.62 336.48 162.325 336.48 161.944 cv
336.48 161.649 336.541 161.394 336.662 161.177 cv
336.784 160.96 336.942 160.781 337.137 160.638 cv
337.332 160.495 337.551 160.388 337.793 160.319 cv
338.036 160.25 338.283 160.215 338.534 160.215 cv
cp
335.259 160.215 mo
335.486 160.235 li
335.714 160.28 li
335.622 161.047 li
335.518 161.012 335.419 160.995 335.323 160.995 cv
334.986 160.995 334.693 161.049 334.446 161.158 cv
334.199 161.266 333.995 161.415 333.835 161.606 cv
333.675 161.797 333.556 162.02 333.478 162.276 cv
333.4 162.531 333.361 162.806 333.361 163.101 cv
333.361 166.377 li
332.581 166.377 li
332.581 162.061 li
332.581 161.948 332.576 161.812 332.568 161.652 cv
332.559 161.491 332.552 161.329 332.548 161.164 cv
332.544 160.999 332.537 160.846 332.529 160.703 cv
332.52 160.56 332.516 160.449 332.516 160.371 cv
333.296 160.371 li
333.304 160.596 333.311 160.813 333.315 161.021 cv
333.319 161.229 333.33 161.363 333.348 161.424 cv
333.547 161.069 333.802 160.778 334.115 160.553 cv
334.427 160.328 334.808 160.215 335.259 160.215 cv
cp
328.017 160.215 mo
328.477 160.215 328.882 160.295 329.233 160.456 cv
329.584 160.616 329.879 160.828 330.117 161.093 cv
330.355 161.357 330.535 161.658 330.656 161.996 cv
330.778 162.334 330.839 162.676 330.839 163.023 cv
330.839 163.569 li
325.794 163.569 li
325.794 163.734 325.827 163.944 325.892 164.2 cv
325.957 164.455 326.076 164.704 326.25 164.947 cv
326.423 165.19 326.655 165.398 326.945 165.571 cv
327.235 165.744 327.61 165.831 328.069 165.831 cv
328.468 165.831 328.854 165.736 329.227 165.545 cv
329.599 165.354 329.885 165.094 330.085 164.765 cv
330.656 165.246 li
330.353 165.705 329.978 166.035 329.532 166.234 cv
329.086 166.433 328.594 166.533 328.056 166.533 cv
327.597 166.533 327.181 166.455 326.809 166.299 cv
326.436 166.143 326.115 165.924 325.846 165.643 cv
325.578 165.361 325.372 165.027 325.229 164.642 cv
325.086 164.256 325.014 163.829 325.014 163.361 cv
325.014 162.91 325.088 162.494 325.236 162.113 cv
325.383 161.732 325.591 161.4 325.859 161.119 cv
326.128 160.837 326.444 160.616 326.809 160.456 cv
327.172 160.295 327.576 160.215 328.017 160.215 cv
cp
303.552 157.953 mo
303.552 161.151 li
305.333 161.151 li
305.775 161.151 306.135 161.097 306.412 160.989 cv
306.689 160.88 306.906 160.748 307.062 160.592 cv
307.218 160.436 307.322 160.269 307.374 160.092 cv
307.426 159.914 307.452 159.751 307.452 159.604 cv
307.452 159.283 307.398 159.017 307.289 158.805 cv
307.181 158.592 307.036 158.423 306.854 158.298 cv
306.672 158.172 306.46 158.083 306.217 158.031 cv
305.974 157.979 305.719 157.953 305.45 157.953 cv
cp
302.694 157.173 mo
305.346 157.173 li
305.693 157.173 306.043 157.201 306.399 157.258 cv
306.754 157.314 307.073 157.431 307.354 157.609 cv
307.636 157.786 307.866 158.033 308.043 158.35 cv
308.221 158.666 308.31 159.084 308.31 159.604 cv
308.31 160.072 308.171 160.479 307.894 160.826 cv
307.616 161.173 307.205 161.402 306.659 161.515 cv
306.659 161.541 li
306.962 161.567 307.24 161.639 307.491 161.756 cv
307.742 161.873 307.959 162.029 308.141 162.224 cv
308.323 162.419 308.464 162.65 308.563 162.919 cv
308.663 163.188 308.713 163.482 308.713 163.803 cv
308.713 164.332 308.611 164.763 308.407 165.097 cv
308.204 165.43 307.948 165.692 307.64 165.883 cv
307.333 166.074 306.999 166.204 306.639 166.273 cv
306.28 166.342 305.944 166.377 305.632 166.377 cv
302.694 166.377 li
cp
323.741 156.393 mo
324.105 156.393 324.404 156.445 324.638 156.549 cv
324.482 157.225 li
324.308 157.138 324.074 157.095 323.78 157.095 cv
323.078 157.095 322.727 157.628 322.727 158.694 cv
322.727 160.371 li
324.131 160.371 li
324.131 161.073 li
322.727 161.073 li
322.727 166.377 li
321.947 166.377 li
321.947 161.073 li
320.699 161.073 li
320.699 160.371 li
321.947 160.371 li
321.947 158.408 li
321.947 158.018 322.005 157.695 322.122 157.44 cv
322.239 157.184 322.384 156.978 322.558 156.822 cv
322.731 156.666 322.924 156.556 323.136 156.491 cv
323.348 156.426 323.55 156.393 323.741 156.393 cv
cp
320.127 156.393 mo
320.491 156.393 320.79 156.445 321.024 156.549 cv
320.868 157.225 li
320.694 157.138 320.46 157.095 320.166 157.095 cv
319.464 157.095 319.113 157.628 319.113 158.694 cv
319.113 160.371 li
320.517 160.371 li
320.517 161.073 li
319.113 161.073 li
319.113 166.377 li
318.333 166.377 li
318.333 161.073 li
317.085 161.073 li
317.085 160.371 li
318.333 160.371 li
318.333 158.408 li
318.333 158.018 318.391 157.695 318.508 157.44 cv
318.625 157.184 318.77 156.978 318.944 156.822 cv
319.117 156.666 319.31 156.556 319.522 156.491 cv
319.735 156.426 319.936 156.393 320.127 156.393 cv
cp
f
303.552 161.931 mo
303.552 165.597 li
305.515 165.597 li
306.018 165.597 306.423 165.536 306.73 165.415 cv
307.038 165.294 307.274 165.142 307.439 164.96 cv
307.604 164.778 307.714 164.585 307.77 164.382 cv
307.827 164.178 307.855 163.994 307.855 163.829 cv
307.855 163.491 307.79 163.201 307.66 162.958 cv
307.53 162.715 307.361 162.518 307.153 162.367 cv
306.945 162.215 306.709 162.104 306.444 162.035 cv
306.18 161.966 305.914 161.931 305.645 161.931 cv
cp
327.979 160.917 mo
327.554 160.917 327.201 161.004 326.919 161.177 cv
326.637 161.35 326.414 161.55 326.25 161.775 cv
326.085 162 325.968 162.219 325.898 162.432 cv
325.829 162.644 325.794 162.789 325.794 162.867 cv
330.059 162.867 li
330.059 162.598 330.004 162.347 329.896 162.113 cv
329.788 161.879 329.64 161.673 329.454 161.496 cv
329.268 161.318 329.047 161.177 328.791 161.073 cv
328.535 160.969 328.264 160.917 327.979 160.917 cv
cp
310.598 160.371 mo
311.378 160.371 li
311.378 163.907 li
311.378 164.15 311.399 164.386 311.443 164.616 cv
311.486 164.845 311.562 165.051 311.67 165.233 cv
311.779 165.415 311.93 165.56 312.125 165.669 cv
312.32 165.777 312.574 165.831 312.886 165.831 cv
313.172 165.831 313.443 165.781 313.698 165.682 cv
313.954 165.582 314.175 165.43 314.361 165.227 cv
314.548 165.023 314.695 164.767 314.803 164.46 cv
314.912 164.152 314.966 163.79 314.966 163.374 cv
314.966 160.371 li
315.746 160.371 li
315.746 164.687 li
315.746 164.8 315.75 164.936 315.759 165.097 cv
315.767 165.257 315.774 165.419 315.778 165.584 cv
315.783 165.749 315.789 165.903 315.798 166.046 cv
315.806 166.189 315.811 166.299 315.811 166.377 cv
315.031 166.377 li
315.022 166.152 315.016 165.935 315.011 165.727 cv
315.007 165.519 314.996 165.385 314.979 165.324 cv
314.94 165.324 li
314.784 165.653 314.524 165.937 314.16 166.176 cv
313.796 166.414 313.371 166.533 312.886 166.533 cv
312.418 166.533 312.034 166.459 311.735 166.312 cv
311.436 166.165 311.202 165.972 311.033 165.734 cv
310.864 165.495 310.749 165.22 310.689 164.908 cv
310.628 164.596 310.598 164.275 310.598 163.946 cv
cp
338.534 160.215 mo
339.028 160.215 339.455 160.306 339.815 160.488 cv
340.175 160.67 340.454 160.956 340.653 161.346 cv
339.951 161.762 li
339.804 161.485 339.62 161.275 339.399 161.132 cv
339.178 160.989 338.89 160.917 338.534 160.917 cv
338.396 160.917 338.251 160.939 338.099 160.982 cv
337.947 161.025 337.811 161.086 337.689 161.164 cv
337.568 161.242 337.466 161.342 337.384 161.463 cv
337.302 161.584 337.26 161.723 337.26 161.879 cv
337.26 162.148 337.349 162.347 337.527 162.477 cv
337.705 162.607 337.923 162.709 338.183 162.783 cv
338.443 162.856 338.729 162.919 339.041 162.971 cv
339.353 163.023 339.639 163.108 339.899 163.225 cv
340.159 163.342 340.378 163.511 340.556 163.732 cv
340.734 163.953 340.822 164.267 340.822 164.674 cv
340.822 164.986 340.764 165.257 340.647 165.487 cv
340.53 165.716 340.37 165.909 340.166 166.065 cv
339.962 166.221 339.73 166.338 339.47 166.416 cv
339.21 166.494 338.937 166.533 338.651 166.533 cv
338.131 166.533 337.657 166.433 337.228 166.234 cv
336.799 166.035 336.467 165.727 336.233 165.311 cv
336.922 164.843 li
337.087 165.164 337.33 165.409 337.65 165.578 cv
337.971 165.747 338.309 165.831 338.664 165.831 cv
338.829 165.831 338.994 165.805 339.158 165.753 cv
339.323 165.701 339.47 165.627 339.6 165.532 cv
339.73 165.437 339.837 165.322 339.919 165.188 cv
340.001 165.053 340.042 164.899 340.042 164.726 cv
340.042 164.449 339.954 164.241 339.776 164.102 cv
339.598 163.963 339.379 163.855 339.119 163.777 cv
338.859 163.699 338.573 163.632 338.261 163.576 cv
337.949 163.519 337.663 163.433 337.403 163.316 cv
337.143 163.199 336.925 163.036 336.747 162.828 cv
336.569 162.62 336.48 162.325 336.48 161.944 cv
336.48 161.649 336.541 161.394 336.662 161.177 cv
336.784 160.96 336.942 160.781 337.137 160.638 cv
337.332 160.495 337.551 160.388 337.793 160.319 cv
338.036 160.25 338.283 160.215 338.534 160.215 cv
cp
335.258 160.215 mo
335.486 160.235 li
335.714 160.28 li
335.622 161.047 li
335.518 161.012 335.419 160.995 335.323 160.995 cv
334.986 160.995 334.693 161.049 334.446 161.158 cv
334.199 161.266 333.995 161.415 333.835 161.606 cv
333.675 161.797 333.555 162.02 333.477 162.276 cv
333.4 162.531 333.361 162.806 333.361 163.101 cv
333.361 166.377 li
332.581 166.377 li
332.581 162.061 li
332.581 161.948 332.576 161.812 332.568 161.652 cv
332.559 161.491 332.552 161.329 332.548 161.164 cv
332.544 160.999 332.537 160.846 332.529 160.703 cv
332.52 160.56 332.516 160.449 332.516 160.371 cv
333.296 160.371 li
333.304 160.596 333.311 160.813 333.315 161.021 cv
333.319 161.229 333.33 161.363 333.348 161.424 cv
333.547 161.069 333.802 160.778 334.115 160.553 cv
334.427 160.328 334.808 160.215 335.258 160.215 cv
cp
328.017 160.215 mo
328.477 160.215 328.882 160.295 329.233 160.456 cv
329.584 160.616 329.879 160.828 330.117 161.093 cv
330.355 161.357 330.535 161.658 330.656 161.996 cv
330.778 162.334 330.839 162.676 330.839 163.023 cv
330.839 163.569 li
325.794 163.569 li
325.794 163.734 325.827 163.944 325.892 164.2 cv
325.957 164.455 326.076 164.704 326.25 164.947 cv
326.423 165.19 326.655 165.398 326.945 165.571 cv
327.235 165.744 327.61 165.831 328.069 165.831 cv
328.468 165.831 328.854 165.736 329.227 165.545 cv
329.599 165.354 329.885 165.094 330.085 164.765 cv
330.656 165.246 li
330.353 165.705 329.978 166.035 329.532 166.234 cv
329.086 166.433 328.594 166.533 328.056 166.533 cv
327.597 166.533 327.181 166.455 326.809 166.299 cv
326.436 166.143 326.115 165.924 325.846 165.643 cv
325.578 165.361 325.372 165.027 325.229 164.642 cv
325.086 164.256 325.014 163.829 325.014 163.361 cv
325.014 162.91 325.088 162.494 325.236 162.113 cv
325.383 161.732 325.591 161.4 325.859 161.119 cv
326.128 160.837 326.444 160.616 326.809 160.456 cv
327.172 160.295 327.576 160.215 328.017 160.215 cv
cp
303.552 157.953 mo
303.552 161.151 li
305.333 161.151 li
305.775 161.151 306.135 161.097 306.412 160.989 cv
306.689 160.88 306.906 160.748 307.062 160.592 cv
307.218 160.436 307.322 160.269 307.374 160.092 cv
307.426 159.914 307.452 159.751 307.452 159.604 cv
307.452 159.283 307.398 159.017 307.289 158.805 cv
307.181 158.592 307.036 158.423 306.854 158.298 cv
306.672 158.172 306.46 158.083 306.217 158.031 cv
305.974 157.979 305.719 157.953 305.45 157.953 cv
cp
302.694 157.173 mo
305.346 157.173 li
305.693 157.173 306.044 157.201 306.399 157.258 cv
306.754 157.314 307.073 157.431 307.354 157.609 cv
307.636 157.786 307.866 158.033 308.043 158.35 cv
308.221 158.666 308.31 159.084 308.31 159.604 cv
308.31 160.072 308.171 160.479 307.894 160.826 cv
307.617 161.173 307.205 161.402 306.659 161.515 cv
306.659 161.541 li
306.962 161.567 307.24 161.639 307.491 161.756 cv
307.742 161.873 307.959 162.029 308.141 162.224 cv
308.323 162.419 308.464 162.65 308.563 162.919 cv
308.663 163.188 308.713 163.482 308.713 163.803 cv
308.713 164.332 308.611 164.763 308.407 165.097 cv
308.204 165.43 307.948 165.692 307.64 165.883 cv
307.333 166.074 306.999 166.204 306.639 166.273 cv
306.28 166.342 305.944 166.377 305.632 166.377 cv
302.694 166.377 li
cp
323.741 156.393 mo
324.105 156.393 324.404 156.445 324.638 156.549 cv
324.482 157.225 li
324.308 157.138 324.074 157.095 323.78 157.095 cv
323.078 157.095 322.727 157.628 322.727 158.694 cv
322.727 160.371 li
324.131 160.371 li
324.131 161.073 li
322.727 161.073 li
322.727 166.377 li
321.947 166.377 li
321.947 161.073 li
320.699 161.073 li
320.699 160.371 li
321.947 160.371 li
321.947 158.408 li
321.947 158.018 322.005 157.695 322.122 157.44 cv
322.239 157.184 322.384 156.978 322.558 156.822 cv
322.731 156.666 322.924 156.556 323.136 156.491 cv
323.348 156.426 323.55 156.393 323.741 156.393 cv
cp
320.127 156.393 mo
320.491 156.393 320.79 156.445 321.024 156.549 cv
320.868 157.225 li
320.694 157.138 320.46 157.095 320.166 157.095 cv
319.464 157.095 319.113 157.628 319.113 158.694 cv
319.113 160.371 li
320.517 160.371 li
320.517 161.073 li
319.113 161.073 li
319.113 166.377 li
318.333 166.377 li
318.333 161.073 li
317.085 161.073 li
317.085 160.371 li
318.333 160.371 li
318.333 158.408 li
318.333 158.018 318.391 157.695 318.508 157.44 cv
318.625 157.184 318.77 156.978 318.944 156.822 cv
319.117 156.666 319.31 156.556 319.522 156.491 cv
319.735 156.426 319.936 156.393 320.127 156.393 cv
cp
@
3 lw
405.568 153.977 mo
356.351 153.977 li
1 .927642 .0572518 .118349 cmyk
@
399.568 158.477 mo
408.568 153.977 li
399.568 149.477 li
cp
ef
362.351 149.477 mo
353.351 153.977 li
362.351 158.477 li
cp
ef
336.81 71.5616 mo
263.359 71.5616 li
263.359 24.3046 li
336.81 24.3046 li
336.81 71.5616 li
.0352941 .0117647 0 0 cmyk
f
1 lw
263.359 24.3046 mo
336.81 24.3046 li
336.81 71.5616 li
263.359 71.5616 li
cp
.750271 .679713 .654902 .901945 cmyk
@
330.151 32.0731 mo
329.787 32.0731 329.457 32.1381 329.163 32.2681 cv
328.868 32.3981 328.617 32.5736 328.409 32.7946 cv
328.201 33.0156 328.042 33.2756 327.934 33.5746 cv
327.826 33.8736 327.772 34.1921 327.772 34.5301 cv
327.772 34.8681 327.826 35.1866 327.934 35.4856 cv
328.042 35.7846 328.201 36.0446 328.409 36.2656 cv
328.617 36.4866 328.868 36.6621 329.163 36.7921 cv
329.457 36.9221 329.787 36.9871 330.151 36.9871 cv
330.506 36.9871 330.835 36.9221 331.139 36.7921 cv
331.442 36.6621 331.706 36.4866 331.932 36.2656 cv
332.157 36.0446 332.335 35.7846 332.465 35.4856 cv
332.595 35.1866 332.66 34.8681 332.66 34.5301 cv
332.66 34.1921 332.595 33.8736 332.465 33.5746 cv
332.335 33.2756 332.157 33.0156 331.932 32.7946 cv
331.706 32.5736 331.442 32.3981 331.139 32.2681 cv
330.835 32.1381 330.506 32.0731 330.151 32.0731 cv
cp
322.728 32.0731 mo
322.303 32.0731 321.95 32.1598 321.668 32.3331 cv
321.386 32.5064 321.163 32.7057 320.999 32.9311 cv
320.834 33.1564 320.717 33.3752 320.648 33.5876 cv
320.578 33.7999 320.544 33.9451 320.544 34.0231 cv
324.808 34.0231 li
324.808 33.7544 324.753 33.5031 324.645 33.2691 cv
324.537 33.0351 324.389 32.8293 324.203 32.6516 cv
324.017 32.4739 323.796 32.3331 323.54 32.2291 cv
323.284 32.1251 323.014 32.0731 322.728 32.0731 cv
cp
295.467 32.0731 mo
295.103 32.0731 294.774 32.1381 294.479 32.2681 cv
294.184 32.3981 293.933 32.5736 293.725 32.7946 cv
293.517 33.0156 293.359 33.2756 293.25 33.5746 cv
293.142 33.8736 293.088 34.1921 293.088 34.5301 cv
293.088 34.8681 293.142 35.1866 293.25 35.4856 cv
293.359 35.7846 293.517 36.0446 293.725 36.2656 cv
293.933 36.4866 294.184 36.6621 294.479 36.7921 cv
294.774 36.9221 295.103 36.9871 295.467 36.9871 cv
295.831 36.9871 296.16 36.9221 296.455 36.7921 cv
296.75 36.6621 297.001 36.4866 297.209 36.2656 cv
297.417 36.0446 297.575 35.7846 297.684 35.4856 cv
297.792 35.1866 297.846 34.8681 297.846 34.5301 cv
297.846 34.1921 297.792 33.8736 297.684 33.5746 cv
297.575 33.2756 297.417 33.0156 297.209 32.7946 cv
297.001 32.5736 296.75 32.3981 296.455 32.2681 cv
296.16 32.1381 295.831 32.0731 295.467 32.0731 cv
cp
314.057 31.5271 mo
318.555 31.5271 li
318.555 31.9951 li
314.967 36.8311 li
318.711 36.8311 li
318.711 37.5331 li
313.875 37.5331 li
313.875 37.0651 li
317.476 32.2291 li
314.057 32.2291 li
cp
311.574 31.5271 mo
312.354 31.5271 li
312.354 37.5331 li
311.574 37.5331 li
cp
275.486 31.5271 mo
276.266 31.5271 li
276.266 35.0631 li
276.266 35.3058 276.288 35.5419 276.331 35.7716 cv
276.375 36.0013 276.45 36.2071 276.559 36.3891 cv
276.667 36.5711 276.819 36.7162 277.014 36.8246 cv
277.209 36.9329 277.462 36.9871 277.774 36.9871 cv
278.06 36.9871 278.331 36.9373 278.587 36.8376 cv
278.842 36.7379 279.063 36.5862 279.25 36.3826 cv
279.436 36.1789 279.583 35.9232 279.692 35.6156 cv
279.8 35.3079 279.854 34.9461 279.854 34.5301 cv
279.854 31.5271 li
280.634 31.5271 li
280.634 35.8431 li
280.634 35.9557 280.638 36.0923 280.647 36.2526 cv
280.656 36.4129 280.662 36.5754 280.667 36.7401 cv
280.671 36.9048 280.677 37.0586 280.686 37.2016 cv
280.695 37.3446 280.699 37.4551 280.699 37.5331 cv
279.919 37.5331 li
279.91 37.3077 279.904 37.0911 279.9 36.8831 cv
279.895 36.6751 279.884 36.5407 279.867 36.4801 cv
279.828 36.4801 li
279.672 36.8094 279.412 37.0933 279.048 37.3316 cv
278.684 37.5699 278.259 37.6891 277.774 37.6891 cv
277.306 37.6891 276.923 37.6154 276.624 37.4681 cv
276.325 37.3207 276.091 37.1279 275.922 36.8896 cv
275.753 36.6512 275.638 36.3761 275.577 36.0641 cv
275.517 35.7521 275.486 35.4314 275.486 35.1021 cv
cp
322.767 31.3711 mo
323.226 31.3711 323.631 31.4512 323.982 31.6116 cv
324.333 31.7719 324.628 31.9843 324.866 32.2486 cv
325.104 32.5129 325.284 32.8141 325.406 33.1521 cv
325.527 33.4901 325.588 33.8324 325.588 34.1791 cv
325.588 34.7251 li
320.544 34.7251 li
320.544 34.8897 320.576 35.0999 320.641 35.3556 cv
320.706 35.6112 320.825 35.8604 320.999 36.1031 cv
321.172 36.3457 321.404 36.5537 321.694 36.7271 cv
321.984 36.9004 322.359 36.9871 322.819 36.9871 cv
323.217 36.9871 323.603 36.8918 323.976 36.7011 cv
324.348 36.5104 324.634 36.2504 324.834 35.9211 cv
325.406 36.4021 li
325.102 36.8614 324.727 37.1907 324.281 37.3901 cv
323.835 37.5894 323.343 37.6891 322.806 37.6891 cv
322.346 37.6891 321.93 37.6111 321.558 37.4551 cv
321.185 37.2991 320.864 37.0803 320.596 36.7986 cv
320.327 36.5169 320.121 36.1833 319.978 35.7976 cv
319.835 35.4119 319.764 34.9851 319.764 34.5171 cv
319.764 34.0664 319.837 33.6504 319.985 33.2691 cv
320.132 32.8878 320.34 32.5562 320.609 32.2746 cv
320.877 31.9929 321.194 31.7719 321.558 31.6116 cv
321.922 31.4512 322.325 31.3711 322.767 31.3711 cv
cp
303.228 31.3711 mo
303.627 31.3711 303.991 31.4729 304.32 31.6766 cv
304.649 31.8802 304.888 32.2118 305.035 32.6711 cv
305.226 32.2204 305.509 31.8911 305.886 31.6831 cv
306.263 31.4751 306.66 31.3711 307.076 31.3711 cv
307.544 31.3711 307.925 31.4447 308.22 31.5921 cv
308.515 31.7394 308.746 31.9323 308.915 32.1706 cv
309.084 32.4089 309.201 32.6841 309.266 32.9961 cv
309.331 33.3081 309.364 33.6288 309.364 33.9581 cv
309.364 37.5331 li
308.584 37.5331 li
308.584 33.9971 li
308.584 33.7544 308.562 33.5182 308.519 33.2886 cv
308.476 33.0589 308.4 32.8531 308.291 32.6711 cv
308.183 32.4891 308.031 32.3439 307.836 32.2356 cv
307.641 32.1273 307.388 32.0731 307.076 32.0731 cv
306.712 32.0731 306.413 32.1403 306.179 32.2746 cv
305.945 32.4089 305.761 32.5801 305.626 32.7881 cv
305.492 32.9961 305.397 33.2214 305.34 33.4641 cv
305.284 33.7068 305.256 33.9364 305.256 34.1531 cv
305.256 37.5331 li
304.476 37.5331 li
304.476 33.9191 li
304.476 33.3644 304.374 32.9181 304.17 32.5801 cv
303.967 32.2421 303.653 32.0731 303.228 32.0731 cv
302.942 32.0731 302.671 32.1229 302.415 32.2226 cv
302.16 32.3222 301.939 32.4739 301.752 32.6776 cv
301.566 32.8813 301.419 33.1369 301.31 33.4446 cv
301.202 33.7523 301.148 34.1141 301.148 34.5301 cv
301.148 37.5331 li
300.368 37.5331 li
300.368 33.2171 li
300.368 33.1044 300.364 32.9679 300.355 32.8076 cv
300.346 32.6472 300.34 32.4847 300.335 32.3201 cv
300.331 32.1554 300.325 32.0016 300.316 31.8586 cv
300.307 31.7156 300.303 31.6051 300.303 31.5271 cv
301.083 31.5271 li
301.092 31.7524 301.098 31.9691 301.102 32.1771 cv
301.107 32.3851 301.118 32.5194 301.135 32.5801 cv
301.174 32.5801 li
301.33 32.2507 301.59 31.9669 301.954 31.7286 cv
302.318 31.4902 302.743 31.3711 303.228 31.3711 cv
cp
295.467 31.3711 mo
295.926 31.3711 296.349 31.4491 296.734 31.6051 cv
297.12 31.7611 297.454 31.9799 297.736 32.2616 cv
298.017 32.5432 298.236 32.8769 298.392 33.2626 cv
298.548 33.6483 298.626 34.0707 298.626 34.5301 cv
298.626 34.9894 298.548 35.4119 298.392 35.7976 cv
298.236 36.1833 298.017 36.5169 297.736 36.7986 cv
297.454 37.0803 297.12 37.2991 296.734 37.4551 cv
296.349 37.6111 295.926 37.6891 295.467 37.6891 cv
295.008 37.6891 294.583 37.6111 294.193 37.4551 cv
293.803 37.2991 293.469 37.0803 293.192 36.7986 cv
292.915 36.5169 292.698 36.1833 292.542 35.7976 cv
292.386 35.4119 292.308 34.9894 292.308 34.5301 cv
292.308 34.0707 292.386 33.6483 292.542 33.2626 cv
292.698 32.8769 292.915 32.5432 293.192 32.2616 cv
293.469 31.9799 293.803 31.7611 294.193 31.6051 cv
294.583 31.4491 295.008 31.3711 295.467 31.3711 cv
cp
284.404 31.3711 mo
284.898 31.3711 285.325 31.4621 285.685 31.6441 cv
286.044 31.8261 286.324 32.1121 286.523 32.5021 cv
285.821 32.9181 li
285.674 32.6407 285.49 32.4306 285.269 32.2876 cv
285.048 32.1446 284.759 32.0731 284.404 32.0731 cv
284.266 32.0731 284.12 32.0948 283.969 32.1381 cv
283.817 32.1814 283.681 32.2421 283.559 32.3201 cv
283.438 32.3981 283.336 32.4977 283.254 32.6191 cv
283.171 32.7404 283.13 32.8791 283.13 33.0351 cv
283.13 33.3037 283.219 33.5031 283.397 33.6331 cv
283.574 33.7631 283.793 33.8649 284.053 33.9386 cv
284.313 34.0122 284.599 34.0751 284.911 34.1271 cv
285.223 34.1791 285.509 34.2636 285.769 34.3806 cv
286.029 34.4976 286.248 34.6666 286.426 34.8876 cv
286.603 35.1086 286.692 35.4228 286.692 35.8301 cv
286.692 36.1421 286.634 36.4129 286.517 36.6426 cv
286.4 36.8723 286.239 37.0651 286.036 37.2211 cv
285.832 37.3771 285.6 37.4941 285.34 37.5721 cv
285.08 37.6501 284.807 37.6891 284.521 37.6891 cv
284.001 37.6891 283.527 37.5894 283.098 37.3901 cv
282.669 37.1907 282.337 36.8831 282.103 36.4671 cv
282.792 35.9991 li
282.957 36.3198 283.199 36.5646 283.52 36.7336 cv
283.841 36.9026 284.179 36.9871 284.534 36.9871 cv
284.699 36.9871 284.863 36.9611 285.028 36.9091 cv
285.193 36.8571 285.34 36.7834 285.47 36.6881 cv
285.6 36.5927 285.706 36.4779 285.789 36.3436 cv
285.871 36.2093 285.912 36.0554 285.912 35.8821 cv
285.912 35.6047 285.823 35.3968 285.646 35.2581 cv
285.468 35.1194 285.249 35.0111 284.989 34.9331 cv
284.729 34.8551 284.443 34.7879 284.131 34.7316 cv
283.819 34.6753 283.533 34.5886 283.273 34.4716 cv
283.013 34.3546 282.794 34.1921 282.617 33.9841 cv
282.439 33.7761 282.35 33.4814 282.35 33.1001 cv
282.35 32.8054 282.411 32.5497 282.532 32.3331 cv
282.654 32.1164 282.812 31.9366 283.007 31.7936 cv
283.202 31.6506 283.421 31.5444 283.663 31.4751 cv
283.906 31.4058 284.153 31.3711 284.404 31.3711 cv
cp
288.759 29.7981 mo
289.539 29.7981 li
289.539 31.5271 li
291.255 31.5271 li
291.255 32.2291 li
289.539 32.2291 li
289.539 36.1421 li
289.539 36.4107 289.613 36.6187 289.76 36.7661 cv
289.907 36.9134 290.111 36.9871 290.371 36.9871 cv
290.518 36.9871 290.668 36.9676 290.82 36.9286 cv
290.971 36.8896 291.116 36.8398 291.255 36.7791 cv
291.32 37.4811 li
291.173 37.5331 291.004 37.5807 290.813 37.6241 cv
290.622 37.6674 290.453 37.6891 290.306 37.6891 cv
290.029 37.6891 289.79 37.6479 289.591 37.5656 cv
289.392 37.4832 289.231 37.3727 289.11 37.2341 cv
288.989 37.0954 288.9 36.9329 288.844 36.7466 cv
288.787 36.5602 288.759 36.3587 288.759 36.1421 cv
288.759 32.2291 li
287.459 32.2291 li
287.459 31.5271 li
288.759 31.5271 li
cp
311.964 28.5631 mo
312.128 28.5631 312.267 28.6194 312.38 28.7321 cv
312.492 28.8448 312.549 28.9834 312.549 29.1481 cv
312.549 29.3127 312.492 29.4514 312.38 29.5641 cv
312.267 29.6768 312.128 29.7331 311.964 29.7331 cv
311.799 29.7331 311.66 29.6768 311.548 29.5641 cv
311.435 29.4514 311.379 29.3127 311.379 29.1481 cv
311.379 28.9834 311.435 28.8448 311.548 28.7321 cv
311.66 28.6194 311.799 28.5631 311.964 28.5631 cv
cp
270.78 28.0951 mo
271.404 28.0951 271.987 28.2056 272.529 28.4266 cv
273.07 28.6476 273.545 29.0181 273.952 29.5381 cv
273.25 30.1231 li
272.964 29.6898 272.598 29.3734 272.152 29.1741 cv
271.705 28.9748 271.248 28.8751 270.78 28.8751 cv
270.182 28.8751 269.643 28.9791 269.162 29.1871 cv
268.681 29.3951 268.271 29.6811 267.933 30.0451 cv
267.595 30.4091 267.335 30.8381 267.153 31.3321 cv
266.971 31.8261 266.88 32.3591 266.88 32.9311 cv
266.88 33.5031 266.971 34.0361 267.153 34.5301 cv
267.335 35.0241 267.595 35.4531 267.933 35.8171 cv
268.271 36.1811 268.681 36.4671 269.162 36.6751 cv
269.643 36.8831 270.182 36.9871 270.78 36.9871 cv
271.014 36.9871 271.257 36.9589 271.508 36.9026 cv
271.76 36.8463 272.004 36.7596 272.243 36.6426 cv
272.481 36.5256 272.709 36.3782 272.925 36.2006 cv
273.142 36.0229 273.333 35.8084 273.497 35.5571 cv
274.199 36.0901 li
273.757 36.6881 273.246 37.1171 272.665 37.3771 cv
272.085 37.6371 271.456 37.7671 270.78 37.7671 cv
270.078 37.7671 269.435 37.6479 268.85 37.4096 cv
268.265 37.1712 267.764 36.8376 267.348 36.4086 cv
266.932 35.9796 266.607 35.4683 266.373 34.8746 cv
266.139 34.2809 266.022 33.6331 266.022 32.9311 cv
266.022 32.2291 266.139 31.5834 266.373 30.9941 cv
266.607 30.4048 266.932 29.8956 267.348 29.4666 cv
267.764 29.0376 268.265 28.7018 268.85 28.4591 cv
269.435 28.2164 270.078 28.0951 270.78 28.0951 cv
cp
332.582 27.7051 mo
333.362 27.7051 li
333.362 37.5331 li
332.582 37.5331 li
332.582 36.4801 li
332.556 36.4801 li
332.434 36.6881 332.283 36.8679 332.101 37.0196 cv
331.919 37.1712 331.721 37.2969 331.509 37.3966 cv
331.297 37.4962 331.074 37.5699 330.84 37.6176 cv
330.606 37.6653 330.376 37.6891 330.151 37.6891 cv
329.691 37.6891 329.267 37.6111 328.877 37.4551 cv
328.487 37.2991 328.153 37.0803 327.876 36.7986 cv
327.598 36.5169 327.382 36.1833 327.226 35.7976 cv
327.07 35.4119 326.992 34.9894 326.992 34.5301 cv
326.992 34.0707 327.07 33.6483 327.226 33.2626 cv
327.382 32.8769 327.598 32.5432 327.876 32.2616 cv
328.153 31.9799 328.487 31.7611 328.877 31.6051 cv
329.267 31.4491 329.691 31.3711 330.151 31.3711 cv
330.376 31.3711 330.606 31.3949 330.84 31.4426 cv
331.074 31.4902 331.297 31.5639 331.509 31.6636 cv
331.721 31.7632 331.919 31.8889 332.101 32.0406 cv
332.283 32.1923 332.434 32.3721 332.556 32.5801 cv
332.582 32.5801 li
cp
f
330.151 32.0732 mo
329.787 32.0732 329.457 32.1381 329.163 32.2681 cv
328.868 32.3981 328.617 32.5736 328.409 32.7946 cv
328.201 33.0156 328.042 33.2756 327.934 33.5746 cv
327.826 33.8736 327.772 34.1921 327.772 34.5301 cv
327.772 34.8681 327.826 35.1866 327.934 35.4856 cv
328.042 35.7846 328.201 36.0446 328.409 36.2656 cv
328.617 36.4866 328.868 36.6621 329.163 36.7921 cv
329.457 36.9221 329.787 36.9871 330.151 36.9871 cv
330.506 36.9871 330.835 36.9221 331.139 36.7921 cv
331.442 36.6621 331.706 36.4866 331.932 36.2656 cv
332.157 36.0446 332.335 35.7846 332.465 35.4856 cv
332.595 35.1866 332.66 34.8681 332.66 34.5301 cv
332.66 34.1921 332.595 33.8736 332.465 33.5746 cv
332.335 33.2756 332.157 33.0156 331.932 32.7946 cv
331.706 32.5736 331.442 32.3981 331.139 32.2681 cv
330.835 32.1381 330.506 32.0732 330.151 32.0732 cv
cp
322.728 32.0732 mo
322.303 32.0732 321.95 32.1598 321.668 32.3331 cv
321.386 32.5065 321.163 32.7058 320.999 32.9311 cv
320.834 33.1564 320.717 33.3753 320.648 33.5876 cv
320.578 33.8 320.544 33.9451 320.544 34.0231 cv
324.808 34.0231 li
324.808 33.7545 324.753 33.5031 324.645 33.2691 cv
324.537 33.0351 324.389 32.8293 324.203 32.6516 cv
324.017 32.4739 323.796 32.3331 323.54 32.2291 cv
323.284 32.1251 323.014 32.0732 322.728 32.0732 cv
cp
295.467 32.0732 mo
295.103 32.0732 294.774 32.1381 294.479 32.2681 cv
294.184 32.3981 293.933 32.5736 293.725 32.7946 cv
293.517 33.0156 293.359 33.2756 293.25 33.5746 cv
293.142 33.8736 293.088 34.1921 293.088 34.5301 cv
293.088 34.8681 293.142 35.1866 293.25 35.4856 cv
293.359 35.7846 293.517 36.0446 293.725 36.2656 cv
293.933 36.4866 294.184 36.6621 294.479 36.7921 cv
294.774 36.9221 295.103 36.9871 295.467 36.9871 cv
295.831 36.9871 296.16 36.9221 296.455 36.7921 cv
296.75 36.6621 297.001 36.4866 297.209 36.2656 cv
297.417 36.0446 297.575 35.7846 297.683 35.4856 cv
297.792 35.1866 297.846 34.8681 297.846 34.5301 cv
297.846 34.1921 297.792 33.8736 297.683 33.5746 cv
297.575 33.2756 297.417 33.0156 297.209 32.7946 cv
297.001 32.5736 296.75 32.3981 296.455 32.2681 cv
296.16 32.1381 295.831 32.0732 295.467 32.0732 cv
cp
314.057 31.5271 mo
318.555 31.5271 li
318.555 31.9951 li
314.967 36.8311 li
318.711 36.8311 li
318.711 37.5331 li
313.875 37.5331 li
313.875 37.0651 li
317.476 32.2291 li
314.057 32.2291 li
cp
311.574 31.5271 mo
312.354 31.5271 li
312.354 37.5331 li
311.574 37.5331 li
cp
275.486 31.5271 mo
276.266 31.5271 li
276.266 35.0631 li
276.266 35.3058 276.288 35.5419 276.331 35.7716 cv
276.374 36.0013 276.45 36.2071 276.559 36.3891 cv
276.667 36.5711 276.819 36.7163 277.014 36.8246 cv
277.209 36.933 277.462 36.9871 277.774 36.9871 cv
278.06 36.9871 278.331 36.9373 278.587 36.8376 cv
278.842 36.7379 279.063 36.5863 279.25 36.3826 cv
279.436 36.179 279.583 35.9233 279.692 35.6156 cv
279.8 35.308 279.854 34.9461 279.854 34.5301 cv
279.854 31.5271 li
280.634 31.5271 li
280.634 35.8431 li
280.634 35.9558 280.638 36.0923 280.647 36.2526 cv
280.656 36.4129 280.662 36.5755 280.667 36.7401 cv
280.671 36.9048 280.677 37.0586 280.686 37.2016 cv
280.695 37.3446 280.699 37.4551 280.699 37.5331 cv
279.919 37.5331 li
279.91 37.3078 279.904 37.0911 279.9 36.8831 cv
279.895 36.6751 279.884 36.5408 279.867 36.4801 cv
279.828 36.4801 li
279.672 36.8095 279.412 37.0933 279.048 37.3316 cv
278.684 37.5699 278.259 37.6891 277.774 37.6891 cv
277.306 37.6891 276.923 37.6155 276.624 37.4681 cv
276.325 37.3208 276.091 37.128 275.922 36.8896 cv
275.753 36.6513 275.638 36.3761 275.577 36.0641 cv
275.516 35.7521 275.486 35.4315 275.486 35.1021 cv
cp
322.767 31.3712 mo
323.226 31.3712 323.631 31.4513 323.982 31.6116 cv
324.333 31.772 324.628 31.9843 324.866 32.2486 cv
325.104 32.5129 325.284 32.8141 325.406 33.1521 cv
325.527 33.4901 325.588 33.8325 325.588 34.1791 cv
325.588 34.7251 li
320.544 34.7251 li
320.544 34.8898 320.576 35.0999 320.641 35.3556 cv
320.706 35.6113 320.825 35.8604 320.999 36.1031 cv
321.172 36.3458 321.404 36.5538 321.694 36.7271 cv
321.984 36.9005 322.359 36.9871 322.819 36.9871 cv
323.217 36.9871 323.603 36.8918 323.976 36.7011 cv
324.348 36.5105 324.634 36.2505 324.834 35.9211 cv
325.406 36.4021 li
325.102 36.8615 324.727 37.1908 324.281 37.3901 cv
323.835 37.5895 323.343 37.6891 322.806 37.6891 cv
322.346 37.6891 321.93 37.6111 321.558 37.4551 cv
321.185 37.2991 320.864 37.0803 320.596 36.7986 cv
320.327 36.517 320.121 36.1833 319.978 35.7976 cv
319.835 35.412 319.764 34.9851 319.764 34.5171 cv
319.764 34.0664 319.837 33.6505 319.985 33.2691 cv
320.132 32.8878 320.34 32.5563 320.609 32.2746 cv
320.877 31.993 321.194 31.772 321.558 31.6116 cv
321.922 31.4513 322.325 31.3712 322.767 31.3712 cv
cp
303.228 31.3712 mo
303.627 31.3712 303.991 31.4729 304.32 31.6766 cv
304.649 31.8803 304.888 32.2118 305.035 32.6711 cv
305.226 32.2205 305.509 31.8911 305.886 31.6831 cv
306.263 31.4751 306.66 31.3712 307.076 31.3712 cv
307.544 31.3712 307.925 31.4448 308.22 31.5921 cv
308.515 31.7394 308.746 31.9323 308.915 32.1706 cv
309.084 32.4089 309.201 32.6841 309.266 32.9961 cv
309.331 33.3081 309.364 33.6288 309.364 33.9581 cv
309.364 37.5331 li
308.584 37.5331 li
308.584 33.9971 li
308.584 33.7545 308.562 33.5183 308.519 33.2886 cv
308.476 33.0589 308.4 32.8531 308.291 32.6711 cv
308.183 32.4891 308.031 32.344 307.836 32.2357 cv
307.641 32.1273 307.388 32.0732 307.076 32.0732 cv
306.712 32.0732 306.413 32.1403 306.179 32.2746 cv
305.945 32.4089 305.761 32.5801 305.626 32.7881 cv
305.492 32.9961 305.397 33.2214 305.34 33.4641 cv
305.284 33.7068 305.256 33.9364 305.256 34.1531 cv
305.256 37.5331 li
304.476 37.5331 li
304.476 33.9191 li
304.476 33.3644 304.374 32.9181 304.17 32.5801 cv
303.967 32.2421 303.653 32.0732 303.228 32.0732 cv
302.942 32.0732 302.671 32.123 302.415 32.2226 cv
302.16 32.3223 301.939 32.4739 301.752 32.6776 cv
301.566 32.8813 301.419 33.1369 301.31 33.4446 cv
301.202 33.7523 301.148 34.1141 301.148 34.5301 cv
301.148 37.5331 li
300.368 37.5331 li
300.368 33.2171 li
300.368 33.1044 300.364 32.968 300.355 32.8076 cv
300.346 32.6473 300.34 32.4848 300.335 32.3201 cv
300.331 32.1555 300.325 32.0016 300.316 31.8586 cv
300.307 31.7156 300.303 31.6051 300.303 31.5271 cv
301.083 31.5271 li
301.092 31.7524 301.098 31.9691 301.102 32.1771 cv
301.107 32.3851 301.118 32.5194 301.135 32.5801 cv
301.174 32.5801 li
301.33 32.2508 301.59 31.9669 301.954 31.7286 cv
302.318 31.4903 302.743 31.3712 303.228 31.3712 cv
cp
295.467 31.3712 mo
295.926 31.3712 296.349 31.4491 296.734 31.6051 cv
297.12 31.7611 297.454 31.9799 297.735 32.2616 cv
298.017 32.5433 298.236 32.877 298.392 33.2626 cv
298.548 33.6483 298.626 34.0708 298.626 34.5301 cv
298.626 34.9895 298.548 35.412 298.392 35.7976 cv
298.236 36.1833 298.017 36.517 297.735 36.7986 cv
297.454 37.0803 297.12 37.2991 296.734 37.4551 cv
296.349 37.6111 295.926 37.6891 295.467 37.6891 cv
295.008 37.6891 294.583 37.6111 294.193 37.4551 cv
293.803 37.2991 293.469 37.0803 293.192 36.7986 cv
292.915 36.517 292.698 36.1833 292.542 35.7976 cv
292.386 35.412 292.308 34.9895 292.308 34.5301 cv
292.308 34.0708 292.386 33.6483 292.542 33.2626 cv
292.698 32.877 292.915 32.5433 293.192 32.2616 cv
293.469 31.9799 293.803 31.7611 294.193 31.6051 cv
294.583 31.4491 295.008 31.3712 295.467 31.3712 cv
cp
284.404 31.3712 mo
284.898 31.3712 285.325 31.4621 285.685 31.6441 cv
286.044 31.8261 286.324 32.1121 286.523 32.5021 cv
285.821 32.9181 li
285.674 32.6408 285.49 32.4306 285.269 32.2876 cv
285.048 32.1446 284.759 32.0732 284.404 32.0732 cv
284.265 32.0732 284.12 32.0948 283.969 32.1381 cv
283.817 32.1815 283.68 32.2421 283.559 32.3201 cv
283.438 32.3981 283.336 32.4978 283.254 32.6191 cv
283.171 32.7404 283.13 32.8791 283.13 33.0351 cv
283.13 33.3038 283.219 33.5031 283.397 33.6331 cv
283.574 33.7631 283.793 33.865 284.053 33.9386 cv
284.313 34.0123 284.599 34.0751 284.911 34.1271 cv
285.223 34.1791 285.509 34.2636 285.769 34.3806 cv
286.029 34.4976 286.248 34.6666 286.426 34.8876 cv
286.603 35.1086 286.692 35.4228 286.692 35.8301 cv
286.692 36.1422 286.634 36.4129 286.517 36.6426 cv
286.4 36.8723 286.239 37.0651 286.036 37.2211 cv
285.832 37.3771 285.6 37.4941 285.34 37.5721 cv
285.08 37.6501 284.807 37.6891 284.521 37.6891 cv
284.001 37.6891 283.527 37.5895 283.098 37.3901 cv
282.669 37.1908 282.337 36.8831 282.103 36.4671 cv
282.792 35.9991 li
282.957 36.3198 283.199 36.5646 283.52 36.7336 cv
283.841 36.9026 284.179 36.9871 284.534 36.9871 cv
284.699 36.9871 284.863 36.9612 285.028 36.9091 cv
285.193 36.8571 285.34 36.7835 285.47 36.6881 cv
285.6 36.5928 285.706 36.4779 285.789 36.3436 cv
285.871 36.2093 285.912 36.0555 285.912 35.8821 cv
285.912 35.6048 285.823 35.3968 285.646 35.2581 cv
285.468 35.1194 285.249 35.0111 284.989 34.9331 cv
284.729 34.8551 284.443 34.7879 284.131 34.7316 cv
283.819 34.6753 283.533 34.5886 283.273 34.4716 cv
283.013 34.3546 282.794 34.1921 282.617 33.9841 cv
282.439 33.7761 282.35 33.4814 282.35 33.1001 cv
282.35 32.8055 282.411 32.5498 282.532 32.3331 cv
282.653 32.1165 282.812 31.9366 283.007 31.7936 cv
283.202 31.6506 283.42 31.5444 283.663 31.4751 cv
283.906 31.4058 284.153 31.3712 284.404 31.3712 cv
cp
288.759 29.7982 mo
289.539 29.7982 li
289.539 31.5271 li
291.255 31.5271 li
291.255 32.2291 li
289.539 32.2291 li
289.539 36.1422 li
289.539 36.4108 289.613 36.6188 289.76 36.7661 cv
289.907 36.9135 290.111 36.9871 290.371 36.9871 cv
290.518 36.9871 290.668 36.9677 290.82 36.9286 cv
290.971 36.8896 291.116 36.8398 291.255 36.7791 cv
291.32 37.4811 li
291.173 37.5331 291.004 37.5808 290.813 37.6241 cv
290.622 37.6675 290.453 37.6891 290.306 37.6891 cv
290.029 37.6891 289.79 37.648 289.591 37.5656 cv
289.392 37.4833 289.231 37.3728 289.11 37.2341 cv
288.989 37.0955 288.9 36.933 288.844 36.7466 cv
288.787 36.5603 288.759 36.3588 288.759 36.1422 cv
288.759 32.2291 li
287.459 32.2291 li
287.459 31.5271 li
288.759 31.5271 li
cp
311.964 28.5631 mo
312.128 28.5631 312.267 28.6194 312.38 28.7321 cv
312.492 28.8448 312.549 28.9835 312.549 29.1481 cv
312.549 29.3128 312.492 29.4514 312.38 29.5641 cv
312.267 29.6768 312.128 29.7331 311.964 29.7331 cv
311.799 29.7331 311.66 29.6768 311.548 29.5641 cv
311.435 29.4514 311.379 29.3128 311.379 29.1481 cv
311.379 28.9835 311.435 28.8448 311.548 28.7321 cv
311.66 28.6194 311.799 28.5631 311.964 28.5631 cv
cp
270.78 28.0952 mo
271.404 28.0952 271.987 28.2056 272.529 28.4266 cv
273.07 28.6476 273.545 29.0181 273.952 29.5381 cv
273.25 30.1231 li
272.964 29.6898 272.598 29.3734 272.152 29.1741 cv
271.705 28.9748 271.248 28.8751 270.78 28.8751 cv
270.182 28.8751 269.643 28.9791 269.162 29.1871 cv
268.681 29.3951 268.271 29.6811 267.933 30.0451 cv
267.595 30.4091 267.335 30.8381 267.153 31.3321 cv
266.971 31.8261 266.88 32.3591 266.88 32.9311 cv
266.88 33.5031 266.971 34.0361 267.153 34.5301 cv
267.335 35.0241 267.595 35.4531 267.933 35.8171 cv
268.271 36.1811 268.681 36.4671 269.162 36.6751 cv
269.643 36.8831 270.182 36.9871 270.78 36.9871 cv
271.014 36.9871 271.257 36.959 271.508 36.9026 cv
271.76 36.8463 272.004 36.7596 272.243 36.6426 cv
272.481 36.5256 272.709 36.3783 272.925 36.2006 cv
273.142 36.023 273.333 35.8084 273.497 35.5571 cv
274.199 36.0901 li
273.757 36.6881 273.246 37.1171 272.665 37.3771 cv
272.085 37.6371 271.456 37.7672 270.78 37.7672 cv
270.078 37.7672 269.435 37.648 268.85 37.4096 cv
268.265 37.1713 267.764 36.8376 267.348 36.4086 cv
266.932 35.9796 266.607 35.4683 266.373 34.8746 cv
266.139 34.2809 266.022 33.6331 266.022 32.9311 cv
266.022 32.2291 266.139 31.5834 266.373 30.9941 cv
266.607 30.4048 266.932 29.8956 267.348 29.4666 cv
267.764 29.0376 268.265 28.7018 268.85 28.4591 cv
269.435 28.2164 270.078 28.0952 270.78 28.0952 cv
cp
332.582 27.7051 mo
333.362 27.7051 li
333.362 37.5331 li
332.582 37.5331 li
332.582 36.4801 li
332.556 36.4801 li
332.434 36.6881 332.283 36.868 332.101 37.0196 cv
331.919 37.1713 331.721 37.2969 331.509 37.3966 cv
331.297 37.4963 331.074 37.5699 330.84 37.6176 cv
330.606 37.6653 330.376 37.6891 330.151 37.6891 cv
329.691 37.6891 329.267 37.6111 328.877 37.4551 cv
328.487 37.2991 328.153 37.0803 327.876 36.7986 cv
327.598 36.517 327.382 36.1833 327.226 35.7976 cv
327.07 35.412 326.992 34.9895 326.992 34.5301 cv
326.992 34.0708 327.07 33.6483 327.226 33.2626 cv
327.382 32.877 327.598 32.5433 327.876 32.2616 cv
328.153 31.9799 328.487 31.7611 328.877 31.6051 cv
329.267 31.4491 329.691 31.3712 330.151 31.3712 cv
330.376 31.3712 330.606 31.395 330.84 31.4426 cv
331.074 31.4903 331.297 31.564 331.509 31.6636 cv
331.721 31.7633 331.919 31.8889 332.101 32.0406 cv
332.283 32.1923 332.434 32.3721 332.556 32.5801 cv
332.582 32.5801 li
cp
@
286.373 49.5171 mo
286.044 49.5171 285.725 49.5388 285.418 49.5821 cv
285.11 49.6254 284.833 49.6991 284.586 49.8031 cv
284.339 49.9071 284.141 50.0457 283.994 50.2191 cv
283.847 50.3924 283.773 50.6091 283.773 50.8691 cv
283.773 51.0511 283.814 51.2136 283.897 51.3566 cv
283.979 51.4996 284.085 51.6166 284.215 51.7076 cv
284.345 51.7986 284.49 51.8679 284.651 51.9156 cv
284.811 51.9633 284.973 51.9871 285.138 51.9871 cv
285.554 51.9871 285.896 51.9264 286.165 51.8051 cv
286.434 51.6837 286.648 51.5256 286.809 51.3306 cv
286.969 51.1356 287.079 50.9146 287.14 50.6676 cv
287.201 50.4206 287.231 50.1714 287.231 49.9201 cv
287.231 49.5171 li
cp
313.387 47.0731 mo
313.057 47.0731 312.747 47.1359 312.457 47.2616 cv
312.167 47.3872 311.915 47.5562 311.703 47.7686 cv
311.491 47.9809 311.322 48.2322 311.196 48.5226 cv
311.07 48.8129 311.008 49.1227 311.008 49.4521 cv
311.008 49.7814 311.07 50.0912 311.196 50.3816 cv
311.322 50.6719 311.491 50.9232 311.703 51.1356 cv
311.915 51.3479 312.167 51.5169 312.457 51.6426 cv
312.747 51.7682 313.057 51.8311 313.387 51.8311 cv
313.716 51.8311 314.026 51.7682 314.316 51.6426 cv
314.606 51.5169 314.858 51.3479 315.07 51.1356 cv
315.282 50.9232 315.451 50.6719 315.577 50.3816 cv
315.703 50.0912 315.766 49.7814 315.766 49.4521 cv
315.766 49.1227 315.703 48.8129 315.577 48.5226 cv
315.451 48.2322 315.282 47.9809 315.07 47.7686 cv
314.858 47.5562 314.606 47.3872 314.316 47.2616 cv
314.026 47.1359 313.716 47.0731 313.387 47.0731 cv
cp
305.586 47.0731 mo
305.223 47.0731 304.893 47.1381 304.599 47.2681 cv
304.304 47.3981 304.053 47.5736 303.845 47.7946 cv
303.637 48.0156 303.478 48.2756 303.37 48.5746 cv
303.262 48.8736 303.208 49.1921 303.208 49.5301 cv
303.208 49.8681 303.262 50.1866 303.37 50.4856 cv
303.478 50.7846 303.637 51.0446 303.845 51.2656 cv
304.053 51.4866 304.304 51.6621 304.599 51.7921 cv
304.893 51.9221 305.223 51.9871 305.586 51.9871 cv
305.951 51.9871 306.28 51.9221 306.575 51.7921 cv
306.869 51.6621 307.121 51.4866 307.329 51.2656 cv
307.537 51.0446 307.695 50.7846 307.803 50.4856 cv
307.911 50.1866 307.966 49.8681 307.966 49.5301 cv
307.966 49.1921 307.911 48.8736 307.803 48.5746 cv
307.695 48.2756 307.537 48.0156 307.329 47.7946 cv
307.121 47.5736 306.869 47.3981 306.575 47.2681 cv
306.28 47.1381 305.951 47.0731 305.586 47.0731 cv
cp
318.56 46.5271 mo
319.34 46.5271 li
319.34 52.5331 li
318.56 52.5331 li
cp
324.371 46.3711 mo
324.813 46.3711 325.223 46.4621 325.6 46.6441 cv
325.977 46.8261 326.313 47.0818 326.607 47.4111 cv
325.983 47.8791 li
325.758 47.6277 325.511 47.4306 325.242 47.2876 cv
324.974 47.1446 324.683 47.0731 324.371 47.0731 cv
324.007 47.0731 323.678 47.1381 323.383 47.2681 cv
323.089 47.3981 322.837 47.5736 322.629 47.7946 cv
322.421 48.0156 322.263 48.2756 322.155 48.5746 cv
322.046 48.8736 321.992 49.1921 321.992 49.5301 cv
321.992 49.8681 322.046 50.1866 322.155 50.4856 cv
322.263 50.7846 322.421 51.0446 322.629 51.2656 cv
322.837 51.4866 323.089 51.6621 323.383 51.7921 cv
323.678 51.9221 324.007 51.9871 324.371 51.9871 cv
324.701 51.9871 325.002 51.9113 325.275 51.7596 cv
325.548 51.6079 325.784 51.4064 325.983 51.1551 cv
326.581 51.6491 li
326.287 52.0044 325.953 52.2666 325.58 52.4356 cv
325.208 52.6046 324.805 52.6891 324.371 52.6891 cv
323.912 52.6891 323.487 52.6111 323.097 52.4551 cv
322.707 52.2991 322.374 52.0803 322.096 51.7986 cv
321.819 51.5169 321.602 51.1833 321.446 50.7976 cv
321.29 50.4119 321.212 49.9894 321.212 49.5301 cv
321.212 49.0707 321.29 48.6483 321.446 48.2626 cv
321.602 47.8769 321.819 47.5432 322.096 47.2616 cv
322.374 46.9799 322.707 46.7611 323.097 46.6051 cv
323.487 46.4491 323.912 46.3711 324.371 46.3711 cv
cp
313.439 46.3711 mo
313.958 46.3711 314.411 46.4751 314.797 46.6831 cv
315.183 46.8911 315.488 47.1771 315.714 47.5411 cv
315.74 47.5411 li
315.74 46.5271 li
316.52 46.5271 li
316.52 52.1431 li
316.52 52.8884 316.411 53.4908 316.194 53.9501 cv
315.978 54.4094 315.707 54.7647 315.382 55.0161 cv
315.057 55.2674 314.708 55.4364 314.336 55.5231 cv
313.963 55.6097 313.625 55.6531 313.322 55.6531 cv
313.018 55.6531 312.721 55.6249 312.431 55.5686 cv
312.141 55.5122 311.866 55.4299 311.605 55.3216 cv
311.345 55.2133 311.109 55.0811 310.897 54.9251 cv
310.685 54.7691 310.5 54.5914 310.345 54.3921 cv
310.956 53.8201 li
311.233 54.2101 311.579 54.4961 311.996 54.6781 cv
312.411 54.8601 312.853 54.9511 313.322 54.9511 cv
313.72 54.9511 314.056 54.8991 314.329 54.7951 cv
314.602 54.6911 314.827 54.5546 315.005 54.3856 cv
315.183 54.2166 315.321 54.0302 315.421 53.8266 cv
315.521 53.6229 315.594 53.4193 315.642 53.2156 cv
315.69 53.0119 315.718 52.8191 315.727 52.6371 cv
315.735 52.4551 315.74 52.3077 315.74 52.1951 cv
315.74 51.3631 li
315.714 51.3631 li
315.488 51.7271 315.183 52.0131 314.797 52.2211 cv
314.411 52.4291 313.958 52.5331 313.439 52.5331 cv
312.996 52.5331 312.581 52.4529 312.19 52.2926 cv
311.801 52.1323 311.46 51.9113 311.17 51.6296 cv
310.88 51.3479 310.65 51.0208 310.481 50.6481 cv
310.312 50.2754 310.228 49.8767 310.228 49.4521 cv
310.228 49.0274 310.312 48.6288 310.481 48.2561 cv
310.65 47.8834 310.88 47.5584 311.17 47.2811 cv
311.46 47.0038 311.801 46.7827 312.19 46.6181 cv
312.581 46.4534 312.996 46.3711 313.439 46.3711 cv
cp
305.586 46.3711 mo
306.046 46.3711 306.468 46.4491 306.854 46.6051 cv
307.24 46.7611 307.573 46.9799 307.855 47.2616 cv
308.137 47.5432 308.356 47.8769 308.512 48.2626 cv
308.668 48.6483 308.746 49.0707 308.746 49.5301 cv
308.746 49.9894 308.668 50.4119 308.512 50.7976 cv
308.356 51.1833 308.137 51.5169 307.855 51.7986 cv
307.573 52.0803 307.24 52.2991 306.854 52.4551 cv
306.468 52.6111 306.046 52.6891 305.586 52.6891 cv
305.127 52.6891 304.703 52.6111 304.313 52.4551 cv
303.922 52.2991 303.589 52.0803 303.312 51.7986 cv
303.034 51.5169 302.818 51.1833 302.662 50.7976 cv
302.506 50.4119 302.428 49.9894 302.428 49.5301 cv
302.428 49.0707 302.506 48.6483 302.662 48.2626 cv
302.818 47.8769 303.034 47.5432 303.312 47.2616 cv
303.589 46.9799 303.922 46.7611 304.313 46.6051 cv
304.703 46.4491 305.127 46.3711 305.586 46.3711 cv
cp
285.541 46.3711 mo
286.269 46.3711 286.85 46.5422 287.283 46.8846 cv
287.716 47.2269 287.933 47.7794 287.933 48.5421 cv
287.933 50.0111 li
287.933 50.3058 287.935 50.5701 287.94 50.8041 cv
287.944 51.0381 287.95 51.2548 287.959 51.4541 cv
287.968 51.6534 287.978 51.8398 287.991 52.0131 cv
288.004 52.1864 288.024 52.3597 288.05 52.5331 cv
287.322 52.5331 li
287.27 52.2384 287.244 51.9134 287.244 51.5581 cv
287.218 51.5581 li
286.993 51.9481 286.713 52.2341 286.379 52.4161 cv
286.046 52.5981 285.623 52.6891 285.112 52.6891 cv
284.852 52.6891 284.596 52.6566 284.345 52.5916 cv
284.094 52.5266 283.868 52.4226 283.669 52.2796 cv
283.47 52.1366 283.307 51.9524 283.181 51.7271 cv
283.056 51.5017 282.993 51.2288 282.993 50.9081 cv
282.993 50.4488 283.11 50.0847 283.344 49.8161 cv
283.578 49.5474 283.866 49.3459 284.209 49.2116 cv
284.551 49.0772 284.915 48.9906 285.301 48.9516 cv
285.686 48.9126 286.026 48.8931 286.321 48.8931 cv
287.231 48.8931 li
287.231 48.5291 li
287.231 48.0091 287.071 47.6364 286.75 47.4111 cv
286.429 47.1858 286.026 47.0731 285.541 47.0731 cv
284.848 47.0731 284.237 47.2984 283.708 47.7491 cv
283.253 47.2161 li
283.539 46.9388 283.894 46.7286 284.319 46.5856 cv
284.744 46.4426 285.151 46.3711 285.541 46.3711 cv
cp
275.024 46.3711 mo
275.518 46.3711 275.945 46.4621 276.305 46.6441 cv
276.664 46.8261 276.944 47.1121 277.143 47.5021 cv
276.441 47.9181 li
276.294 47.6407 276.11 47.4306 275.889 47.2876 cv
275.668 47.1446 275.379 47.0731 275.024 47.0731 cv
274.886 47.0731 274.74 47.0948 274.589 47.1381 cv
274.437 47.1814 274.301 47.2421 274.179 47.3201 cv
274.058 47.3981 273.956 47.4977 273.874 47.6191 cv
273.791 47.7404 273.75 47.8791 273.75 48.0351 cv
273.75 48.3037 273.839 48.5031 274.017 48.6331 cv
274.194 48.7631 274.413 48.8649 274.673 48.9386 cv
274.933 49.0122 275.219 49.0751 275.531 49.1271 cv
275.843 49.1791 276.129 49.2636 276.389 49.3806 cv
276.649 49.4976 276.868 49.6666 277.046 49.8876 cv
277.223 50.1086 277.312 50.4228 277.312 50.8301 cv
277.312 51.1421 277.254 51.4129 277.137 51.6426 cv
277.02 51.8723 276.859 52.0651 276.656 52.2211 cv
276.452 52.3771 276.22 52.4941 275.96 52.5721 cv
275.7 52.6501 275.427 52.6891 275.141 52.6891 cv
274.621 52.6891 274.147 52.5894 273.718 52.3901 cv
273.289 52.1907 272.957 51.8831 272.723 51.4671 cv
273.412 50.9991 li
273.577 51.3198 273.819 51.5646 274.14 51.7336 cv
274.461 51.9026 274.799 51.9871 275.154 51.9871 cv
275.319 51.9871 275.484 51.9611 275.648 51.9091 cv
275.813 51.8571 275.96 51.7834 276.09 51.6881 cv
276.22 51.5927 276.326 51.4779 276.409 51.3436 cv
276.491 51.2093 276.532 51.0554 276.532 50.8821 cv
276.532 50.6047 276.443 50.3968 276.266 50.2581 cv
276.088 50.1194 275.869 50.0111 275.609 49.9331 cv
275.349 49.8551 275.063 49.7879 274.751 49.7316 cv
274.439 49.6753 274.153 49.5886 273.893 49.4716 cv
273.633 49.3546 273.414 49.1921 273.237 48.9841 cv
273.059 48.7761 272.97 48.4814 272.97 48.1001 cv
272.97 47.8054 273.031 47.5497 273.152 47.3331 cv
273.274 47.1164 273.432 46.9366 273.627 46.7936 cv
273.822 46.6506 274.041 46.5444 274.283 46.4751 cv
274.526 46.4058 274.773 46.3711 275.024 46.3711 cv
cp
279.379 44.7981 mo
280.159 44.7981 li
280.159 46.5271 li
281.875 46.5271 li
281.875 47.2291 li
280.159 47.2291 li
280.159 51.1421 li
280.159 51.4107 280.233 51.6187 280.38 51.7661 cv
280.527 51.9134 280.731 51.9871 280.991 51.9871 cv
281.138 51.9871 281.288 51.9676 281.44 51.9286 cv
281.591 51.8896 281.737 51.8398 281.875 51.7791 cv
281.94 52.4811 li
281.793 52.5331 281.624 52.5807 281.433 52.6241 cv
281.242 52.6674 281.073 52.6891 280.926 52.6891 cv
280.649 52.6891 280.41 52.6479 280.211 52.5656 cv
280.012 52.4832 279.852 52.3727 279.73 52.2341 cv
279.609 52.0954 279.52 51.9329 279.464 51.7466 cv
279.407 51.5602 279.379 51.3587 279.379 51.1421 cv
279.379 47.2291 li
278.079 47.2291 li
278.079 46.5271 li
279.379 46.5271 li
cp
318.95 43.5631 mo
319.115 43.5631 319.254 43.6194 319.366 43.7321 cv
319.479 43.8448 319.535 43.9834 319.535 44.1481 cv
319.535 44.3127 319.479 44.4514 319.366 44.5641 cv
319.254 44.6768 319.115 44.7331 318.95 44.7331 cv
318.786 44.7331 318.647 44.6768 318.534 44.5641 cv
318.422 44.4514 318.365 44.3127 318.365 44.1481 cv
318.365 43.9834 318.422 43.8448 318.534 43.7321 cv
318.647 43.6194 318.786 43.5631 318.95 43.5631 cv
cp
299.776 42.7051 mo
300.556 42.7051 li
300.556 52.5331 li
299.776 52.5331 li
cp
293.276 42.7051 mo
294.056 42.7051 li
294.056 52.5331 li
293.276 52.5331 li
cp
290.143 42.7051 mo
290.923 42.7051 li
290.923 52.5331 li
290.143 52.5331 li
cp
f
286.373 49.5171 mo
286.044 49.5171 285.725 49.5388 285.418 49.5821 cv
285.11 49.6255 284.833 49.6992 284.586 49.8031 cv
284.339 49.9071 284.141 50.0458 283.994 50.2191 cv
283.847 50.3925 283.773 50.6091 283.773 50.8691 cv
283.773 51.0511 283.814 51.2136 283.896 51.3566 cv
283.979 51.4996 284.085 51.6166 284.215 51.7076 cv
284.345 51.7986 284.49 51.868 284.651 51.9156 cv
284.811 51.9633 284.973 51.9871 285.138 51.9871 cv
285.554 51.9871 285.896 51.9265 286.165 51.8051 cv
286.434 51.6838 286.648 51.5256 286.809 51.3306 cv
286.969 51.1357 287.079 50.9146 287.14 50.6676 cv
287.201 50.4206 287.231 50.1715 287.231 49.9201 cv
287.231 49.5171 li
cp
313.386 47.0732 mo
313.057 47.0732 312.747 47.136 312.457 47.2616 cv
312.167 47.3873 311.915 47.5563 311.703 47.7686 cv
311.491 47.981 311.322 48.2323 311.196 48.5226 cv
311.07 48.813 311.007 49.1228 311.007 49.4521 cv
311.007 49.7814 311.07 50.0913 311.196 50.3816 cv
311.322 50.6719 311.491 50.9233 311.703 51.1357 cv
311.915 51.348 312.167 51.517 312.457 51.6426 cv
312.747 51.7683 313.057 51.8311 313.386 51.8311 cv
313.716 51.8311 314.026 51.7683 314.316 51.6426 cv
314.606 51.517 314.858 51.348 315.07 51.1357 cv
315.282 50.9233 315.451 50.6719 315.577 50.3816 cv
315.703 50.0913 315.765 49.7814 315.765 49.4521 cv
315.765 49.1228 315.703 48.813 315.577 48.5226 cv
315.451 48.2323 315.282 47.981 315.07 47.7686 cv
314.858 47.5563 314.606 47.3873 314.316 47.2616 cv
314.026 47.136 313.716 47.0732 313.386 47.0732 cv
cp
305.587 47.0732 mo
305.223 47.0732 304.893 47.1381 304.599 47.2681 cv
304.304 47.3981 304.053 47.5736 303.844 47.7946 cv
303.637 48.0156 303.478 48.2756 303.37 48.5746 cv
303.262 48.8736 303.208 49.1921 303.208 49.5301 cv
303.208 49.8681 303.262 50.1866 303.37 50.4856 cv
303.478 50.7846 303.637 51.0446 303.844 51.2656 cv
304.053 51.4866 304.304 51.6621 304.599 51.7921 cv
304.893 51.9221 305.223 51.9871 305.587 51.9871 cv
305.951 51.9871 306.28 51.9221 306.574 51.7921 cv
306.869 51.6621 307.12 51.4866 307.329 51.2656 cv
307.537 51.0446 307.695 50.7846 307.803 50.4856 cv
307.911 50.1866 307.965 49.8681 307.965 49.5301 cv
307.965 49.1921 307.911 48.8736 307.803 48.5746 cv
307.695 48.2756 307.537 48.0156 307.329 47.7946 cv
307.12 47.5736 306.869 47.3981 306.574 47.2681 cv
306.28 47.1381 305.951 47.0732 305.587 47.0732 cv
cp
318.56 46.5271 mo
319.34 46.5271 li
319.34 52.5331 li
318.56 52.5331 li
cp
324.371 46.3712 mo
324.813 46.3712 325.223 46.4621 325.6 46.6441 cv
325.977 46.8261 326.313 47.0818 326.607 47.4111 cv
325.983 47.8791 li
325.758 47.6278 325.511 47.4306 325.242 47.2876 cv
324.974 47.1446 324.683 47.0732 324.371 47.0732 cv
324.007 47.0732 323.678 47.1381 323.383 47.2681 cv
323.089 47.3981 322.837 47.5736 322.629 47.7946 cv
322.421 48.0156 322.263 48.2756 322.155 48.5746 cv
322.046 48.8736 321.992 49.1921 321.992 49.5301 cv
321.992 49.8681 322.046 50.1866 322.155 50.4856 cv
322.263 50.7846 322.421 51.0446 322.629 51.2656 cv
322.837 51.4866 323.089 51.6621 323.383 51.7921 cv
323.678 51.9221 324.007 51.9871 324.371 51.9871 cv
324.701 51.9871 325.002 51.9113 325.275 51.7596 cv
325.548 51.608 325.784 51.4064 325.983 51.1552 cv
326.581 51.6491 li
326.287 52.0045 325.953 52.2666 325.58 52.4356 cv
325.208 52.6046 324.805 52.6891 324.371 52.6891 cv
323.912 52.6891 323.487 52.6111 323.097 52.4551 cv
322.707 52.2991 322.374 52.0803 322.096 51.7986 cv
321.819 51.517 321.602 51.1833 321.446 50.7976 cv
321.29 50.412 321.212 49.9895 321.212 49.5301 cv
321.212 49.0708 321.29 48.6483 321.446 48.2626 cv
321.602 47.877 321.819 47.5433 322.096 47.2616 cv
322.374 46.9799 322.707 46.7611 323.097 46.6051 cv
323.487 46.4491 323.912 46.3712 324.371 46.3712 cv
cp
313.438 46.3712 mo
313.958 46.3712 314.411 46.4751 314.797 46.6831 cv
315.183 46.8911 315.488 47.1771 315.713 47.5411 cv
315.739 47.5411 li
315.739 46.5271 li
316.519 46.5271 li
316.519 52.1431 li
316.519 52.8885 316.411 53.4908 316.194 53.9501 cv
315.978 54.4095 315.707 54.7648 315.382 55.0161 cv
315.057 55.2675 314.708 55.4364 314.335 55.5231 cv
313.963 55.6098 313.625 55.6531 313.321 55.6531 cv
313.018 55.6531 312.721 55.625 312.431 55.5686 cv
312.141 55.5123 311.865 55.4299 311.605 55.3216 cv
311.345 55.2133 311.109 55.0811 310.897 54.9251 cv
310.685 54.7691 310.5 54.5915 310.344 54.3922 cv
310.955 53.8201 li
311.233 54.2101 311.579 54.4961 311.995 54.6781 cv
312.411 54.8601 312.853 54.9511 313.321 54.9511 cv
313.72 54.9511 314.056 54.8991 314.329 54.7951 cv
314.602 54.6911 314.827 54.5546 315.005 54.3857 cv
315.183 54.2166 315.321 54.0303 315.421 53.8266 cv
315.521 53.623 315.594 53.4193 315.642 53.2156 cv
315.69 53.0119 315.718 52.8191 315.726 52.6371 cv
315.735 52.4551 315.739 52.3078 315.739 52.1951 cv
315.739 51.3631 li
315.713 51.3631 li
315.488 51.7271 315.183 52.0131 314.797 52.2211 cv
314.411 52.4291 313.958 52.5331 313.438 52.5331 cv
312.996 52.5331 312.58 52.4529 312.19 52.2926 cv
311.8 52.1323 311.46 51.9113 311.17 51.6296 cv
310.88 51.348 310.65 51.0208 310.481 50.6481 cv
310.312 50.2755 310.227 49.8768 310.227 49.4521 cv
310.227 49.0274 310.312 48.6288 310.481 48.2561 cv
310.65 47.8835 310.88 47.5584 311.17 47.2811 cv
311.46 47.0038 311.8 46.7828 312.19 46.6181 cv
312.58 46.4535 312.996 46.3712 313.438 46.3712 cv
cp
305.587 46.3712 mo
306.046 46.3712 306.468 46.4491 306.854 46.6051 cv
307.24 46.7611 307.573 46.9799 307.855 47.2616 cv
308.137 47.5433 308.356 47.877 308.512 48.2626 cv
308.668 48.6483 308.745 49.0708 308.745 49.5301 cv
308.745 49.9895 308.668 50.412 308.512 50.7976 cv
308.356 51.1833 308.137 51.517 307.855 51.7986 cv
307.573 52.0803 307.24 52.2991 306.854 52.4551 cv
306.468 52.6111 306.046 52.6891 305.587 52.6891 cv
305.127 52.6891 304.702 52.6111 304.313 52.4551 cv
303.922 52.2991 303.589 52.0803 303.311 51.7986 cv
303.034 51.517 302.818 51.1833 302.662 50.7976 cv
302.505 50.412 302.428 49.9895 302.428 49.5301 cv
302.428 49.0708 302.505 48.6483 302.662 48.2626 cv
302.818 47.877 303.034 47.5433 303.311 47.2616 cv
303.589 46.9799 303.922 46.7611 304.313 46.6051 cv
304.702 46.4491 305.127 46.3712 305.587 46.3712 cv
cp
285.541 46.3712 mo
286.269 46.3712 286.85 46.5423 287.283 46.8846 cv
287.716 47.227 287.933 47.7794 287.933 48.5421 cv
287.933 50.0111 li
287.933 50.3058 287.935 50.5701 287.939 50.8041 cv
287.944 51.0381 287.95 51.2548 287.959 51.4541 cv
287.968 51.6534 287.978 51.8398 287.991 52.0131 cv
288.004 52.1864 288.024 52.3598 288.05 52.5331 cv
287.322 52.5331 li
287.27 52.2384 287.244 51.9135 287.244 51.5581 cv
287.218 51.5581 li
286.993 51.9482 286.713 52.2341 286.379 52.4161 cv
286.046 52.5981 285.623 52.6891 285.112 52.6891 cv
284.852 52.6891 284.596 52.6566 284.345 52.5916 cv
284.094 52.5266 283.868 52.4226 283.669 52.2796 cv
283.47 52.1366 283.307 51.9525 283.182 51.7271 cv
283.056 51.5018 282.993 51.2288 282.993 50.9081 cv
282.993 50.4488 283.11 50.0848 283.344 49.8161 cv
283.578 49.5475 283.866 49.3459 284.208 49.2116 cv
284.551 49.0773 284.915 48.9906 285.301 48.9516 cv
285.686 48.9126 286.026 48.8931 286.321 48.8931 cv
287.231 48.8931 li
287.231 48.5291 li
287.231 48.0091 287.071 47.6365 286.75 47.4111 cv
286.429 47.1858 286.026 47.0732 285.541 47.0732 cv
284.848 47.0732 284.237 47.2984 283.708 47.7491 cv
283.253 47.2161 li
283.539 46.9388 283.894 46.7286 284.319 46.5856 cv
284.744 46.4426 285.151 46.3712 285.541 46.3712 cv
cp
275.024 46.3712 mo
275.518 46.3712 275.945 46.4621 276.305 46.6441 cv
276.664 46.8261 276.944 47.1121 277.143 47.5021 cv
276.441 47.9181 li
276.294 47.6408 276.11 47.4306 275.889 47.2876 cv
275.668 47.1446 275.38 47.0732 275.024 47.0732 cv
274.886 47.0732 274.74 47.0948 274.589 47.1381 cv
274.437 47.1815 274.301 47.2421 274.179 47.3201 cv
274.058 47.3981 273.956 47.4978 273.874 47.6191 cv
273.791 47.7404 273.75 47.8791 273.75 48.0351 cv
273.75 48.3038 273.839 48.5031 274.017 48.6331 cv
274.194 48.7631 274.413 48.865 274.673 48.9386 cv
274.933 49.0123 275.219 49.0751 275.531 49.1271 cv
275.843 49.1791 276.129 49.2636 276.389 49.3806 cv
276.649 49.4976 276.868 49.6666 277.046 49.8876 cv
277.223 50.1086 277.312 50.4228 277.312 50.8301 cv
277.312 51.1422 277.254 51.4129 277.137 51.6426 cv
277.02 51.8723 276.859 52.0651 276.656 52.2211 cv
276.452 52.3771 276.22 52.4941 275.96 52.5721 cv
275.7 52.6501 275.427 52.6891 275.141 52.6891 cv
274.621 52.6891 274.147 52.5895 273.718 52.3901 cv
273.289 52.1908 272.957 51.8831 272.723 51.4671 cv
273.412 50.9991 li
273.577 51.3198 273.819 51.5646 274.14 51.7336 cv
274.461 51.9026 274.799 51.9871 275.154 51.9871 cv
275.319 51.9871 275.484 51.9612 275.648 51.9091 cv
275.813 51.8571 275.96 51.7835 276.09 51.6881 cv
276.22 51.5928 276.326 51.4779 276.409 51.3436 cv
276.491 51.2093 276.532 51.0555 276.532 50.8821 cv
276.532 50.6048 276.443 50.3968 276.266 50.2581 cv
276.088 50.1194 275.869 50.0111 275.609 49.9331 cv
275.349 49.8551 275.063 49.7879 274.751 49.7316 cv
274.439 49.6753 274.153 49.5886 273.893 49.4716 cv
273.633 49.3546 273.414 49.1921 273.237 48.9841 cv
273.059 48.7761 272.97 48.4814 272.97 48.1001 cv
272.97 47.8055 273.031 47.5498 273.152 47.3331 cv
273.274 47.1165 273.432 46.9366 273.627 46.7936 cv
273.822 46.6506 274.04 46.5444 274.283 46.4751 cv
274.526 46.4058 274.773 46.3712 275.024 46.3712 cv
cp
279.379 44.7982 mo
280.159 44.7982 li
280.159 46.5271 li
281.875 46.5271 li
281.875 47.2291 li
280.159 47.2291 li
280.159 51.1422 li
280.159 51.4108 280.233 51.6188 280.38 51.7661 cv
280.527 51.9135 280.731 51.9871 280.991 51.9871 cv
281.138 51.9871 281.288 51.9677 281.44 51.9286 cv
281.591 51.8896 281.736 51.8398 281.875 51.7791 cv
281.94 52.4811 li
281.793 52.5331 281.624 52.5808 281.433 52.6241 cv
281.242 52.6675 281.073 52.6891 280.926 52.6891 cv
280.649 52.6891 280.41 52.648 280.211 52.5656 cv
280.012 52.4833 279.851 52.3728 279.73 52.2341 cv
279.609 52.0955 279.52 51.933 279.464 51.7466 cv
279.407 51.5603 279.379 51.3588 279.379 51.1422 cv
279.379 47.2291 li
278.079 47.2291 li
278.079 46.5271 li
279.379 46.5271 li
cp
318.95 43.5631 mo
319.115 43.5631 319.254 43.6194 319.366 43.7321 cv
319.479 43.8448 319.535 43.9835 319.535 44.1481 cv
319.535 44.3128 319.479 44.4514 319.366 44.5641 cv
319.254 44.6768 319.115 44.7331 318.95 44.7331 cv
318.786 44.7331 318.647 44.6768 318.534 44.5641 cv
318.422 44.4514 318.365 44.3128 318.365 44.1481 cv
318.365 43.9835 318.422 43.8448 318.534 43.7321 cv
318.647 43.6194 318.786 43.5631 318.95 43.5631 cv
cp
299.776 42.7051 mo
300.556 42.7051 li
300.556 52.5331 li
299.776 52.5331 li
cp
293.276 42.7051 mo
294.056 42.7051 li
294.056 52.5331 li
293.276 52.5331 li
cp
290.143 42.7051 mo
290.923 42.7051 li
290.923 52.5331 li
290.143 52.5331 li
cp
@
317.963 65.5171 mo
317.633 65.5171 317.315 65.5388 317.007 65.5821 cv
316.699 65.6254 316.422 65.6991 316.175 65.8031 cv
315.928 65.9071 315.731 66.0457 315.584 66.2191 cv
315.436 66.3924 315.363 66.6091 315.363 66.8691 cv
315.363 67.0511 315.404 67.2136 315.486 67.3566 cv
315.569 67.4996 315.675 67.6166 315.805 67.7076 cv
315.935 67.7986 316.08 67.8679 316.24 67.9156 cv
316.401 67.9633 316.563 67.9871 316.728 67.9871 cv
317.144 67.9871 317.486 67.9264 317.755 67.8051 cv
318.023 67.6837 318.238 67.5256 318.398 67.3306 cv
318.559 67.1356 318.669 66.9146 318.73 66.6676 cv
318.79 66.4206 318.821 66.1714 318.821 65.9201 cv
318.821 65.5171 li
cp
302.727 63.0731 mo
302.363 63.0731 302.033 63.1381 301.739 63.2681 cv
301.444 63.3981 301.193 63.5736 300.985 63.7946 cv
300.777 64.0156 300.619 64.2756 300.51 64.5746 cv
300.402 64.8736 300.348 65.1921 300.348 65.5301 cv
300.348 65.8681 300.402 66.1866 300.51 66.4856 cv
300.619 66.7846 300.777 67.0446 300.985 67.2656 cv
301.193 67.4866 301.444 67.6621 301.739 67.7921 cv
302.033 67.9221 302.363 67.9871 302.727 67.9871 cv
303.091 67.9871 303.42 67.9221 303.715 67.7921 cv
304.009 67.6621 304.261 67.4866 304.469 67.2656 cv
304.677 67.0446 304.835 66.7846 304.943 66.4856 cv
305.052 66.1866 305.106 65.8681 305.106 65.5301 cv
305.106 65.1921 305.052 64.8736 304.943 64.5746 cv
304.835 64.2756 304.677 64.0156 304.469 63.7946 cv
304.261 63.5736 304.009 63.3981 303.715 63.2681 cv
303.42 63.1381 303.091 63.0731 302.727 63.0731 cv
cp
287.543 63.0731 mo
287.188 63.0731 286.858 63.1381 286.555 63.2681 cv
286.252 63.3981 285.987 63.5736 285.762 63.7946 cv
285.537 64.0156 285.359 64.2756 285.229 64.5746 cv
285.099 64.8736 285.034 65.1921 285.034 65.5301 cv
285.034 65.8681 285.099 66.1866 285.229 66.4856 cv
285.359 66.7846 285.537 67.0446 285.762 67.2656 cv
285.987 67.4866 286.252 67.6621 286.555 67.7921 cv
286.858 67.9221 287.188 67.9871 287.543 67.9871 cv
287.907 67.9871 288.236 67.9221 288.531 67.7921 cv
288.826 67.6621 289.077 67.4866 289.285 67.2656 cv
289.493 67.0446 289.651 66.7846 289.76 66.4856 cv
289.868 66.1866 289.922 65.8681 289.922 65.5301 cv
289.922 65.1921 289.868 64.8736 289.76 64.5746 cv
289.651 64.2756 289.493 64.0156 289.285 63.7946 cv
289.077 63.5736 288.826 63.3981 288.531 63.2681 cv
288.236 63.1381 287.907 63.0731 287.543 63.0731 cv
cp
279.6 63.0731 mo
279.236 63.0731 278.907 63.1381 278.612 63.2681 cv
278.318 63.3981 278.066 63.5736 277.858 63.7946 cv
277.65 64.0156 277.492 64.2756 277.384 64.5746 cv
277.275 64.8736 277.221 65.1921 277.221 65.5301 cv
277.221 65.8681 277.275 66.1866 277.384 66.4856 cv
277.492 66.7846 277.65 67.0446 277.858 67.2656 cv
278.066 67.4866 278.318 67.6621 278.612 67.7921 cv
278.907 67.9221 279.236 67.9871 279.6 67.9871 cv
279.964 67.9871 280.293 67.9221 280.588 67.7921 cv
280.883 67.6621 281.134 67.4866 281.342 67.2656 cv
281.55 67.0446 281.708 66.7846 281.817 66.4856 cv
281.925 66.1866 281.979 65.8681 281.979 65.5301 cv
281.979 65.1921 281.925 64.8736 281.817 64.5746 cv
281.708 64.2756 281.55 64.0156 281.342 63.7946 cv
281.134 63.5736 280.883 63.3981 280.588 63.2681 cv
280.293 63.1381 279.964 63.0731 279.6 63.0731 cv
cp
296.916 62.5271 mo
297.696 62.5271 li
297.696 68.5331 li
296.916 68.5331 li
cp
317.131 62.3711 mo
317.859 62.3711 318.439 62.5422 318.873 62.8846 cv
319.306 63.2269 319.523 63.7794 319.523 64.5421 cv
319.523 66.0111 li
319.523 66.3058 319.525 66.5701 319.529 66.8041 cv
319.534 67.0381 319.54 67.2548 319.549 67.4541 cv
319.557 67.6534 319.568 67.8398 319.581 68.0131 cv
319.594 68.1864 319.614 68.3597 319.64 68.5331 cv
318.912 68.5331 li
318.86 68.2384 318.834 67.9134 318.834 67.5581 cv
318.808 67.5581 li
318.582 67.9481 318.303 68.2341 317.969 68.4161 cv
317.635 68.5981 317.213 68.6891 316.702 68.6891 cv
316.442 68.6891 316.186 68.6566 315.935 68.5916 cv
315.683 68.5266 315.458 68.4226 315.259 68.2796 cv
315.059 68.1366 314.897 67.9524 314.771 67.7271 cv
314.646 67.5017 314.583 67.2288 314.583 66.9081 cv
314.583 66.4488 314.7 66.0847 314.934 65.8161 cv
315.168 65.5474 315.456 65.3459 315.798 65.2116 cv
316.141 65.0772 316.504 64.9906 316.89 64.9516 cv
317.276 64.9126 317.616 64.8931 317.911 64.8931 cv
318.821 64.8931 li
318.821 64.5291 li
318.821 64.0091 318.66 63.6364 318.34 63.4111 cv
318.019 63.1858 317.616 63.0731 317.131 63.0731 cv
316.437 63.0731 315.826 63.2984 315.298 63.7491 cv
314.843 63.2161 li
315.129 62.9388 315.484 62.7286 315.909 62.5856 cv
316.333 62.4426 316.741 62.3711 317.131 62.3711 cv
cp
310.488 62.3711 mo
310.956 62.3711 311.337 62.4447 311.632 62.5921 cv
311.926 62.7394 312.158 62.9323 312.327 63.1706 cv
312.496 63.4089 312.613 63.6841 312.678 63.9961 cv
312.743 64.3081 312.776 64.6288 312.776 64.9581 cv
312.776 68.5331 li
311.996 68.5331 li
311.996 64.9971 li
311.996 64.7544 311.974 64.5182 311.931 64.2886 cv
311.887 64.0589 311.811 63.8531 311.703 63.6711 cv
311.595 63.4891 311.443 63.3439 311.248 63.2356 cv
311.053 63.1273 310.8 63.0731 310.488 63.0731 cv
310.202 63.0731 309.931 63.1229 309.675 63.2226 cv
309.419 63.3222 309.198 63.4739 309.012 63.6776 cv
308.826 63.8813 308.678 64.1369 308.57 64.4446 cv
308.462 64.7523 308.408 65.1141 308.408 65.5301 cv
308.408 68.5331 li
307.628 68.5331 li
307.628 64.2171 li
307.628 64.1044 307.623 63.9679 307.615 63.8076 cv
307.606 63.6472 307.599 63.4847 307.595 63.3201 cv
307.591 63.1554 307.584 63.0016 307.576 62.8586 cv
307.567 62.7156 307.563 62.6051 307.563 62.5271 cv
308.343 62.5271 li
308.351 62.7524 308.358 62.9691 308.362 63.1771 cv
308.366 63.3851 308.377 63.5194 308.395 63.5801 cv
308.434 63.5801 li
308.59 63.2507 308.85 62.9669 309.214 62.7286 cv
309.578 62.4902 310.002 62.3711 310.488 62.3711 cv
cp
302.727 62.3711 mo
303.186 62.3711 303.609 62.4491 303.994 62.6051 cv
304.38 62.7611 304.714 62.9799 304.995 63.2616 cv
305.277 63.5432 305.496 63.8769 305.652 64.2626 cv
305.808 64.6483 305.886 65.0707 305.886 65.5301 cv
305.886 65.9894 305.808 66.4119 305.652 66.7976 cv
305.496 67.1833 305.277 67.5169 304.995 67.7986 cv
304.714 68.0803 304.38 68.2991 303.994 68.4551 cv
303.609 68.6111 303.186 68.6891 302.727 68.6891 cv
302.267 68.6891 301.843 68.6111 301.453 68.4551 cv
301.063 68.2991 300.729 68.0803 300.452 67.7986 cv
300.174 67.5169 299.958 67.1833 299.802 66.7976 cv
299.646 66.4119 299.568 65.9894 299.568 65.5301 cv
299.568 65.0707 299.646 64.6483 299.802 64.2626 cv
299.958 63.8769 300.174 63.5432 300.452 63.2616 cv
300.729 62.9799 301.063 62.7611 301.453 62.6051 cv
301.843 62.4491 302.267 62.3711 302.727 62.3711 cv
cp
287.543 62.3711 mo
288.002 62.3711 288.425 62.4491 288.811 62.6051 cv
289.196 62.7611 289.53 62.9799 289.812 63.2616 cv
290.093 63.5432 290.312 63.8769 290.468 64.2626 cv
290.624 64.6483 290.702 65.0707 290.702 65.5301 cv
290.702 65.9894 290.624 66.4119 290.468 66.7976 cv
290.312 67.1833 290.093 67.5169 289.812 67.7986 cv
289.53 68.0803 289.196 68.2991 288.811 68.4551 cv
288.425 68.6111 288.002 68.6891 287.543 68.6891 cv
287.318 68.6891 287.088 68.6653 286.854 68.6176 cv
286.62 68.5699 286.397 68.4962 286.185 68.3966 cv
285.972 68.2969 285.775 68.1712 285.593 68.0196 cv
285.411 67.8679 285.259 67.6881 285.138 67.4801 cv
285.112 67.4801 li
285.112 71.4971 li
284.332 71.4971 li
284.332 62.5271 li
285.112 62.5271 li
285.112 63.5801 li
285.138 63.5801 li
285.259 63.3721 285.411 63.1923 285.593 63.0406 cv
285.775 62.8889 285.972 62.7632 286.185 62.6636 cv
286.397 62.5639 286.62 62.4902 286.854 62.4426 cv
287.088 62.3949 287.318 62.3711 287.543 62.3711 cv
cp
279.6 62.3711 mo
280.06 62.3711 280.482 62.4491 280.868 62.6051 cv
281.253 62.7611 281.587 62.9799 281.869 63.2616 cv
282.15 63.5432 282.369 63.8769 282.525 64.2626 cv
282.681 64.6483 282.759 65.0707 282.759 65.5301 cv
282.759 65.9894 282.681 66.4119 282.525 66.7976 cv
282.369 67.1833 282.15 67.5169 281.869 67.7986 cv
281.587 68.0803 281.253 68.2991 280.868 68.4551 cv
280.482 68.6111 280.06 68.6891 279.6 68.6891 cv
279.141 68.6891 278.716 68.6111 278.326 68.4551 cv
277.936 68.2991 277.603 68.0803 277.325 67.7986 cv
277.048 67.5169 276.831 67.1833 276.675 66.7976 cv
276.519 66.4119 276.441 65.9894 276.441 65.5301 cv
276.441 65.0707 276.519 64.6483 276.675 64.2626 cv
276.831 63.8769 277.048 63.5432 277.325 63.2616 cv
277.603 62.9799 277.936 62.7611 278.326 62.6051 cv
278.716 62.4491 279.141 62.3711 279.6 62.3711 cv
cp
292.886 60.7981 mo
293.666 60.7981 li
293.666 62.5271 li
295.382 62.5271 li
295.382 63.2291 li
293.666 63.2291 li
293.666 67.1421 li
293.666 67.4107 293.74 67.6187 293.887 67.7661 cv
294.034 67.9134 294.238 67.9871 294.498 67.9871 cv
294.645 67.9871 294.795 67.9676 294.947 67.9286 cv
295.098 67.8896 295.243 67.8398 295.382 67.7791 cv
295.447 68.4811 li
295.3 68.5331 295.131 68.5807 294.94 68.6241 cv
294.749 68.6674 294.58 68.6891 294.433 68.6891 cv
294.156 68.6891 293.917 68.6479 293.718 68.5656 cv
293.519 68.4832 293.358 68.3727 293.237 68.2341 cv
293.116 68.0954 293.027 67.9329 292.97 67.7466 cv
292.914 67.5602 292.886 67.3587 292.886 67.1421 cv
292.886 63.2291 li
291.586 63.2291 li
291.586 62.5271 li
292.886 62.5271 li
cp
297.306 59.5631 mo
297.47 59.5631 297.609 59.6194 297.722 59.7321 cv
297.835 59.8448 297.891 59.9834 297.891 60.1481 cv
297.891 60.3127 297.835 60.4514 297.722 60.5641 cv
297.609 60.6768 297.47 60.7331 297.306 60.7331 cv
297.141 60.7331 297.003 60.6768 296.89 60.5641 cv
296.777 60.4514 296.721 60.3127 296.721 60.1481 cv
296.721 59.9834 296.777 59.8448 296.89 59.7321 cv
297.003 59.6194 297.141 59.5631 297.306 59.5631 cv
cp
324.449 59.0171 mo
324.753 59.4331 325.019 59.8773 325.249 60.3496 cv
325.479 60.8219 325.672 61.3051 325.828 61.7991 cv
325.983 62.2931 326.103 62.7914 326.185 63.2941 cv
326.267 63.7968 326.309 64.2951 326.309 64.7891 cv
326.309 65.8204 326.15 66.8387 325.834 67.8441 cv
325.518 68.8494 325.073 69.7551 324.501 70.5611 cv
323.839 70.1451 li
324.125 69.7897 324.371 69.3954 324.579 68.9621 cv
324.788 68.5287 324.963 68.0781 325.106 67.6101 cv
325.249 67.1421 325.355 66.6676 325.424 66.1866 cv
325.494 65.7056 325.529 65.2397 325.529 64.7891 cv
325.529 64.2864 325.49 63.8011 325.411 63.3331 cv
325.333 62.8651 325.223 62.4101 325.08 61.9681 cv
324.937 61.5261 324.762 61.0949 324.553 60.6746 cv
324.345 60.2542 324.107 59.8318 323.839 59.4071 cv
cp
274.92 59.0171 mo
275.583 59.4331 li
275.297 59.7884 275.05 60.1849 274.842 60.6226 cv
274.634 61.0602 274.459 61.5131 274.316 61.9811 cv
274.173 62.4491 274.067 62.9214 273.997 63.3981 cv
273.928 63.8748 273.893 64.3384 273.893 64.7891 cv
273.893 65.8031 274.041 66.7434 274.335 67.6101 cv
274.63 68.4767 275.046 69.3304 275.583 70.1711 cv
274.972 70.5611 li
274.669 70.1451 274.402 69.7009 274.173 69.2286 cv
273.943 68.7563 273.75 68.2731 273.594 67.7791 cv
273.438 67.2851 273.319 66.7867 273.237 66.2841 cv
273.154 65.7814 273.113 65.2831 273.113 64.7891 cv
273.113 63.7578 273.271 62.7394 273.588 61.7341 cv
273.904 60.7288 274.348 59.8231 274.92 59.0171 cv
cp
321.733 58.7051 mo
322.513 58.7051 li
322.513 68.5331 li
321.733 68.5331 li
cp
f
317.963 65.5171 mo
317.633 65.5171 317.315 65.5388 317.007 65.5821 cv
316.699 65.6255 316.422 65.6992 316.175 65.8031 cv
315.928 65.9071 315.731 66.0458 315.584 66.2191 cv
315.436 66.3925 315.363 66.6091 315.363 66.8691 cv
315.363 67.0511 315.404 67.2136 315.486 67.3566 cv
315.568 67.4996 315.675 67.6166 315.805 67.7076 cv
315.935 67.7986 316.08 67.868 316.24 67.9156 cv
316.4 67.9633 316.563 67.9871 316.728 67.9871 cv
317.144 67.9871 317.486 67.9265 317.755 67.8051 cv
318.023 67.6838 318.238 67.5256 318.398 67.3306 cv
318.558 67.1357 318.669 66.9146 318.73 66.6676 cv
318.79 66.4206 318.821 66.1715 318.821 65.9201 cv
318.821 65.5171 li
cp
302.727 63.0732 mo
302.363 63.0732 302.033 63.1381 301.739 63.2681 cv
301.444 63.3981 301.193 63.5736 300.985 63.7946 cv
300.777 64.0156 300.619 64.2756 300.51 64.5746 cv
300.402 64.8736 300.348 65.1921 300.348 65.5301 cv
300.348 65.8681 300.402 66.1866 300.51 66.4856 cv
300.619 66.7846 300.777 67.0446 300.985 67.2656 cv
301.193 67.4866 301.444 67.6621 301.739 67.7921 cv
302.033 67.9221 302.363 67.9871 302.727 67.9871 cv
303.091 67.9871 303.42 67.9221 303.715 67.7921 cv
304.009 67.6621 304.261 67.4866 304.469 67.2656 cv
304.677 67.0446 304.835 66.7846 304.943 66.4856 cv
305.052 66.1866 305.106 65.8681 305.106 65.5301 cv
305.106 65.1921 305.052 64.8736 304.943 64.5746 cv
304.835 64.2756 304.677 64.0156 304.469 63.7946 cv
304.261 63.5736 304.009 63.3981 303.715 63.2681 cv
303.42 63.1381 303.091 63.0732 302.727 63.0732 cv
cp
287.543 63.0732 mo
287.188 63.0732 286.858 63.1381 286.555 63.2681 cv
286.252 63.3981 285.987 63.5736 285.762 63.7946 cv
285.537 64.0156 285.359 64.2756 285.229 64.5746 cv
285.099 64.8736 285.034 65.1921 285.034 65.5301 cv
285.034 65.8681 285.099 66.1866 285.229 66.4856 cv
285.359 66.7846 285.537 67.0446 285.762 67.2656 cv
285.987 67.4866 286.252 67.6621 286.555 67.7921 cv
286.858 67.9221 287.188 67.9871 287.543 67.9871 cv
287.907 67.9871 288.236 67.9221 288.531 67.7921 cv
288.826 67.6621 289.077 67.4866 289.285 67.2656 cv
289.493 67.0446 289.651 66.7846 289.76 66.4856 cv
289.868 66.1866 289.922 65.8681 289.922 65.5301 cv
289.922 65.1921 289.868 64.8736 289.76 64.5746 cv
289.651 64.2756 289.493 64.0156 289.285 63.7946 cv
289.077 63.5736 288.826 63.3981 288.531 63.2681 cv
288.236 63.1381 287.907 63.0732 287.543 63.0732 cv
cp
279.6 63.0732 mo
279.236 63.0732 278.907 63.1381 278.612 63.2681 cv
278.317 63.3981 278.066 63.5736 277.858 63.7946 cv
277.65 64.0156 277.492 64.2756 277.384 64.5746 cv
277.275 64.8736 277.221 65.1921 277.221 65.5301 cv
277.221 65.8681 277.275 66.1866 277.384 66.4856 cv
277.492 66.7846 277.65 67.0446 277.858 67.2656 cv
278.066 67.4866 278.317 67.6621 278.612 67.7921 cv
278.907 67.9221 279.236 67.9871 279.6 67.9871 cv
279.964 67.9871 280.293 67.9221 280.588 67.7921 cv
280.883 67.6621 281.134 67.4866 281.342 67.2656 cv
281.55 67.0446 281.708 66.7846 281.817 66.4856 cv
281.925 66.1866 281.979 65.8681 281.979 65.5301 cv
281.979 65.1921 281.925 64.8736 281.817 64.5746 cv
281.708 64.2756 281.55 64.0156 281.342 63.7946 cv
281.134 63.5736 280.883 63.3981 280.588 63.2681 cv
280.293 63.1381 279.964 63.0732 279.6 63.0732 cv
cp
296.916 62.5271 mo
297.696 62.5271 li
297.696 68.5331 li
296.916 68.5331 li
cp
317.131 62.3712 mo
317.859 62.3712 318.439 62.5423 318.873 62.8846 cv
319.306 63.227 319.523 63.7794 319.523 64.5421 cv
319.523 66.0111 li
319.523 66.3058 319.525 66.5701 319.529 66.8041 cv
319.533 67.0381 319.54 67.2548 319.549 67.4541 cv
319.557 67.6534 319.568 67.8398 319.581 68.0131 cv
319.594 68.1864 319.614 68.3598 319.64 68.5331 cv
318.912 68.5331 li
318.86 68.2384 318.834 67.9135 318.834 67.5581 cv
318.808 67.5581 li
318.582 67.9482 318.303 68.2341 317.969 68.4161 cv
317.635 68.5981 317.213 68.6891 316.702 68.6891 cv
316.442 68.6891 316.186 68.6566 315.935 68.5916 cv
315.683 68.5266 315.458 68.4226 315.259 68.2796 cv
315.059 68.1366 314.897 67.9525 314.771 67.7271 cv
314.645 67.5018 314.583 67.2288 314.583 66.9081 cv
314.583 66.4488 314.7 66.0848 314.934 65.8161 cv
315.168 65.5475 315.456 65.3459 315.798 65.2116 cv
316.14 65.0773 316.504 64.9906 316.89 64.9516 cv
317.276 64.9126 317.616 64.8931 317.911 64.8931 cv
318.821 64.8931 li
318.821 64.5291 li
318.821 64.0091 318.66 63.6365 318.34 63.4111 cv
318.019 63.1858 317.616 63.0732 317.131 63.0732 cv
316.437 63.0732 315.826 63.2984 315.298 63.7491 cv
314.843 63.2161 li
315.129 62.9388 315.484 62.7286 315.909 62.5856 cv
316.333 62.4426 316.741 62.3712 317.131 62.3712 cv
cp
310.488 62.3712 mo
310.956 62.3712 311.337 62.4448 311.632 62.5921 cv
311.926 62.7394 312.158 62.9323 312.327 63.1706 cv
312.496 63.4089 312.613 63.6841 312.678 63.9961 cv
312.743 64.3081 312.776 64.6288 312.776 64.9581 cv
312.776 68.5331 li
311.996 68.5331 li
311.996 64.9971 li
311.996 64.7545 311.974 64.5183 311.931 64.2886 cv
311.887 64.0589 311.811 63.8531 311.703 63.6711 cv
311.595 63.4891 311.443 63.344 311.248 63.2357 cv
311.053 63.1273 310.8 63.0732 310.488 63.0732 cv
310.202 63.0732 309.931 63.123 309.675 63.2226 cv
309.419 63.3223 309.198 63.4739 309.012 63.6776 cv
308.826 63.8813 308.678 64.1369 308.57 64.4446 cv
308.462 64.7523 308.408 65.1141 308.408 65.5301 cv
308.408 68.5331 li
307.628 68.5331 li
307.628 64.2171 li
307.628 64.1044 307.623 63.968 307.615 63.8076 cv
307.606 63.6473 307.599 63.4848 307.595 63.3201 cv
307.591 63.1555 307.584 63.0016 307.576 62.8586 cv
307.567 62.7156 307.563 62.6051 307.563 62.5271 cv
308.343 62.5271 li
308.351 62.7524 308.358 62.9691 308.362 63.1771 cv
308.366 63.3851 308.377 63.5194 308.395 63.5801 cv
308.434 63.5801 li
308.59 63.2508 308.85 62.9669 309.214 62.7286 cv
309.578 62.4903 310.002 62.3712 310.488 62.3712 cv
cp
302.727 62.3712 mo
303.186 62.3712 303.609 62.4491 303.994 62.6051 cv
304.38 62.7611 304.714 62.9799 304.995 63.2616 cv
305.277 63.5433 305.496 63.877 305.652 64.2626 cv
305.808 64.6483 305.886 65.0708 305.886 65.5301 cv
305.886 65.9895 305.808 66.412 305.652 66.7976 cv
305.496 67.1833 305.277 67.517 304.995 67.7986 cv
304.714 68.0803 304.38 68.2991 303.994 68.4551 cv
303.609 68.6111 303.186 68.6891 302.727 68.6891 cv
302.267 68.6891 301.843 68.6111 301.453 68.4551 cv
301.063 68.2991 300.729 68.0803 300.452 67.7986 cv
300.174 67.517 299.958 67.1833 299.802 66.7976 cv
299.646 66.412 299.568 65.9895 299.568 65.5301 cv
299.568 65.0708 299.646 64.6483 299.802 64.2626 cv
299.958 63.877 300.174 63.5433 300.452 63.2616 cv
300.729 62.9799 301.063 62.7611 301.453 62.6051 cv
301.843 62.4491 302.267 62.3712 302.727 62.3712 cv
cp
287.543 62.3712 mo
288.002 62.3712 288.425 62.4491 288.811 62.6051 cv
289.196 62.7611 289.53 62.9799 289.812 63.2616 cv
290.093 63.5433 290.312 63.877 290.468 64.2626 cv
290.624 64.6483 290.702 65.0708 290.702 65.5301 cv
290.702 65.9895 290.624 66.412 290.468 66.7976 cv
290.312 67.1833 290.093 67.517 289.812 67.7986 cv
289.53 68.0803 289.196 68.2991 288.811 68.4551 cv
288.425 68.6111 288.002 68.6891 287.543 68.6891 cv
287.318 68.6891 287.088 68.6653 286.854 68.6176 cv
286.62 68.5699 286.397 68.4963 286.185 68.3966 cv
285.972 68.2969 285.775 68.1713 285.593 68.0196 cv
285.411 67.868 285.259 67.6881 285.138 67.4801 cv
285.112 67.4801 li
285.112 71.4971 li
284.332 71.4971 li
284.332 62.5271 li
285.112 62.5271 li
285.112 63.5801 li
285.138 63.5801 li
285.259 63.3721 285.411 63.1923 285.593 63.0406 cv
285.775 62.8889 285.972 62.7633 286.185 62.6636 cv
286.397 62.564 286.62 62.4903 286.854 62.4426 cv
287.088 62.395 287.318 62.3712 287.543 62.3712 cv
cp
279.6 62.3712 mo
280.059 62.3712 280.482 62.4491 280.868 62.6051 cv
281.253 62.7611 281.587 62.9799 281.869 63.2616 cv
282.15 63.5433 282.369 63.877 282.525 64.2626 cv
282.681 64.6483 282.759 65.0708 282.759 65.5301 cv
282.759 65.9895 282.681 66.412 282.525 66.7976 cv
282.369 67.1833 282.15 67.517 281.869 67.7986 cv
281.587 68.0803 281.253 68.2991 280.868 68.4551 cv
280.482 68.6111 280.059 68.6891 279.6 68.6891 cv
279.141 68.6891 278.716 68.6111 278.326 68.4551 cv
277.936 68.2991 277.602 68.0803 277.325 67.7986 cv
277.048 67.517 276.831 67.1833 276.675 66.7976 cv
276.519 66.412 276.441 65.9895 276.441 65.5301 cv
276.441 65.0708 276.519 64.6483 276.675 64.2626 cv
276.831 63.877 277.048 63.5433 277.325 63.2616 cv
277.602 62.9799 277.936 62.7611 278.326 62.6051 cv
278.716 62.4491 279.141 62.3712 279.6 62.3712 cv
cp
292.886 60.7982 mo
293.666 60.7982 li
293.666 62.5271 li
295.382 62.5271 li
295.382 63.2291 li
293.666 63.2291 li
293.666 67.1422 li
293.666 67.4108 293.74 67.6188 293.887 67.7661 cv
294.034 67.9135 294.238 67.9871 294.498 67.9871 cv
294.645 67.9871 294.795 67.9677 294.946 67.9286 cv
295.098 67.8896 295.243 67.8398 295.382 67.7791 cv
295.447 68.4811 li
295.3 68.5331 295.131 68.5808 294.94 68.6241 cv
294.749 68.6675 294.58 68.6891 294.433 68.6891 cv
294.156 68.6891 293.917 68.648 293.718 68.5656 cv
293.519 68.4833 293.358 68.3728 293.237 68.2341 cv
293.116 68.0955 293.027 67.933 292.97 67.7466 cv
292.914 67.5603 292.886 67.3588 292.886 67.1422 cv
292.886 63.2291 li
291.586 63.2291 li
291.586 62.5271 li
292.886 62.5271 li
cp
297.306 59.5631 mo
297.47 59.5631 297.609 59.6194 297.722 59.7321 cv
297.834 59.8448 297.891 59.9835 297.891 60.1481 cv
297.891 60.3128 297.834 60.4514 297.722 60.5641 cv
297.609 60.6768 297.47 60.7331 297.306 60.7331 cv
297.141 60.7331 297.003 60.6768 296.89 60.5641 cv
296.777 60.4514 296.721 60.3128 296.721 60.1481 cv
296.721 59.9835 296.777 59.8448 296.89 59.7321 cv
297.003 59.6194 297.141 59.5631 297.306 59.5631 cv
cp
324.449 59.0172 mo
324.753 59.4331 325.019 59.8773 325.249 60.3496 cv
325.479 60.8219 325.671 61.3051 325.827 61.7991 cv
325.983 62.2931 326.103 62.7914 326.185 63.2941 cv
326.267 63.7968 326.308 64.2951 326.308 64.7891 cv
326.308 65.8204 326.15 66.8388 325.834 67.8441 cv
325.518 68.8495 325.073 69.7551 324.501 70.5612 cv
323.838 70.1451 li
324.124 69.7898 324.371 69.3955 324.579 68.9621 cv
324.787 68.5288 324.963 68.0781 325.106 67.6101 cv
325.249 67.1422 325.355 66.6676 325.424 66.1866 cv
325.494 65.7056 325.528 65.2398 325.528 64.7891 cv
325.528 64.2864 325.489 63.8011 325.411 63.3331 cv
325.333 62.8651 325.223 62.4101 325.08 61.9681 cv
324.937 61.5261 324.761 61.095 324.553 60.6746 cv
324.345 60.2543 324.107 59.8318 323.838 59.4071 cv
cp
274.92 59.0172 mo
275.583 59.4331 li
275.297 59.7885 275.05 60.1849 274.842 60.6226 cv
274.634 61.0603 274.459 61.5131 274.316 61.9811 cv
274.173 62.4491 274.066 62.9214 273.997 63.3981 cv
273.928 63.8748 273.893 64.3384 273.893 64.7891 cv
273.893 65.8031 274.04 66.7435 274.335 67.6101 cv
274.63 68.4768 275.046 69.3304 275.583 70.1711 cv
274.972 70.5612 li
274.669 70.1451 274.402 69.701 274.173 69.2286 cv
273.943 68.7563 273.75 68.2731 273.594 67.7791 cv
273.438 67.2851 273.319 66.7868 273.237 66.2841 cv
273.154 65.7814 273.113 65.2831 273.113 64.7891 cv
273.113 63.7578 273.271 62.7394 273.588 61.7341 cv
273.904 60.7288 274.348 59.8232 274.92 59.0172 cv
cp
321.733 58.7051 mo
322.513 58.7051 li
322.513 68.5331 li
321.733 68.5331 li
cp
@
3 lw
375.159 48.0823 mo
339.81 47.9448 li
1 .927642 .0572518 .118349 cmyk
@
345.792 52.468 mo
336.81 47.9331 li
345.827 43.4681 li
cp
ef
263.359 47.9331 mo
220.667 47.9332 li
0 .991913 1 0 cmyk
@
226.667 43.4331 mo
217.667 47.9331 li
226.667 52.4331 li
cp
ef
231.795 112.501 mo
300.107 112.501 li
300.107 74.564 li
1 .927642 .0572518 .118349 cmyk
@
304.607 80.564 mo
300.107 71.564 li
295.607 80.564 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: SDUAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GLGSFD+ArialMT gcheck setglobal} if
1 154 3 <0002fffd0000055905ba0007000e0167b6010e0f10025502b8fff2b40f10
025502b8fff8b40d0d065502b8fff440590c0c0655090c0c0c0655050c0c
0c06552f10301067086809601088039010c905c606c010f0100b08055901
56025010680bb010f30cf30df30e09040c040d040e030b0a090504040c0d
0e080607070c09050408060c07010000b8fff8400f0c0c02550020070c14
07070c020303b8fff840150c0c02550320040c1404040c091e0505081e06
0306b80270400900080ce94002010202ba010b0001010b40120c20006507
03525004cf04df040390040104b80101400b500cc007df0c03900c010cb8
010140100f07cf07027f0780070207930fd6d7182b10f45d7119f45d71f4
5d7118ed10ed1a1910eded00183f3c1aed3fe43c10ed3c10ed87052e2b2b
7d10c4872e182b2b7d10c401111239391139398710c4c40ec4c4870510c4
c40ec4c43130014bb00b534bb01e515a58b4040f030807bafff00000fff8
38383838590172715d2b2b2b2b2b2b230133012303210313210326270607
030233d10258ddabfd9ba1d901f19946221c3305bafa4601bcfe44025a01
96b9778d8b00>GLGSFD+ArialMT AddT42Char 
1 1222 6 <000100a2000004e805ba000b0095401506051e080807070003041e020102
0a091e0b000807b8ffc0401d1012340754034a200a200d020a1a0d040920
0120000100201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8
fffab40c0c025500b8fffab40c0c065500b8fff0400a0d0d0655005d0c3b
5b182b4e10f42b2b2b2b2b2b5d3c4dfd3c4e10f65d4df4e42b003f3cfd3c
3f3cfd3c12392f3c10fd3c3130331121152111211521112115a20424fc9e
032bfcd5038405baadfe3facfe0dad00>GLGSFD+ArialMT AddT42Char 
1 1418 7 <000100a80000048505ba0009008d402b06051e08088f070107070003041e
0201020008079c2002200b02021a0b0409200120000100201010025500b8
fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255000c0b0b
065500b8fffeb40c0c065500b8fff0400a0d0d0655005d0a3b5c182b4e10
f42b2b2b2b2b2b2b5d3c4dfd3c4e10f65d4de4003f3f3cfd3c12392f5d3c
10fd3c313033112115211121152111a803ddfce502b0fd5005baadfe3aad
fd66>GLGSFD+ArialMT AddT42Char 
1 3076 11 <000100090000054605ba000a013eb1020243545840120501000802010200
080a00050908050102052fddcd10ddcd113333003f3f3f11123931301b40
242f05012a002803250a2f0c300c600c89088909900cc00cf00c0b200c50
0c0204020b0802b10602435458b709010c0b00080102003f3f0111123939
1b40240a0909200805140808050001012002051402020509010205e9200a
000809650801650208b8ffc0400b2839500801800890080208b80101400d
024028395f02018f029f020202b8010140112005500502300560059005c0
05f0050505b80288b30b60a8182b1910f45d71e45d712be45d712b1810ed
10ed003f3c1a19ed183f3c87052e2b7d10c4872e182b7d10c4014bb00b53
4bb014515a58b2000f0ab8fff1b2091201b8fff1b2081402b8ffee383838
38383859014bb028534bb036515a58b90000ffc03859593130015d715d00
5d5921013301161736370133010241fdc8d2017d2e1f222d018cc6fdc205
bafbd7807078780429fa4600>GLGSFD+ArialMT AddT42Char 
1 6648 19 <00010088000003f805ba000b0261401b060c0d0d0655070656065a09030f
0df305f60603090c1010025506b8fff4b40c0c02550ab8fff4b40c0c0255
09b8fff4b40c0c025503b8ffe840100d0d06555503770a02120620132134
08b8fff0b312273409b8fff0b41227341205b8fff0b312213409b8fff040
84122734060404050406370947040525062d0a580a7703750ada03e30607
a60601230626072508390638093f0d4f0d59045906580759097d04790599
09c606d204d606e406e907f706f90815120a0a0503030402060607090908
0a0a050908082507061407070603040425050a1405050a0a090603040801
02000405060708080b0b000a04b8010f400905040c0c0655052208b8010f
402120073f070207100c0c0655071a900d010d0b2500022501019000013f
004f000200b8fffe40310e0e025500100d0d025500100c0c0255000a0b0b
025500120b0b065500120c0c065500080d0d065500190c0de1214766182b
2b4ef42b2b2b2b2b2b2b5d713c4d10ed10ed4e1071f62b5d4dedf42bed00
3f3c103c103c3f3c3f3c11173987052e2b047d10c487052e182b0e7d10c4
0710083c083c0310083c083cb10602435458400d4b09011f098403020918
0d1134002b5d7159313001435c58400a092c1d3909081d1d3c06b8ffdeb2
1d3906b8ffd4b2203906b8ffd4b121392b2b2b2b2b595d00715d0171002b
2b435c58b90006ffc0b2213903b8ffc0b2163903b8ffdeb2103906b8ffde
b2103903b8ffdeb20c3903b8ffdeb10b392b2b2b2b2b2b59012b2b2b435c
584012dd040108141639090814143c090814143c06b8fff6b2183906b8ff
ecb11b392b2b2b2b2b015d59005d2b2b2b2b2b015d712b33113311013301
012301071188b401aae9fe6a01bfdefea17f05bafcbc01b0fe76fd64021f
7afe5b00>GLGSFD+ArialMT AddT42Char 
1 7564 21 <0001008700000626043e002301c7b9000dfff4b40d0d065508b8fff4b40d
0d065509b8ffd8404d0b0d342504e404e409e117e52005d505f620021708
202309181b20090303231e1c06151c0b0b06070106231a19100ad0250190
25a025022517171a0e2590110111041010025511180f0f025511b8ffec40
0b0e0e025511140c0c025511b8ffe840170b0b025511020b0b0655110c10
10065511060f0f065511b8fffab40c0c065511b8fff8b40d0d065511b801
5d400c1825901b011b180f0f02551bb8ffec400b0e0e02551b140c0c0255
1bb8ffee40110b0b02551b040b0b06551b0a101006551bb8fffe400b0d0d
06551b0c0f0f06551bb8fffcb40c0c06551bb8015d4016000233232501d0
00019000a000021f003f004f000300b8fffe401d0e0e025500100d0d0255
00100c0c0255000c0b0b025500160b0b065500b8fffcb41010065500b8ff
f440140f0f0655000a0c0c0655000e0d0d065500192425b80178b3214750
182b2b4ef42b2b2b2b2b2b2b2b2b5d71723c4dfde410f42b2b2b2b2b2b2b
2b2b5dedf42b2b2b2b2b2b2b2b2b2b5dfd4e456544e67172003f3c3c3c3f
3f3c4d10ed10ed11173901111239123931304379400e0c141326140c111b
01120d151b01002b012b2b81015d005d2b2b2b3311331536363332161736
3332161511231134262623220615112311342623220606151187a132a66a
76971f7eca9eaab3235c3e7094b458644c813a0426954e5f6258baafb6fd
27029d6c5f3a95a4fd9702b27878509a91fdd900>GLGSFD+ArialMT AddT42Char 
1 11384 29 <0001001a000003e80426000a01eab1020243545840170508000a08060106
0a0005090805010205240f0f0255052f2bddcd10ddcd113333003f3f3f12
3931301bb7350501002211390ab8ffde400d11390916121c340816121c34
02b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e213400281e2134
0ab8ffe8400922253400162225340ab8ffda407e282e340020282e340f0c
29002809260a3900350a4800470a56015602590858096601660269086909
78007701770279087809770a870187028603890788088a099d009809910a
ac00a20abd00b707b10ac900c50ada00d50aec00e30afb00f40a2c0a0005
0a1800160a2800260a370a4f00400a09054012163405400b0d34b1060243
5458400905010008060106000ab8fff4400f0d0d06550a000c0d0d065500
050908b8fff440120d0d0655080501020c0d0d06550205050c0b1112392f
dd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40370a0708082509
0a1409090a0003020225010014010100050a0a000a09080802020106070a
09030001052f0c010c22084040400980090209b8011bb5400580050205b8
011b400920024001220bead2182b10f6ed1a19fd5dfd5d1a18ede45d1112
3939123939003f3c103c103c3f3c113987052e2b877dc4872e182b877dc4
593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d59210133131617
363713330101aefe6cbee4251f182becb9fe6e0426fd84676f54760288fb
da00>GLGSFD+ArialMT AddT42Char 
GLGSFD+ArialMT /CharStrings get begin
/A 3 def
/E 6 def
/F 7 def
/V 11 def
/k 19 def
/m 21 def
/v 29 def
end
GLGSFD+ArialMT /Encoding get
dup 65 /A put
dup 69 /E put
dup 70 /F put
dup 86 /V put
dup 107 /k put
dup 109 /m put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GLGSFD+ArialMT*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /D /E /F 12{/.notdef}rp /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]GLGSFD+ArialMT nfGLGSFD+ArialMT*1 [13 0 0 -13 0 0 ]msf344.116 28.0641 mo(Stall )[8.67108 3.61139 7.23062 2.88858 2.88861 0 ]xsh343.116 43.0641 mo(Valid )[7.70648 7.2254 2.88339 2.88339 7.2254 0 ]xsh235.402 28.4954 mo(Stall )[8.6711 3.61139 7.23061 2.8886 2.88858 0 ]xsh236.402 43.4954 mo(Ack)sh258.073 43.4954 mo( )sh142 45.1104 mo(Fire signal to  )[7.94029 2.88861 4.3289 7.23059 3.6114 6.5 2.8886 7.23059 7.23061 7.23059 2.88861 3.61139 3.6114 7.23059 3.6114 0 ]xsh137 60.1104 mo(state elements )[6.5 3.61139 7.23061 3.61139 7.23061 3.61139 7.23061 2.8886 7.23059 10.8289 7.23061 7.23059 3.6114 6.5 0 ]xsh74.1468 44.8279 mo(State  )[8.6711 3.6114 7.2306 3.6114 7.2306 3.6114 0 ]xsh63.1468 59.8279 mo(elements )[7.23059 2.8886 7.23059 10.8289 7.2306 7.2306 3.6114 6.50001 0 ]xsh70.8609 168.091 mo(Eve)sh93.2626 168.091 mo(nt  )[7.2306 3.6114 3.6114 0 ]xsh60.8609 183.091 mo(Counters )[9.3886 7.2306 7.2306 7.2306 3.6114 7.2306 4.3289 6.5 0 ]xsh438.156 244.592 mo
427.037 244.592 li
427.037 192.842 li
438.156 192.842 li
441.364 192.842 443.966 195.443 443.966 198.652 cv
443.966 238.783 li
443.966 241.991 441.364 244.592 438.156 244.592 cv
.184314 .0352941 .2 .014902 cmyk
f
426.037 244.592 mo
414.919 244.592 li
411.71 244.592 409.109 241.991 409.109 238.783 cv
409.109 198.652 li
409.109 195.443 411.71 192.842 414.919 192.842 cv
426.037 192.842 li
426.037 244.592 li
.184314 .0352941 .2 .0156863 cmyk
f
427.037 244.592 mo
426.037 244.592 li
426.037 192.842 li
427.037 192.842 li
427.037 244.592 li
.784314 .576471 .72549 .737255 cmyk
f
1 lw
409.109 198.652 mo
409.109 195.443 411.71 192.842 414.919 192.842 cv
438.156 192.842 li
441.365 192.842 443.966 195.443 443.966 198.652 cv
443.966 238.783 li
443.966 241.991 441.365 244.592 438.156 244.592 cv
414.919 244.592 li
411.71 244.592 409.109 241.991 409.109 238.783 cv
cp
.750271 .679713 .654902 .901945 cmyk
@
418.477 203.566 mo
418.477 203.99 418.564 204.344 418.737 204.625 cv
418.911 204.907 419.11 205.13 419.335 205.295 cv
419.561 205.46 419.78 205.577 419.992 205.646 cv
420.204 205.715 420.349 205.75 420.427 205.75 cv
420.427 201.486 li
420.159 201.486 419.907 201.54 419.673 201.648 cv
419.439 201.757 419.234 201.904 419.056 202.09 cv
418.878 202.277 418.737 202.498 418.633 202.753 cv
418.529 203.009 418.477 203.28 418.477 203.566 cv
cp
418.477 229.878 mo
418.477 230.242 418.542 230.571 418.672 230.866 cv
418.802 231.16 418.978 231.412 419.199 231.62 cv
419.42 231.828 419.68 231.986 419.979 232.094 cv
420.278 232.202 420.596 232.257 420.934 232.257 cv
421.272 232.257 421.591 232.202 421.89 232.094 cv
422.189 231.986 422.449 231.828 422.67 231.62 cv
422.891 231.412 423.066 231.16 423.196 230.866 cv
423.326 230.571 423.391 230.242 423.391 229.878 cv
423.391 229.514 423.326 229.184 423.196 228.89 cv
423.066 228.595 422.891 228.344 422.67 228.136 cv
422.449 227.928 422.189 227.77 421.89 227.661 cv
421.591 227.553 421.272 227.499 420.934 227.499 cv
420.596 227.499 420.278 227.553 419.979 227.661 cv
419.68 227.77 419.42 227.928 419.199 228.136 cv
418.978 228.344 418.802 228.595 418.672 228.89 cv
418.542 229.184 418.477 229.514 418.477 229.878 cv
cp
417.931 225.042 mo
417.931 224.262 li
421.467 224.262 li
421.71 224.262 421.946 224.24 422.176 224.197 cv
422.406 224.153 422.611 224.077 422.793 223.969 cv
422.975 223.861 423.121 223.709 423.229 223.514 cv
423.337 223.319 423.391 223.066 423.391 222.754 cv
423.391 222.468 423.342 222.197 423.242 221.941 cv
423.142 221.686 422.991 221.464 422.787 221.278 cv
422.583 221.092 422.328 220.945 422.02 220.836 cv
421.712 220.728 421.35 220.674 420.934 220.674 cv
417.931 220.674 li
417.931 219.894 li
422.247 219.894 li
422.36 219.894 422.497 219.889 422.657 219.881 cv
422.817 219.872 422.98 219.865 423.144 219.861 cv
423.309 219.857 423.463 219.85 423.606 219.842 cv
423.749 219.833 423.859 219.829 423.937 219.829 cv
423.937 220.609 li
423.712 220.617 423.495 220.624 423.287 220.628 cv
423.079 220.633 422.945 220.643 422.884 220.661 cv
422.884 220.7 li
423.214 220.856 423.498 221.116 423.736 221.48 cv
423.974 221.844 424.093 222.268 424.093 222.754 cv
424.093 223.222 424.02 223.605 423.872 223.904 cv
423.725 224.203 423.532 224.437 423.294 224.606 cv
423.056 224.775 422.78 224.89 422.468 224.951 cv
422.156 225.011 421.836 225.042 421.506 225.042 cv
cp
417.775 196.286 mo
417.795 196.058 li
417.84 195.831 li
418.607 195.922 li
418.573 196.026 418.555 196.126 418.555 196.221 cv
418.555 196.559 418.61 196.851 418.718 197.098 cv
418.826 197.345 418.976 197.549 419.166 197.709 cv
419.357 197.87 419.58 197.989 419.836 198.067 cv
420.092 198.145 420.367 198.184 420.661 198.184 cv
423.937 198.184 li
423.937 198.964 li
419.621 198.964 li
419.509 198.964 419.372 198.968 419.212 198.977 cv
419.052 198.986 418.889 198.992 418.724 198.996 cv
418.56 199.001 418.406 199.007 418.263 199.016 cv
418.12 199.025 418.009 199.029 417.931 199.029 cv
417.931 198.249 li
418.157 198.24 418.373 198.234 418.581 198.229 cv
418.789 198.225 418.924 198.214 418.984 198.197 cv
418.629 197.997 418.339 197.742 418.113 197.43 cv
417.888 197.118 417.775 196.736 417.775 196.286 cv
cp
417.775 203.527 mo
417.775 203.068 417.856 202.662 418.016 202.311 cv
418.176 201.96 418.389 201.666 418.653 201.427 cv
418.917 201.189 419.218 201.009 419.556 200.888 cv
419.894 200.766 420.237 200.706 420.583 200.706 cv
421.129 200.706 li
421.129 205.75 li
421.294 205.75 421.504 205.717 421.76 205.652 cv
422.016 205.587 422.265 205.468 422.507 205.295 cv
422.75 205.122 422.958 204.89 423.131 204.599 cv
423.305 204.309 423.391 203.934 423.391 203.475 cv
423.391 203.076 423.296 202.691 423.105 202.318 cv
422.915 201.945 422.655 201.659 422.325 201.46 cv
422.806 200.888 li
423.266 201.191 423.595 201.566 423.794 202.012 cv
423.994 202.459 424.093 202.951 424.093 203.488 cv
424.093 203.947 424.015 204.363 423.859 204.736 cv
423.703 205.109 423.485 205.429 423.203 205.698 cv
422.921 205.967 422.588 206.172 422.202 206.315 cv
421.816 206.458 421.389 206.53 420.921 206.53 cv
420.471 206.53 420.055 206.456 419.673 206.309 cv
419.292 206.161 418.961 205.954 418.679 205.685 cv
418.397 205.416 418.176 205.1 418.016 204.736 cv
417.856 204.372 417.775 203.969 417.775 203.527 cv
cp
417.775 214.889 mo
417.775 214.421 417.849 214.039 417.996 213.745 cv
418.144 213.45 418.337 213.218 418.575 213.049 cv
418.813 212.88 419.088 212.763 419.4 212.698 cv
419.712 212.633 420.033 212.601 420.362 212.601 cv
423.937 212.601 li
423.937 213.381 li
420.401 213.381 li
420.159 213.381 419.923 213.402 419.693 213.446 cv
419.463 213.489 419.257 213.565 419.075 213.673 cv
418.893 213.781 418.748 213.933 418.64 214.128 cv
418.532 214.323 418.477 214.577 418.477 214.889 cv
418.477 215.175 418.527 215.445 418.627 215.701 cv
418.727 215.957 418.878 216.178 419.082 216.364 cv
419.286 216.551 419.541 216.698 419.849 216.806 cv
420.157 216.915 420.518 216.969 420.934 216.969 cv
423.937 216.969 li
423.937 217.749 li
419.621 217.749 li
419.509 217.749 419.372 217.753 419.212 217.762 cv
419.052 217.77 418.889 217.777 418.724 217.781 cv
418.56 217.786 418.406 217.792 418.263 217.801 cv
418.12 217.809 418.009 217.814 417.931 217.814 cv
417.931 217.034 li
418.157 217.025 418.373 217.018 418.581 217.014 cv
418.789 217.01 418.924 216.999 418.984 216.982 cv
418.984 216.943 li
418.655 216.787 418.371 216.527 418.133 216.163 cv
417.895 215.799 417.775 215.374 417.775 214.889 cv
cp
417.775 229.878 mo
417.775 229.418 417.853 228.996 418.009 228.61 cv
418.165 228.225 418.384 227.891 418.666 227.609 cv
418.948 227.327 419.281 227.109 419.667 226.953 cv
420.053 226.797 420.475 226.719 420.934 226.719 cv
421.394 226.719 421.816 226.797 422.202 226.953 cv
422.588 227.109 422.921 227.327 423.203 227.609 cv
423.485 227.891 423.703 228.225 423.859 228.61 cv
424.015 228.996 424.093 229.418 424.093 229.878 cv
424.093 230.337 424.015 230.762 423.859 231.152 cv
423.703 231.542 423.485 231.875 423.203 232.153 cv
422.921 232.43 422.588 232.647 422.202 232.803 cv
421.816 232.959 421.394 233.037 420.934 233.037 cv
420.475 233.037 420.053 232.959 419.667 232.803 cv
419.281 232.647 418.948 232.43 418.666 232.153 cv
418.384 231.875 418.165 231.542 418.009 231.152 cv
417.853 230.762 417.775 230.337 417.775 229.878 cv
cp
416.202 210.079 mo
416.202 209.299 li
417.931 209.299 li
417.931 207.583 li
418.633 207.583 li
418.633 209.299 li
422.546 209.299 li
422.815 209.299 423.023 209.225 423.17 209.078 cv
423.318 208.93 423.391 208.727 423.391 208.467 cv
423.391 208.319 423.372 208.17 423.333 208.018 cv
423.294 207.867 423.244 207.721 423.183 207.583 cv
423.885 207.518 li
423.937 207.665 423.985 207.834 424.028 208.025 cv
424.072 208.215 424.093 208.384 424.093 208.532 cv
424.093 208.809 424.052 209.047 423.97 209.247 cv
423.888 209.446 423.777 209.606 423.638 209.728 cv
423.5 209.849 423.337 209.938 423.151 209.994 cv
422.965 210.051 422.763 210.079 422.546 210.079 cv
418.633 210.079 li
418.633 211.379 li
417.931 211.379 li
417.931 210.079 li
cp
414.499 237.469 mo
414.499 236.846 414.61 236.263 414.831 235.721 cv
415.052 235.179 415.422 234.705 415.942 234.298 cv
416.527 234.999 li
416.094 235.286 415.778 235.652 415.578 236.098 cv
415.379 236.544 415.279 237.002 415.279 237.469 cv
415.279 238.068 415.383 238.607 415.591 239.088 cv
415.799 239.569 416.085 239.979 416.449 240.316 cv
416.813 240.654 417.242 240.915 417.736 241.096 cv
418.23 241.279 418.763 241.37 419.335 241.37 cv
419.907 241.37 420.44 241.279 420.934 241.096 cv
421.428 240.915 421.857 240.654 422.221 240.316 cv
422.585 239.979 422.871 239.569 423.079 239.088 cv
423.287 238.607 423.391 238.068 423.391 237.469 cv
423.391 237.236 423.363 236.993 423.307 236.742 cv
423.251 236.49 423.164 236.245 423.047 236.007 cv
422.93 235.769 422.783 235.541 422.605 235.325 cv
422.427 235.108 422.213 234.917 421.961 234.753 cv
422.494 234.051 li
423.092 234.493 423.521 235.004 423.781 235.585 cv
424.041 236.165 424.171 236.794 424.171 237.469 cv
424.171 238.172 424.052 238.815 423.814 239.4 cv
423.576 239.985 423.242 240.486 422.813 240.902 cv
422.384 241.318 421.873 241.643 421.279 241.876 cv
420.685 242.111 420.037 242.228 419.335 242.228 cv
418.633 242.228 417.988 242.111 417.398 241.876 cv
416.809 241.643 416.3 241.318 415.871 240.902 cv
415.442 240.486 415.106 239.985 414.863 239.4 cv
414.621 238.815 414.499 238.172 414.499 237.469 cv
cp
f
418.477 203.566 mo
418.477 203.99 418.564 204.344 418.737 204.625 cv
418.911 204.907 419.11 205.13 419.335 205.295 cv
419.561 205.459 419.78 205.576 419.992 205.646 cv
420.204 205.715 420.349 205.75 420.427 205.75 cv
420.427 201.486 li
420.159 201.486 419.907 201.54 419.673 201.648 cv
419.439 201.757 419.234 201.904 419.056 202.09 cv
418.878 202.277 418.737 202.498 418.633 202.753 cv
418.529 203.009 418.477 203.28 418.477 203.566 cv
cp
418.477 229.878 mo
418.477 230.242 418.542 230.571 418.672 230.866 cv
418.802 231.16 418.978 231.412 419.199 231.62 cv
419.42 231.828 419.68 231.986 419.979 232.094 cv
420.278 232.202 420.596 232.257 420.934 232.257 cv
421.272 232.257 421.591 232.202 421.89 232.094 cv
422.189 231.986 422.449 231.828 422.67 231.62 cv
422.891 231.412 423.066 231.16 423.196 230.866 cv
423.326 230.571 423.391 230.242 423.391 229.878 cv
423.391 229.514 423.326 229.184 423.196 228.89 cv
423.066 228.595 422.891 228.344 422.67 228.136 cv
422.449 227.928 422.189 227.769 421.89 227.661 cv
421.591 227.553 421.272 227.499 420.934 227.499 cv
420.596 227.499 420.278 227.553 419.979 227.661 cv
419.68 227.769 419.42 227.928 419.199 228.136 cv
418.978 228.344 418.802 228.595 418.672 228.89 cv
418.542 229.184 418.477 229.514 418.477 229.878 cv
cp
417.931 225.042 mo
417.931 224.262 li
421.467 224.262 li
421.71 224.262 421.946 224.24 422.176 224.197 cv
422.406 224.153 422.611 224.077 422.793 223.969 cv
422.975 223.861 423.121 223.709 423.229 223.514 cv
423.337 223.319 423.391 223.066 423.391 222.754 cv
423.391 222.468 423.342 222.197 423.242 221.941 cv
423.142 221.685 422.991 221.464 422.787 221.278 cv
422.583 221.092 422.328 220.944 422.02 220.836 cv
421.712 220.728 421.35 220.674 420.934 220.674 cv
417.931 220.674 li
417.931 219.894 li
422.247 219.894 li
422.36 219.894 422.497 219.889 422.657 219.881 cv
422.817 219.872 422.98 219.865 423.144 219.861 cv
423.309 219.857 423.463 219.85 423.606 219.842 cv
423.749 219.833 423.859 219.829 423.937 219.829 cv
423.937 220.609 li
423.712 220.617 423.495 220.624 423.287 220.628 cv
423.079 220.632 422.945 220.643 422.884 220.661 cv
422.884 220.7 li
423.214 220.856 423.498 221.116 423.736 221.48 cv
423.974 221.844 424.093 222.268 424.093 222.754 cv
424.093 223.222 424.02 223.605 423.872 223.904 cv
423.725 224.203 423.532 224.437 423.294 224.606 cv
423.056 224.775 422.78 224.89 422.468 224.951 cv
422.156 225.011 421.836 225.042 421.506 225.042 cv
cp
417.775 196.286 mo
417.795 196.058 li
417.84 195.831 li
418.607 195.922 li
418.573 196.026 418.555 196.125 418.555 196.221 cv
418.555 196.559 418.61 196.851 418.718 197.098 cv
418.826 197.345 418.976 197.549 419.166 197.709 cv
419.357 197.87 419.58 197.989 419.836 198.067 cv
420.092 198.145 420.367 198.184 420.661 198.184 cv
423.937 198.184 li
423.937 198.964 li
419.621 198.964 li
419.509 198.964 419.372 198.968 419.212 198.977 cv
419.052 198.985 418.889 198.992 418.724 198.996 cv
418.56 199.001 418.406 199.007 418.263 199.016 cv
418.12 199.024 418.009 199.029 417.931 199.029 cv
417.931 198.249 li
418.157 198.24 418.373 198.234 418.581 198.229 cv
418.789 198.225 418.924 198.214 418.984 198.197 cv
418.629 197.997 418.339 197.742 418.113 197.43 cv
417.888 197.118 417.775 196.736 417.775 196.286 cv
cp
417.775 203.527 mo
417.775 203.067 417.856 202.662 418.016 202.311 cv
418.176 201.96 418.389 201.666 418.653 201.427 cv
418.917 201.189 419.218 201.009 419.556 200.888 cv
419.894 200.766 420.237 200.706 420.583 200.706 cv
421.129 200.706 li
421.129 205.75 li
421.294 205.75 421.504 205.717 421.76 205.652 cv
422.016 205.587 422.265 205.468 422.507 205.295 cv
422.75 205.121 422.958 204.89 423.131 204.599 cv
423.305 204.309 423.391 203.934 423.391 203.475 cv
423.391 203.076 423.296 202.69 423.105 202.318 cv
422.915 201.945 422.655 201.659 422.325 201.46 cv
422.806 200.888 li
423.266 201.191 423.595 201.566 423.794 202.012 cv
423.994 202.459 424.093 202.95 424.093 203.488 cv
424.093 203.947 424.015 204.363 423.859 204.736 cv
423.703 205.108 423.485 205.429 423.203 205.698 cv
422.921 205.966 422.588 206.172 422.202 206.315 cv
421.816 206.458 421.389 206.53 420.921 206.53 cv
420.471 206.53 420.055 206.456 419.673 206.309 cv
419.292 206.161 418.961 205.953 418.679 205.685 cv
418.397 205.416 418.176 205.1 418.016 204.736 cv
417.856 204.372 417.775 203.969 417.775 203.527 cv
cp
417.775 214.889 mo
417.775 214.421 417.849 214.039 417.996 213.745 cv
418.144 213.45 418.337 213.218 418.575 213.049 cv
418.813 212.88 419.088 212.763 419.4 212.698 cv
419.712 212.633 420.033 212.601 420.362 212.601 cv
423.937 212.601 li
423.937 213.381 li
420.401 213.381 li
420.159 213.381 419.923 213.402 419.693 213.446 cv
419.463 213.489 419.257 213.565 419.075 213.673 cv
418.893 213.781 418.748 213.933 418.64 214.128 cv
418.532 214.323 418.477 214.577 418.477 214.889 cv
418.477 215.175 418.527 215.445 418.627 215.701 cv
418.727 215.957 418.878 216.178 419.082 216.364 cv
419.286 216.551 419.541 216.698 419.849 216.806 cv
420.157 216.915 420.518 216.969 420.934 216.969 cv
423.937 216.969 li
423.937 217.749 li
419.621 217.749 li
419.509 217.749 419.372 217.753 419.212 217.762 cv
419.052 217.77 418.889 217.777 418.724 217.781 cv
418.56 217.785 418.406 217.792 418.263 217.801 cv
418.12 217.809 418.009 217.814 417.931 217.814 cv
417.931 217.034 li
418.157 217.025 418.373 217.018 418.581 217.014 cv
418.789 217.01 418.924 216.999 418.984 216.982 cv
418.984 216.943 li
418.655 216.787 418.371 216.527 418.133 216.163 cv
417.895 215.799 417.775 215.374 417.775 214.889 cv
cp
417.775 229.878 mo
417.775 229.418 417.853 228.996 418.009 228.61 cv
418.165 228.224 418.384 227.891 418.666 227.609 cv
418.948 227.327 419.281 227.109 419.667 226.953 cv
420.053 226.797 420.475 226.719 420.934 226.719 cv
421.394 226.719 421.816 226.797 422.202 226.953 cv
422.588 227.109 422.921 227.327 423.203 227.609 cv
423.485 227.891 423.703 228.224 423.859 228.61 cv
424.015 228.996 424.093 229.418 424.093 229.878 cv
424.093 230.337 424.015 230.762 423.859 231.152 cv
423.703 231.542 423.485 231.875 423.203 232.153 cv
422.921 232.43 422.588 232.647 422.202 232.803 cv
421.816 232.959 421.394 233.037 420.934 233.037 cv
420.475 233.037 420.053 232.959 419.667 232.803 cv
419.281 232.647 418.948 232.43 418.666 232.153 cv
418.384 231.875 418.165 231.542 418.009 231.152 cv
417.853 230.762 417.775 230.337 417.775 229.878 cv
cp
416.202 210.079 mo
416.202 209.299 li
417.931 209.299 li
417.931 207.583 li
418.633 207.583 li
418.633 209.299 li
422.546 209.299 li
422.815 209.299 423.023 209.225 423.17 209.078 cv
423.318 208.93 423.391 208.727 423.391 208.467 cv
423.391 208.319 423.372 208.17 423.333 208.018 cv
423.294 207.866 423.244 207.721 423.183 207.583 cv
423.885 207.518 li
423.937 207.665 423.985 207.834 424.028 208.025 cv
424.072 208.215 424.093 208.384 424.093 208.532 cv
424.093 208.809 424.052 209.047 423.97 209.247 cv
423.888 209.446 423.777 209.606 423.638 209.728 cv
423.5 209.849 423.337 209.938 423.151 209.994 cv
422.965 210.05 422.763 210.079 422.546 210.079 cv
418.633 210.079 li
418.633 211.379 li
417.931 211.379 li
417.931 210.079 li
cp
414.499 237.47 mo
414.499 236.846 414.61 236.263 414.831 235.721 cv
415.052 235.179 415.422 234.705 415.942 234.298 cv
416.527 235 li
416.094 235.286 415.778 235.652 415.578 236.098 cv
415.379 236.544 415.279 237.002 415.279 237.47 cv
415.279 238.068 415.383 238.607 415.591 239.088 cv
415.799 239.569 416.085 239.979 416.449 240.317 cv
416.813 240.654 417.242 240.915 417.736 241.097 cv
418.23 241.279 418.763 241.37 419.335 241.37 cv
419.907 241.37 420.44 241.279 420.934 241.097 cv
421.428 240.915 421.857 240.654 422.221 240.317 cv
422.585 239.979 422.871 239.569 423.079 239.088 cv
423.287 238.607 423.391 238.068 423.391 237.47 cv
423.391 237.236 423.363 236.993 423.307 236.742 cv
423.251 236.49 423.164 236.245 423.047 236.007 cv
422.93 235.769 422.783 235.541 422.605 235.325 cv
422.427 235.108 422.213 234.917 421.961 234.753 cv
422.494 234.051 li
423.092 234.493 423.521 235.004 423.781 235.585 cv
424.041 236.165 424.171 236.794 424.171 237.47 cv
424.171 238.172 424.052 238.815 423.814 239.4 cv
423.576 239.985 423.242 240.486 422.813 240.902 cv
422.384 241.318 421.873 241.643 421.279 241.876 cv
420.685 242.111 420.037 242.228 419.335 242.228 cv
418.633 242.228 417.988 242.111 417.398 241.876 cv
416.809 241.643 416.3 241.318 415.871 240.902 cv
415.442 240.486 415.106 239.985 414.863 239.4 cv
414.621 238.815 414.499 238.172 414.499 237.47 cv
cp
@
432.775 211.692 mo
432.795 211.464 li
432.84 211.237 li
433.607 211.328 li
433.573 211.432 433.555 211.531 433.555 211.627 cv
433.555 211.965 433.61 212.257 433.718 212.504 cv
433.826 212.751 433.976 212.955 434.166 213.115 cv
434.357 213.275 434.58 213.395 434.836 213.473 cv
435.092 213.551 435.367 213.59 435.661 213.59 cv
438.937 213.59 li
438.937 214.37 li
434.621 214.37 li
434.509 214.37 434.372 214.374 434.212 214.383 cv
434.052 214.391 433.889 214.398 433.724 214.402 cv
433.56 214.406 433.406 214.413 433.263 214.422 cv
433.12 214.43 433.009 214.435 432.931 214.435 cv
432.931 213.655 li
433.157 213.646 433.373 213.639 433.581 213.635 cv
433.789 213.631 433.924 213.62 433.984 213.603 cv
433.629 213.403 433.339 213.148 433.113 212.836 cv
432.888 212.524 432.775 212.142 432.775 211.692 cv
cp
431.202 218.257 mo
431.202 217.477 li
432.931 217.477 li
432.931 215.761 li
433.633 215.761 li
433.633 217.477 li
437.546 217.477 li
437.815 217.477 438.023 217.403 438.17 217.256 cv
438.318 217.108 438.391 216.905 438.391 216.645 cv
438.391 216.497 438.372 216.348 438.333 216.196 cv
438.294 216.044 438.244 215.899 438.183 215.761 cv
438.885 215.696 li
438.937 215.843 438.985 216.012 439.028 216.203 cv
439.072 216.393 439.093 216.562 439.093 216.71 cv
439.093 216.987 439.052 217.225 438.97 217.425 cv
438.888 217.624 438.777 217.784 438.638 217.906 cv
438.5 218.027 438.337 218.116 438.151 218.172 cv
437.965 218.229 437.763 218.257 437.546 218.257 cv
433.633 218.257 li
433.633 219.557 li
432.931 219.557 li
432.931 218.257 li
cp
429.499 223.469 mo
429.499 222.846 429.61 222.263 429.831 221.721 cv
430.052 221.179 430.422 220.705 430.942 220.298 cv
431.527 220.999 li
431.094 221.286 430.778 221.652 430.578 222.098 cv
430.379 222.544 430.279 223.002 430.279 223.469 cv
430.279 224.068 430.383 224.607 430.591 225.088 cv
430.799 225.569 431.085 225.979 431.449 226.316 cv
431.813 226.654 432.242 226.915 432.736 227.096 cv
433.23 227.279 433.763 227.37 434.335 227.37 cv
434.907 227.37 435.44 227.279 435.934 227.096 cv
436.428 226.915 436.857 226.654 437.221 226.316 cv
437.585 225.979 437.871 225.569 438.079 225.088 cv
438.287 224.607 438.391 224.068 438.391 223.469 cv
438.391 223.236 438.363 222.993 438.307 222.742 cv
438.251 222.49 438.164 222.245 438.047 222.007 cv
437.93 221.769 437.783 221.541 437.605 221.325 cv
437.427 221.108 437.213 220.917 436.961 220.753 cv
437.494 220.051 li
438.092 220.493 438.521 221.004 438.781 221.585 cv
439.041 222.165 439.171 222.794 439.171 223.469 cv
439.171 224.172 439.052 224.815 438.814 225.4 cv
438.576 225.985 438.242 226.486 437.813 226.902 cv
437.384 227.318 436.873 227.643 436.279 227.876 cv
435.685 228.111 435.037 228.228 434.335 228.228 cv
433.633 228.228 432.988 228.111 432.398 227.876 cv
431.809 227.643 431.3 227.318 430.871 226.902 cv
430.442 226.486 430.106 225.985 429.863 225.4 cv
429.621 224.815 429.499 224.172 429.499 223.469 cv
cp
429.109 209.911 mo
429.109 209.131 li
438.937 209.131 li
438.937 209.911 li
cp
f
432.775 211.692 mo
432.795 211.464 li
432.84 211.237 li
433.607 211.328 li
433.573 211.432 433.555 211.531 433.555 211.627 cv
433.555 211.965 433.61 212.257 433.718 212.504 cv
433.826 212.751 433.976 212.955 434.166 213.115 cv
434.357 213.275 434.58 213.395 434.836 213.473 cv
435.092 213.551 435.367 213.59 435.661 213.59 cv
438.937 213.59 li
438.937 214.37 li
434.621 214.37 li
434.509 214.37 434.372 214.374 434.212 214.383 cv
434.052 214.391 433.889 214.398 433.724 214.402 cv
433.56 214.406 433.406 214.413 433.263 214.422 cv
433.12 214.43 433.009 214.435 432.931 214.435 cv
432.931 213.655 li
433.157 213.646 433.373 213.639 433.581 213.635 cv
433.789 213.631 433.924 213.62 433.984 213.603 cv
433.629 213.403 433.339 213.148 433.113 212.836 cv
432.888 212.524 432.775 212.142 432.775 211.692 cv
cp
431.202 218.257 mo
431.202 217.477 li
432.931 217.477 li
432.931 215.761 li
433.633 215.761 li
433.633 217.477 li
437.546 217.477 li
437.815 217.477 438.023 217.403 438.17 217.256 cv
438.318 217.108 438.391 216.905 438.391 216.645 cv
438.391 216.497 438.372 216.348 438.333 216.196 cv
438.294 216.044 438.244 215.899 438.183 215.761 cv
438.885 215.696 li
438.937 215.843 438.985 216.012 439.028 216.203 cv
439.072 216.393 439.093 216.562 439.093 216.71 cv
439.093 216.987 439.052 217.225 438.97 217.425 cv
438.888 217.624 438.777 217.784 438.638 217.906 cv
438.5 218.027 438.337 218.116 438.151 218.172 cv
437.965 218.228 437.763 218.257 437.546 218.257 cv
433.633 218.257 li
433.633 219.557 li
432.931 219.557 li
432.931 218.257 li
cp
429.499 223.47 mo
429.499 222.846 429.61 222.263 429.831 221.721 cv
430.052 221.179 430.422 220.705 430.942 220.298 cv
431.527 221 li
431.094 221.286 430.778 221.652 430.578 222.098 cv
430.379 222.544 430.279 223.002 430.279 223.47 cv
430.279 224.068 430.383 224.607 430.591 225.088 cv
430.799 225.569 431.085 225.979 431.449 226.317 cv
431.813 226.654 432.242 226.915 432.736 227.097 cv
433.23 227.279 433.763 227.37 434.335 227.37 cv
434.907 227.37 435.44 227.279 435.934 227.097 cv
436.428 226.915 436.857 226.654 437.221 226.317 cv
437.585 225.979 437.871 225.569 438.079 225.088 cv
438.287 224.607 438.391 224.068 438.391 223.47 cv
438.391 223.236 438.363 222.993 438.307 222.742 cv
438.251 222.49 438.164 222.245 438.047 222.007 cv
437.93 221.769 437.783 221.541 437.605 221.325 cv
437.427 221.108 437.213 220.917 436.961 220.753 cv
437.494 220.051 li
438.092 220.493 438.521 221.004 438.781 221.585 cv
439.041 222.165 439.171 222.794 439.171 223.47 cv
439.171 224.172 439.052 224.815 438.814 225.4 cv
438.576 225.985 438.242 226.486 437.813 226.902 cv
437.384 227.318 436.873 227.643 436.279 227.876 cv
435.685 228.111 435.037 228.228 434.335 228.228 cv
433.633 228.228 432.988 228.111 432.398 227.876 cv
431.809 227.643 431.3 227.318 430.871 226.902 cv
430.442 226.486 430.106 225.985 429.863 225.4 cv
429.621 224.815 429.499 224.172 429.499 223.47 cv
cp
429.109 209.911 mo
429.109 209.131 li
438.937 209.131 li
438.937 209.911 li
cp
@
438.156 426.76 mo
427.037 426.76 li
427.037 375.01 li
438.156 375.01 li
441.364 375.01 443.966 377.611 443.966 380.819 cv
443.966 420.95 li
443.966 424.159 441.364 426.76 438.156 426.76 cv
.184314 .0352941 .2 .014902 cmyk
f
426.037 426.76 mo
414.919 426.76 li
411.71 426.76 409.109 424.159 409.109 420.95 cv
409.109 380.819 li
409.109 377.611 411.71 375.01 414.919 375.01 cv
426.037 375.01 li
426.037 426.76 li
.184314 .0352941 .2 .0156863 cmyk
f
427.037 426.76 mo
426.037 426.76 li
426.037 375.01 li
427.037 375.01 li
427.037 426.76 li
.784314 .576471 .72549 .737255 cmyk
f
409.109 380.819 mo
409.109 377.611 411.71 375.01 414.919 375.01 cv
438.156 375.01 li
441.365 375.01 443.966 377.611 443.966 380.819 cv
443.966 420.95 li
443.966 424.159 441.365 426.76 438.156 426.76 cv
414.919 426.76 li
411.71 426.76 409.109 424.159 409.109 420.95 cv
cp
.750271 .679713 .654902 .901945 cmyk
@
418.477 385.734 mo
418.477 386.158 418.564 386.511 418.737 386.793 cv
418.911 387.075 419.11 387.298 419.335 387.463 cv
419.561 387.627 419.78 387.744 419.992 387.814 cv
420.204 387.883 420.349 387.918 420.427 387.918 cv
420.427 383.654 li
420.159 383.654 419.907 383.708 419.673 383.816 cv
419.439 383.924 419.234 384.072 419.056 384.258 cv
418.878 384.444 418.737 384.665 418.633 384.921 cv
418.529 385.177 418.477 385.448 418.477 385.734 cv
cp
418.477 412.045 mo
418.477 412.409 418.542 412.739 418.672 413.033 cv
418.802 413.328 418.978 413.579 419.199 413.787 cv
419.42 413.995 419.68 414.154 419.979 414.262 cv
420.278 414.37 420.596 414.424 420.934 414.424 cv
421.272 414.424 421.591 414.37 421.89 414.262 cv
422.189 414.154 422.449 413.995 422.67 413.787 cv
422.891 413.579 423.066 413.328 423.196 413.033 cv
423.326 412.739 423.391 412.409 423.391 412.045 cv
423.391 411.681 423.326 411.352 423.196 411.057 cv
423.066 410.763 422.891 410.511 422.67 410.303 cv
422.449 410.095 422.189 409.937 421.89 409.829 cv
421.591 409.72 421.272 409.666 420.934 409.666 cv
420.596 409.666 420.278 409.72 419.979 409.829 cv
419.68 409.937 419.42 410.095 419.199 410.303 cv
418.978 410.511 418.802 410.763 418.672 411.057 cv
418.542 411.352 418.477 411.681 418.477 412.045 cv
cp
417.931 407.209 mo
417.931 406.429 li
421.467 406.429 li
421.71 406.429 421.946 406.408 422.176 406.364 cv
422.406 406.321 422.611 406.245 422.793 406.137 cv
422.975 406.029 423.121 405.877 423.229 405.682 cv
423.337 405.487 423.391 405.233 423.391 404.921 cv
423.391 404.635 423.342 404.365 423.242 404.109 cv
423.142 403.853 422.991 403.632 422.787 403.446 cv
422.583 403.26 422.328 403.112 422.02 403.004 cv
421.712 402.896 421.35 402.841 420.934 402.841 cv
417.931 402.841 li
417.931 402.061 li
422.247 402.061 li
422.36 402.061 422.497 402.057 422.657 402.048 cv
422.817 402.04 422.98 402.033 423.144 402.029 cv
423.309 402.025 423.463 402.018 423.606 402.009 cv
423.749 402.001 423.859 401.996 423.937 401.996 cv
423.937 402.776 li
423.712 402.785 423.495 402.792 423.287 402.796 cv
423.079 402.8 422.945 402.811 422.884 402.828 cv
422.884 402.867 li
423.214 403.023 423.498 403.283 423.736 403.647 cv
423.974 404.011 424.093 404.436 424.093 404.921 cv
424.093 405.389 424.02 405.773 423.872 406.072 cv
423.725 406.371 423.532 406.605 423.294 406.774 cv
423.056 406.943 422.78 407.058 422.468 407.118 cv
422.156 407.179 421.836 407.209 421.506 407.209 cv
cp
417.775 378.454 mo
417.795 378.226 li
417.84 377.999 li
418.607 378.09 li
418.573 378.194 418.555 378.293 418.555 378.389 cv
418.555 378.727 418.61 379.019 418.718 379.266 cv
418.826 379.513 418.976 379.717 419.166 379.877 cv
419.357 380.037 419.58 380.156 419.836 380.234 cv
420.092 380.313 420.367 380.352 420.661 380.352 cv
423.937 380.352 li
423.937 381.132 li
419.621 381.132 li
419.509 381.132 419.372 381.136 419.212 381.145 cv
419.052 381.153 418.889 381.16 418.724 381.164 cv
418.56 381.168 418.406 381.175 418.263 381.184 cv
418.12 381.192 418.009 381.197 417.931 381.197 cv
417.931 380.417 li
418.157 380.408 418.373 380.401 418.581 380.397 cv
418.789 380.393 418.924 380.382 418.984 380.365 cv
418.629 380.165 418.339 379.91 418.113 379.598 cv
417.888 379.286 417.775 378.904 417.775 378.454 cv
cp
417.775 385.694 mo
417.775 385.235 417.856 384.83 418.016 384.479 cv
418.176 384.128 418.389 383.833 418.653 383.595 cv
418.917 383.357 419.218 383.177 419.556 383.056 cv
419.894 382.934 420.237 382.874 420.583 382.874 cv
421.129 382.874 li
421.129 387.918 li
421.294 387.918 421.504 387.885 421.76 387.82 cv
422.016 387.755 422.265 387.636 422.507 387.463 cv
422.75 387.289 422.958 387.057 423.131 386.767 cv
423.305 386.477 423.391 386.102 423.391 385.643 cv
423.391 385.244 423.296 384.858 423.105 384.486 cv
422.915 384.113 422.655 383.827 422.325 383.628 cv
422.806 383.056 li
423.266 383.359 423.595 383.734 423.794 384.18 cv
423.994 384.626 424.093 385.118 424.093 385.656 cv
424.093 386.115 424.015 386.531 423.859 386.904 cv
423.703 387.276 423.485 387.597 423.203 387.866 cv
422.921 388.134 422.588 388.34 422.202 388.483 cv
421.816 388.626 421.389 388.698 420.921 388.698 cv
420.471 388.698 420.055 388.624 419.673 388.477 cv
419.292 388.329 418.961 388.121 418.679 387.853 cv
418.397 387.584 418.176 387.268 418.016 386.904 cv
417.856 386.54 417.775 386.137 417.775 385.694 cv
cp
417.775 397.056 mo
417.775 396.588 417.849 396.207 417.996 395.912 cv
418.144 395.618 418.337 395.386 418.575 395.217 cv
418.813 395.048 419.088 394.931 419.4 394.866 cv
419.712 394.801 420.033 394.768 420.362 394.768 cv
423.937 394.768 li
423.937 395.548 li
420.401 395.548 li
420.159 395.548 419.923 395.57 419.693 395.613 cv
419.463 395.657 419.257 395.733 419.075 395.841 cv
418.893 395.949 418.748 396.101 418.64 396.296 cv
418.532 396.491 418.477 396.744 418.477 397.056 cv
418.477 397.342 418.527 397.613 418.627 397.869 cv
418.727 398.125 418.878 398.346 419.082 398.532 cv
419.286 398.718 419.541 398.866 419.849 398.974 cv
420.157 399.082 420.518 399.136 420.934 399.136 cv
423.937 399.136 li
423.937 399.916 li
419.621 399.916 li
419.509 399.916 419.372 399.921 419.212 399.929 cv
419.052 399.938 418.889 399.945 418.724 399.949 cv
418.56 399.953 418.406 399.96 418.263 399.968 cv
418.12 399.977 418.009 399.981 417.931 399.981 cv
417.931 399.201 li
418.157 399.193 418.373 399.186 418.581 399.182 cv
418.789 399.178 418.924 399.167 418.984 399.149 cv
418.984 399.11 li
418.655 398.954 418.371 398.694 418.133 398.33 cv
417.895 397.966 417.775 397.542 417.775 397.056 cv
cp
417.775 412.045 mo
417.775 411.586 417.853 411.163 418.009 410.778 cv
418.165 410.392 418.384 410.059 418.666 409.777 cv
418.948 409.495 419.281 409.276 419.667 409.12 cv
420.053 408.964 420.475 408.886 420.934 408.886 cv
421.394 408.886 421.816 408.964 422.202 409.12 cv
422.588 409.276 422.921 409.495 423.203 409.777 cv
423.485 410.059 423.703 410.392 423.859 410.778 cv
424.015 411.163 424.093 411.586 424.093 412.045 cv
424.093 412.505 424.015 412.929 423.859 413.319 cv
423.703 413.709 423.485 414.043 423.203 414.32 cv
422.921 414.598 422.588 414.814 422.202 414.97 cv
421.816 415.126 421.394 415.204 420.934 415.204 cv
420.475 415.204 420.053 415.126 419.667 414.97 cv
419.281 414.814 418.948 414.598 418.666 414.32 cv
418.384 414.043 418.165 413.709 418.009 413.319 cv
417.853 412.929 417.775 412.505 417.775 412.045 cv
cp
416.202 392.246 mo
416.202 391.466 li
417.931 391.466 li
417.931 389.75 li
418.633 389.75 li
418.633 391.466 li
422.546 391.466 li
422.815 391.466 423.023 391.393 423.17 391.245 cv
423.318 391.098 423.391 390.894 423.391 390.634 cv
423.391 390.487 423.372 390.338 423.333 390.186 cv
423.294 390.034 423.244 389.889 423.183 389.75 cv
423.885 389.685 li
423.937 389.833 423.985 390.002 424.028 390.192 cv
424.072 390.383 424.093 390.552 424.093 390.699 cv
424.093 390.977 424.052 391.215 423.97 391.414 cv
423.888 391.614 423.777 391.774 423.638 391.895 cv
423.5 392.017 423.337 392.106 423.151 392.162 cv
422.965 392.218 422.763 392.246 422.546 392.246 cv
418.633 392.246 li
418.633 393.546 li
417.931 393.546 li
417.931 392.246 li
cp
414.499 419.637 mo
414.499 419.013 414.61 418.43 414.831 417.889 cv
415.052 417.347 415.422 416.873 415.942 416.465 cv
416.527 417.167 li
416.094 417.453 415.778 417.819 415.578 418.266 cv
415.379 418.712 415.279 419.169 415.279 419.637 cv
415.279 420.235 415.383 420.775 415.591 421.256 cv
415.799 421.737 416.085 422.146 416.449 422.484 cv
416.813 422.822 417.242 423.082 417.736 423.264 cv
418.23 423.446 418.763 423.537 419.335 423.537 cv
419.907 423.537 420.44 423.446 420.934 423.264 cv
421.428 423.082 421.857 422.822 422.221 422.484 cv
422.585 422.146 422.871 421.737 423.079 421.256 cv
423.287 420.775 423.391 420.235 423.391 419.637 cv
423.391 419.403 423.363 419.161 423.307 418.909 cv
423.251 418.658 423.164 418.413 423.047 418.175 cv
422.93 417.936 422.783 417.709 422.605 417.492 cv
422.427 417.276 422.213 417.085 421.961 416.92 cv
422.494 416.218 li
423.092 416.66 423.521 417.172 423.781 417.752 cv
424.041 418.333 424.171 418.961 424.171 419.637 cv
424.171 420.339 424.052 420.983 423.814 421.568 cv
423.576 422.153 423.242 422.653 422.813 423.069 cv
422.384 423.485 421.873 423.81 421.279 424.044 cv
420.685 424.278 420.037 424.395 419.335 424.395 cv
418.633 424.395 417.988 424.278 417.398 424.044 cv
416.809 423.81 416.3 423.485 415.871 423.069 cv
415.442 422.653 415.106 422.153 414.863 421.568 cv
414.621 420.983 414.499 420.339 414.499 419.637 cv
cp
f
418.477 385.734 mo
418.477 386.158 418.564 386.511 418.737 386.793 cv
418.911 387.075 419.11 387.298 419.335 387.463 cv
419.561 387.627 419.78 387.744 419.992 387.814 cv
420.204 387.883 420.349 387.918 420.427 387.918 cv
420.427 383.654 li
420.159 383.654 419.907 383.708 419.673 383.816 cv
419.439 383.924 419.234 384.072 419.056 384.258 cv
418.878 384.444 418.737 384.665 418.633 384.921 cv
418.529 385.177 418.477 385.448 418.477 385.734 cv
cp
418.477 412.045 mo
418.477 412.409 418.542 412.739 418.672 413.033 cv
418.802 413.328 418.978 413.579 419.199 413.787 cv
419.42 413.995 419.68 414.154 419.979 414.262 cv
420.278 414.37 420.596 414.424 420.934 414.424 cv
421.272 414.424 421.591 414.37 421.89 414.262 cv
422.189 414.154 422.449 413.995 422.67 413.787 cv
422.891 413.579 423.066 413.328 423.196 413.033 cv
423.326 412.739 423.391 412.409 423.391 412.045 cv
423.391 411.681 423.326 411.352 423.196 411.057 cv
423.066 410.763 422.891 410.511 422.67 410.303 cv
422.449 410.095 422.189 409.937 421.89 409.829 cv
421.591 409.72 421.272 409.666 420.934 409.666 cv
420.596 409.666 420.278 409.72 419.979 409.829 cv
419.68 409.937 419.42 410.095 419.199 410.303 cv
418.978 410.511 418.802 410.763 418.672 411.057 cv
418.542 411.352 418.477 411.681 418.477 412.045 cv
cp
417.931 407.209 mo
417.931 406.429 li
421.467 406.429 li
421.71 406.429 421.946 406.408 422.176 406.364 cv
422.406 406.321 422.611 406.245 422.793 406.137 cv
422.975 406.029 423.121 405.877 423.229 405.682 cv
423.337 405.487 423.391 405.233 423.391 404.921 cv
423.391 404.635 423.342 404.365 423.242 404.109 cv
423.142 403.853 422.991 403.632 422.787 403.446 cv
422.583 403.26 422.328 403.112 422.02 403.004 cv
421.712 402.896 421.35 402.841 420.934 402.841 cv
417.931 402.841 li
417.931 402.061 li
422.247 402.061 li
422.36 402.061 422.497 402.057 422.657 402.048 cv
422.817 402.04 422.98 402.033 423.144 402.029 cv
423.309 402.025 423.463 402.018 423.606 402.009 cv
423.749 402.001 423.859 401.996 423.937 401.996 cv
423.937 402.776 li
423.712 402.785 423.495 402.792 423.287 402.796 cv
423.079 402.8 422.945 402.811 422.884 402.828 cv
422.884 402.867 li
423.214 403.023 423.498 403.283 423.736 403.647 cv
423.974 404.011 424.093 404.436 424.093 404.921 cv
424.093 405.389 424.02 405.773 423.872 406.072 cv
423.725 406.371 423.532 406.605 423.294 406.774 cv
423.056 406.943 422.78 407.058 422.468 407.118 cv
422.156 407.179 421.836 407.209 421.506 407.209 cv
cp
417.775 378.453 mo
417.795 378.226 li
417.84 377.999 li
418.607 378.09 li
418.573 378.194 418.555 378.293 418.555 378.389 cv
418.555 378.727 418.61 379.019 418.718 379.266 cv
418.826 379.513 418.976 379.717 419.166 379.877 cv
419.357 380.037 419.58 380.156 419.836 380.234 cv
420.092 380.313 420.367 380.352 420.661 380.352 cv
423.937 380.352 li
423.937 381.132 li
419.621 381.132 li
419.509 381.132 419.372 381.136 419.212 381.145 cv
419.052 381.153 418.889 381.16 418.724 381.164 cv
418.56 381.168 418.406 381.175 418.263 381.184 cv
418.12 381.192 418.009 381.197 417.931 381.197 cv
417.931 380.417 li
418.157 380.408 418.373 380.401 418.581 380.397 cv
418.789 380.393 418.924 380.382 418.984 380.365 cv
418.629 380.165 418.339 379.91 418.113 379.598 cv
417.888 379.286 417.775 378.904 417.775 378.453 cv
cp
417.775 385.695 mo
417.775 385.235 417.856 384.83 418.016 384.479 cv
418.176 384.128 418.389 383.833 418.653 383.595 cv
418.917 383.357 419.218 383.177 419.556 383.056 cv
419.894 382.934 420.237 382.874 420.583 382.874 cv
421.129 382.874 li
421.129 387.918 li
421.294 387.918 421.504 387.885 421.76 387.82 cv
422.016 387.755 422.265 387.636 422.507 387.463 cv
422.75 387.289 422.958 387.057 423.131 386.767 cv
423.305 386.477 423.391 386.102 423.391 385.643 cv
423.391 385.244 423.296 384.858 423.105 384.486 cv
422.915 384.113 422.655 383.827 422.325 383.628 cv
422.806 383.056 li
423.266 383.359 423.595 383.734 423.794 384.18 cv
423.994 384.626 424.093 385.118 424.093 385.656 cv
424.093 386.115 424.015 386.531 423.859 386.904 cv
423.703 387.276 423.485 387.597 423.203 387.866 cv
422.921 388.134 422.588 388.34 422.202 388.483 cv
421.816 388.626 421.389 388.698 420.921 388.698 cv
420.471 388.698 420.055 388.624 419.673 388.477 cv
419.292 388.329 418.961 388.121 418.679 387.853 cv
418.397 387.584 418.176 387.268 418.016 386.904 cv
417.856 386.54 417.775 386.137 417.775 385.695 cv
cp
417.775 397.056 mo
417.775 396.588 417.849 396.207 417.996 395.912 cv
418.144 395.618 418.337 395.386 418.575 395.217 cv
418.813 395.048 419.088 394.931 419.4 394.866 cv
419.712 394.801 420.033 394.768 420.362 394.768 cv
423.937 394.768 li
423.937 395.548 li
420.401 395.548 li
420.159 395.548 419.923 395.57 419.693 395.613 cv
419.463 395.657 419.257 395.733 419.075 395.841 cv
418.893 395.949 418.748 396.101 418.64 396.296 cv
418.532 396.491 418.477 396.744 418.477 397.056 cv
418.477 397.342 418.527 397.613 418.627 397.869 cv
418.727 398.125 418.878 398.346 419.082 398.532 cv
419.286 398.718 419.541 398.866 419.849 398.974 cv
420.157 399.082 420.518 399.136 420.934 399.136 cv
423.937 399.136 li
423.937 399.916 li
419.621 399.916 li
419.509 399.916 419.372 399.921 419.212 399.929 cv
419.052 399.938 418.889 399.945 418.724 399.949 cv
418.56 399.953 418.406 399.96 418.263 399.968 cv
418.12 399.977 418.009 399.981 417.931 399.981 cv
417.931 399.201 li
418.157 399.193 418.373 399.186 418.581 399.182 cv
418.789 399.178 418.924 399.167 418.984 399.149 cv
418.984 399.11 li
418.655 398.954 418.371 398.694 418.133 398.33 cv
417.895 397.966 417.775 397.542 417.775 397.056 cv
cp
417.775 412.045 mo
417.775 411.586 417.853 411.164 418.009 410.778 cv
418.165 410.392 418.384 410.059 418.666 409.777 cv
418.948 409.495 419.281 409.276 419.667 409.12 cv
420.053 408.964 420.475 408.886 420.934 408.886 cv
421.394 408.886 421.816 408.964 422.202 409.12 cv
422.588 409.276 422.921 409.495 423.203 409.777 cv
423.485 410.059 423.703 410.392 423.859 410.778 cv
424.015 411.164 424.093 411.586 424.093 412.045 cv
424.093 412.505 424.015 412.929 423.859 413.319 cv
423.703 413.709 423.485 414.043 423.203 414.32 cv
422.921 414.598 422.588 414.814 422.202 414.97 cv
421.816 415.126 421.394 415.204 420.934 415.204 cv
420.475 415.204 420.053 415.126 419.667 414.97 cv
419.281 414.814 418.948 414.598 418.666 414.32 cv
418.384 414.043 418.165 413.709 418.009 413.319 cv
417.853 412.929 417.775 412.505 417.775 412.045 cv
cp
416.202 392.246 mo
416.202 391.466 li
417.931 391.466 li
417.931 389.75 li
418.633 389.75 li
418.633 391.466 li
422.546 391.466 li
422.815 391.466 423.023 391.393 423.17 391.245 cv
423.318 391.098 423.391 390.894 423.391 390.634 cv
423.391 390.487 423.372 390.338 423.333 390.186 cv
423.294 390.034 423.244 389.889 423.183 389.75 cv
423.885 389.685 li
423.937 389.833 423.985 390.002 424.028 390.192 cv
424.072 390.383 424.093 390.552 424.093 390.699 cv
424.093 390.977 424.052 391.215 423.97 391.414 cv
423.888 391.614 423.777 391.774 423.638 391.895 cv
423.5 392.017 423.337 392.106 423.151 392.162 cv
422.965 392.218 422.763 392.246 422.546 392.246 cv
418.633 392.246 li
418.633 393.546 li
417.931 393.546 li
417.931 392.246 li
cp
414.499 419.637 mo
414.499 419.013 414.61 418.43 414.831 417.889 cv
415.052 417.347 415.422 416.873 415.942 416.465 cv
416.527 417.167 li
416.094 417.453 415.778 417.819 415.578 418.266 cv
415.379 418.712 415.279 419.169 415.279 419.637 cv
415.279 420.235 415.383 420.775 415.591 421.256 cv
415.799 421.737 416.085 422.146 416.449 422.484 cv
416.813 422.822 417.242 423.082 417.736 423.264 cv
418.23 423.446 418.763 423.537 419.335 423.537 cv
419.907 423.537 420.44 423.446 420.934 423.264 cv
421.428 423.082 421.857 422.822 422.221 422.484 cv
422.585 422.146 422.871 421.737 423.079 421.256 cv
423.287 420.775 423.391 420.235 423.391 419.637 cv
423.391 419.403 423.363 419.161 423.307 418.909 cv
423.251 418.658 423.164 418.413 423.047 418.175 cv
422.93 417.936 422.783 417.709 422.605 417.492 cv
422.427 417.276 422.213 417.085 421.961 416.92 cv
422.494 416.218 li
423.092 416.66 423.521 417.172 423.781 417.752 cv
424.041 418.333 424.171 418.961 424.171 419.637 cv
424.171 420.339 424.052 420.983 423.814 421.568 cv
423.576 422.153 423.242 422.653 422.813 423.069 cv
422.384 423.485 421.873 423.81 421.279 424.044 cv
420.685 424.278 420.037 424.395 419.335 424.395 cv
418.633 424.395 417.988 424.278 417.398 424.044 cv
416.809 423.81 416.3 423.485 415.871 423.069 cv
415.442 422.653 415.106 422.153 414.863 421.568 cv
414.621 420.983 414.499 420.339 414.499 419.637 cv
cp
@
432.775 393.859 mo
432.795 393.632 li
432.84 393.404 li
433.607 393.495 li
433.573 393.599 433.555 393.699 433.555 393.794 cv
433.555 394.132 433.61 394.425 433.718 394.672 cv
433.826 394.919 433.976 395.123 434.166 395.283 cv
434.357 395.443 434.58 395.562 434.836 395.64 cv
435.092 395.718 435.367 395.757 435.661 395.757 cv
438.937 395.757 li
438.937 396.537 li
434.621 396.537 li
434.509 396.537 434.372 396.542 434.212 396.55 cv
434.052 396.559 433.889 396.566 433.724 396.57 cv
433.56 396.574 433.406 396.581 433.263 396.589 cv
433.12 396.598 433.009 396.602 432.931 396.602 cv
432.931 395.822 li
433.157 395.814 433.373 395.807 433.581 395.803 cv
433.789 395.799 433.924 395.788 433.984 395.77 cv
433.629 395.571 433.339 395.315 433.113 395.003 cv
432.888 394.691 432.775 394.31 432.775 393.859 cv
cp
431.202 400.424 mo
431.202 399.644 li
432.931 399.644 li
432.931 397.928 li
433.633 397.928 li
433.633 399.644 li
437.546 399.644 li
437.815 399.644 438.023 399.571 438.17 399.423 cv
438.318 399.276 438.391 399.072 438.391 398.812 cv
438.391 398.665 438.372 398.516 438.333 398.364 cv
438.294 398.212 438.244 398.067 438.183 397.928 cv
438.885 397.863 li
438.937 398.011 438.985 398.18 439.028 398.37 cv
439.072 398.561 439.093 398.73 439.093 398.877 cv
439.093 399.155 439.052 399.393 438.97 399.592 cv
438.888 399.792 438.777 399.952 438.638 400.073 cv
438.5 400.195 438.337 400.283 438.151 400.34 cv
437.965 400.396 437.763 400.424 437.546 400.424 cv
433.633 400.424 li
433.633 401.724 li
432.931 401.724 li
432.931 400.424 li
cp
429.499 405.637 mo
429.499 405.013 429.61 404.43 429.831 403.889 cv
430.052 403.347 430.422 402.873 430.942 402.465 cv
431.527 403.167 li
431.094 403.453 430.778 403.819 430.578 404.266 cv
430.379 404.712 430.279 405.169 430.279 405.637 cv
430.279 406.235 430.383 406.775 430.591 407.256 cv
430.799 407.737 431.085 408.146 431.449 408.484 cv
431.813 408.822 432.242 409.082 432.736 409.264 cv
433.23 409.446 433.763 409.537 434.335 409.537 cv
434.907 409.537 435.44 409.446 435.934 409.264 cv
436.428 409.082 436.857 408.822 437.221 408.484 cv
437.585 408.146 437.871 407.737 438.079 407.256 cv
438.287 406.775 438.391 406.235 438.391 405.637 cv
438.391 405.403 438.363 405.161 438.307 404.909 cv
438.251 404.658 438.164 404.413 438.047 404.175 cv
437.93 403.936 437.783 403.709 437.605 403.492 cv
437.427 403.276 437.213 403.085 436.961 402.92 cv
437.494 402.218 li
438.092 402.66 438.521 403.172 438.781 403.752 cv
439.041 404.333 439.171 404.961 439.171 405.637 cv
439.171 406.339 439.052 406.983 438.814 407.568 cv
438.576 408.153 438.242 408.653 437.813 409.069 cv
437.384 409.485 436.873 409.81 436.279 410.044 cv
435.685 410.278 435.037 410.395 434.335 410.395 cv
433.633 410.395 432.988 410.278 432.398 410.044 cv
431.809 409.81 431.3 409.485 430.871 409.069 cv
430.442 408.653 430.106 408.153 429.863 407.568 cv
429.621 406.983 429.499 406.339 429.499 405.637 cv
cp
429.109 392.079 mo
429.109 391.299 li
438.937 391.299 li
438.937 392.079 li
cp
f
432.775 393.859 mo
432.795 393.632 li
432.84 393.404 li
433.607 393.495 li
433.573 393.599 433.555 393.699 433.555 393.794 cv
433.555 394.132 433.61 394.425 433.718 394.672 cv
433.826 394.919 433.976 395.123 434.166 395.283 cv
434.357 395.443 434.58 395.562 434.836 395.64 cv
435.092 395.718 435.367 395.757 435.661 395.757 cv
438.937 395.757 li
438.937 396.537 li
434.621 396.537 li
434.509 396.537 434.372 396.542 434.212 396.55 cv
434.052 396.559 433.889 396.566 433.724 396.57 cv
433.56 396.574 433.406 396.581 433.263 396.589 cv
433.12 396.598 433.009 396.602 432.931 396.602 cv
432.931 395.822 li
433.157 395.814 433.373 395.807 433.581 395.803 cv
433.789 395.799 433.924 395.788 433.984 395.77 cv
433.629 395.571 433.339 395.315 433.113 395.003 cv
432.888 394.691 432.775 394.31 432.775 393.859 cv
cp
431.202 400.424 mo
431.202 399.644 li
432.931 399.644 li
432.931 397.928 li
433.633 397.928 li
433.633 399.644 li
437.546 399.644 li
437.815 399.644 438.023 399.571 438.17 399.423 cv
438.318 399.276 438.391 399.072 438.391 398.812 cv
438.391 398.665 438.372 398.516 438.333 398.364 cv
438.294 398.212 438.244 398.067 438.183 397.928 cv
438.885 397.863 li
438.937 398.011 438.985 398.18 439.028 398.37 cv
439.072 398.561 439.093 398.73 439.093 398.877 cv
439.093 399.155 439.052 399.393 438.97 399.592 cv
438.888 399.792 438.777 399.952 438.638 400.073 cv
438.5 400.195 438.337 400.283 438.151 400.34 cv
437.965 400.396 437.763 400.424 437.546 400.424 cv
433.633 400.424 li
433.633 401.724 li
432.931 401.724 li
432.931 400.424 li
cp
429.499 405.637 mo
429.499 405.013 429.61 404.43 429.831 403.889 cv
430.052 403.347 430.422 402.873 430.942 402.465 cv
431.527 403.167 li
431.094 403.453 430.778 403.819 430.578 404.266 cv
430.379 404.712 430.279 405.169 430.279 405.637 cv
430.279 406.235 430.383 406.775 430.591 407.256 cv
430.799 407.737 431.085 408.146 431.449 408.484 cv
431.813 408.822 432.242 409.082 432.736 409.264 cv
433.23 409.446 433.763 409.537 434.335 409.537 cv
434.907 409.537 435.44 409.446 435.934 409.264 cv
436.428 409.082 436.857 408.822 437.221 408.484 cv
437.585 408.146 437.871 407.737 438.079 407.256 cv
438.287 406.775 438.391 406.235 438.391 405.637 cv
438.391 405.403 438.363 405.161 438.307 404.909 cv
438.251 404.658 438.164 404.413 438.047 404.175 cv
437.93 403.936 437.783 403.709 437.605 403.492 cv
437.427 403.276 437.213 403.085 436.961 402.92 cv
437.494 402.218 li
438.092 402.66 438.521 403.172 438.781 403.752 cv
439.041 404.333 439.171 404.961 439.171 405.637 cv
439.171 406.339 439.052 406.983 438.814 407.568 cv
438.576 408.153 438.242 408.653 437.813 409.069 cv
437.384 409.485 436.873 409.81 436.279 410.044 cv
435.685 410.278 435.037 410.395 434.335 410.395 cv
433.633 410.395 432.988 410.278 432.398 410.044 cv
431.809 409.81 431.3 409.485 430.871 409.069 cv
430.442 408.653 430.106 408.153 429.863 407.568 cv
429.621 406.983 429.499 406.339 429.499 405.637 cv
cp
429.109 392.079 mo
429.109 391.299 li
438.937 391.299 li
438.937 392.079 li
cp
@
3 lw
409.109 218.717 mo
211.787 218.717 li
211.787 228.941 li
1 .927642 .0572518 .118349 cmyk
@
207.287 222.941 mo
211.787 231.941 li
216.287 222.941 li
cp
ef
409.109 400.885 mo
211.787 400.885 li
211.787 388.088 li
@
207.287 394.088 mo
211.787 385.088 li
216.287 394.088 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: SDUAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GLGSFD+ArialMT gcheck setglobal} if
1 42 2 <00010000ffe7023905d300030053b90003ffdeb2143902b8ffde40201439
97030102039f03af0302037600011400000102010003000a03e80002e801
b801a9b5000004b37a182b103c10f4ed10ed003f3c3f3c87052e2b5d7d10
c43130015d2b2b1501330101a990fe581905ecfa1400>GLGSFD+ArialMT AddT42Char 
1 1600 8 <000200a1000005ad05ba0018002201fc4021120b0e0112361c5a1f66086d
1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550d
b8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2
b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d27340fb8
ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2b3121a34
0fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b0221
1a160a061211100d0c0518090916171a191e17b8ffc040190b0b06551717
0021221e0201020018180f0f0e081e260e9c06b8ffe8b40f0f025506b8ff
f6b40d0d025506b8ffe040220c0c025506060d0d0655065d202470248024
03242218200120000100201010025500b8fff6b40f0f025500b8fff6b40d
0d025500b8fffa400b0c0c025500060b0b065500b8fff7b40c0c065500b8
fff8400a0d0d0655005d233ba8182b4e10f42b2b2b2b2b2b2b5d3c4dfd3c
105df62b2b2b2b19e418ed003f3c103c103c3f3cfd3c12392f2bfd3c103c
392f12173901111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b
2b2b2b2b002b2b2b5d435c58400a08400f390f103a11123a2b2b2b590171
435c58b9000effde401a193911221939122219390e401c39102214391022
1f39102215392b2b2b2b2b2b2b5933112132161615140607161716171323
032e02272623231111213236363534262321a1028ac4cc7acad34d28554c
fff4c2556e572d214be101a185964e97a3fe3005ba4fc8799cd61d25244e
75fe710131848c380b07fd750333377947688600>GLGSFD+ArialMT AddT42Char 
1 11926 30 <00010021fe5103ee0426001a01f7b10202435458401d0a140f030b031c19
0f12060b061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a
1910dd1a18cd003f3f3fed12173931301bb30f1c010fb8ffde406d1c3928
14560faf0a03400d400f020f202830341020283034070c0912160d181227
0b270c270d360c360d350e99110b28122813481659125913591569126913
69157906760d79117a147a15850d8a118c128c138914980aa80bbc10bb11
ba14ea0ae714f50dfd10f914ff1c1e12b106024354584016130b1c1b040f
440f840f030f190b031c190f12060b06003f3f3fed1112395d0111123939
1b40370f0f0c101112120a00031914131325120a1412120a0f0c0f110c25
0b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021cb802
3fb50f1340124014b80254400b3f124012025f12bf120212b80142b60f01
2200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020cb801
42b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a1910
ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c103c
87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c44bb0
0e534bb018515a58bb000cffe8000bffe80138385959313001435c58b900
14ffdeb637390a2237390eb8ffe8b51539112215392b2b2b2b595d712b2b
00715d2b015d591327163332363736373637013313161736371333010607
060623227f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c412430
7c5634fe67a91028241b6b0f1d0428fd9975817c76026bfbc8af42595300
>GLGSFD+ArialMT AddT42Char 
GLGSFD+ArialMT /CharStrings get begin
/slash 2 def
/R 8 def
/y 30 def
end
GLGSFD+ArialMT /Encoding get
dup 47 /slash put
dup 82 /R put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GLGSFD+ArialMT*1 [32{/.notdef}rp /space 14{/.notdef}rp /slash 17{/.notdef}rp /A /.notdef /C /D /E /F 11{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]GLGSFD+ArialMT nfGLGSFD+ArialMT*1 [13 0 0 -13 0 0 ]msf277.336 210.078 mo(Copy/Read )[9.38858 7.23059 7.23062 6.5 3.61139 9.38861 7.23059 7.23059 7.23059 0 ]xsh277.336 415.621 mo(Copy/Read )[9.38858 7.23059 7.23062 6.5 3.61139 9.38861 7.23059 7.23059 7.23059 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/GLGSFD+ArialMT*1 uf/GLGSFD+ArialMT uf/SDUAAA+ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
